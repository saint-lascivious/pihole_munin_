#!/usr/bin/env sh

# pihole_munin_

# saint-lascivious (Hayden Pearce), 2025

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version="4.2.0"

: <<=cut
=head1 NAME

pihole_munin_

=head2 VERSION

${version}

=head1 APPLICABLE SYSTEMS

Pi-hole >= 6.0

=head1 DESCRIPTION

Munin plugins for monitoring various Pi-hole statistics.

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf suggest

=head1 WILDCARD PLUGIN

This is a wildcard plugin.

=head2 PLUGINS

  cache                Shows Pi-hole's cache
  cache_by_type        Shows Pi-hole's cached records by type
  clients              Shows active and total Pi-hole clients
  dnsmasq              Shows various Pi-hole FTLDNS dnsmasq statistics
  domains              Shows the number of domains being blocked by Pi-hole
  gravity              Shows various Pi-hole gravity database statistics
  percent              Shows Pi-hole's blocked query percentage
  privacy              Shows Pi-hole's privacy level
  queries              Shows Pi-hole queries
  queries_by_status    Shows Pi-hole queries by status
  queries_by_type      Shows Pi-hole queries by record type
  replies              Shows Pi-hole replies
  replies_by_type      Shows Pi-hole replies by record type
  status               Shows Pi-hole's blocking status

=head1 USAGE

Use the 'admin' command to automatically install pihole_munin_ and enable all plugins at once.

E.g.

  ./pihole_munin_ admin enable

Alternatively, you can install manually and link this plugin to /etc/munin/plugins/ as the desired plugin(s) and restart munin-node.

E.g.

  sudo mv pihole_munin_ /usr/share/munin/plugins/pihole_munin_
  sudo chmod +x /usr/share/munin/plugins/pihole_munin_

and then,

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_cache
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_cache_by_type
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_clients
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_dnsmasq
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_domains
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_gravity
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_percent
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_privacy
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_queries
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_queries_by_status
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_queries_by_type
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_replies
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_replies_by_type
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_status

and then,

  sudo systemctl restart munin-node.service

=head1 CONFIGURATION

Example configuration for /etc/munin/plugin-conf.d/pihole_munin_

  [pihole_munin_*]
      ### AUTHENTICATION ###

      # A Pi-hole application password may be used to authenticate with the
      # Pi-hole API, this password differs from the web interface password.
      env.app_password APP_PASSWORD_HERE

      # The Pi-hole password may also, but probably shouldn't, be used.
      env.pihole_password PIHOLE_PASSWORD_HERE

      # The path at which Pi-hole's CLI password may be found.
      # If found and readable, this password will be used to authenticate with
      # the Pi-hole API if no other password is provided.
      env.cli_password /etc/pihole/cli_pw

      ### API ###

      # These variables are used to construct the base of the API URL.
      env.proto http
      env.host 127.0.0.1
      env.port 80
      env.api /api

      ### ALERTS ###

      # The following variables are used to set the alert thresholds for
      # various plugins. The format is either a single value which
      # represents the maximum value before an alert is triggered, or a
      # range of values separated by a colon, where an alert will be
      # triggered if the value is outside of the specified range.

      # clients
      env.clients_active_crit 100
      env.clients_active_warn 1:50
      env.clients_total_crit 0:200
      env.clients_total_warn 100

      # domains
      env.domains_being_blocked_crit 1:5000000
      env.domains_being_blocked_warn 0:2500000

      # percent
      env.percent_blocked_crit 90
      env.percent_blocked_warn 1:80

      # privacy
      env.privacy_level_crit 1:3
      env.privacy_level_warn 3:3

      # queries
      env.queries_unique_domains_crit 1:20000
      env.queries_unique_domains_warn 0:10000

      # status
      env.status_crit 0:1
      env.status_warn 1:1

      ### MISCELLANEOUS ###

      # The user these plugins should run as.
      # The pihole user has access to the CLI password by default.
      user pihole

      # The graph_category value determines the category in which the
      # pihole_munin_* graphs appear in Munin's interface.
      env.graph_category dns

      # API responses are cached to reduce the number of requests made to the
      # Pi-hole API. This variable determines the time (in seconds) before
      # cached responses are considered stale.
      env.state_ttl 120

      # The session_ttl variable determines the time (in seconds) before
      # cached session IDs are considered stale.
      # This variable is only used if SESSION_CACHE is set to 1.
      env.session_ttl 300

The plugin can be configured manually, or via the command line using the admin command.

E.g.

  ./pihole_munin_ admin add <var> <val>
  ./pihole_munin_ admin remove <var>
  ./pihole_munin_ admin list

Variables MUST be entered without the env. prefix, and values SHOULD be without encapsulating quotation.

E.g.

  ./pihole_munin_ admin add graph_category dns
  ./pihole_munin_ admin add clients_active_warn 1:50
  ./pihole_munin_ admin add clients_total_warn 100

=head1 AUTHOR

saint-lascivious (Hayden Pearce), 2025

=head1 LICENSE

GNU GPLv3
=cut

api_target="${proto:-http}://${host:-127.0.0.1}:${port:-80}${api:-/api}"

auth_url="${auth_url:-/auth}"
dns_blocking_url="${dns_blocking_url:-/dns/blocking}"
info_ftl_url="${info_ftl_url:-/info/ftl}"
info_metrics_url="${info_metrics_url:-/info/metrics}"
stats_query_types_url="${stats_query_types_url:-/stats/query_types}"
stats_summary_url="${stats_summary_url:-/stats/summary}"

graph_category="${graph_category:-dns}"

cli_password="${cli_password:-/etc/pihole/cli_pw}"
app_password="${app_password:-}"
pihole_password="${password_to_use:-}"

pihole_munin_id="$(printf "%s" "$0" | sed -e 's/^.*pihole_munin_//')"

if [ -z "${pihole_munin_id}" ]; then
    pihole_munin_id="percent"
fi

password_to_use=""
password_set=0

if [ "${app_password+x}" ]; then
    password_to_use="$app_password"
    password_set=1
elif [ "${pihole_password+x}" ]; then
    password_to_use="$pihole_password"
    password_set=1
elif [ "$host" = "127.0.0.1" ] || [ "$host" = "localhost" ] || [ "$host" = "::" ]; then
    if [ -r "$cli_password" ]; then
        password_to_use=$(cat "$cli_password")
        password_set=1
    fi
fi

pihole_munin_print() {
    key_val=$1
    info_val=$2
    label_val=$3
    crit_val=$4
    warn_val=$5
    printf "%s\n" \
        "${key_val}.info ${info_val}" \
        "${key_val}.label ${label_val}"
    if [ -n "${crit_val}" ]; then
        printf "%s\n" "${key_val}.critical ${crit_val}"
    fi
    if [ -n "${warn_val}" ]; then
        printf "%s\n" "${key_val}.warning ${warn_val}"
    fi
}

auth_required="1"
already_authed="0"

pihole_munin_auth_check() {
    check_response=$(curl --connect-timeout 5 -k -s -w "%{response_code}" "${api_target}${auth_url}")
    check_json=$(printf "%s" "$check_response" | head -c -3)
    check_code=$(printf "%s" "$check_response" | tail -c 3)
    case "$check_code" in
        "200")
            if printf "%s" "$check_json" | jq -e '.session.valid == true' >/dev/null 2>&1; then
                auth_required="0"
                already_authed="1"
            fi
        ;;
        "401")
            :
        ;;
        *)
            printf "❌ Error: Unepected response while verifying authentication requirement, response code was '%s'.\n" "${check_code}" >&2
            exit 1
        ;;
    esac
}

session_cache="${SESSION_CACHE:-0}"
now=$(date +%s)

pihole_munin_auth() {
    session_file="${MUNIN_PLUGSTATE:-/tmp}/pihole_session.state"
    if [ "${session_cache}" -eq 1 ] && [ -r "$session_file" ]; then
        session_time=$(head -n 1 "$session_file")
        if [ $((now - session_time)) -lt "${session_ttl:-300}" ]; then
            sid=$(tail -n 1 "$session_file")
            return 0
        fi
    fi
    if [ "$password_set" -ne 1 ]; then
        printf "❌ Error: No App Password, Pi-hole Password or CLI Password was found.\n" >&2
        exit 1
    fi
    auth_response=$(curl --connect-timeout 5 -k -s -S -o - -w "%{response_code}" "${api_target}${auth_url}" -d "{\"password\":\"${password_to_use}\"}")
    auth_response_json=$(printf "%s" "${auth_response}" | head -c -3)
    auth_response_code=$(printf "%s" "${auth_response}" | tail -c 3)
    if [ "${auth_response_code}" -ne 200 ]; then
        printf "❌ Error: Could not get Session ID, response code was '%s'.\n" "${auth_response_code}" >&2
        exit 1
    fi
    sid=$(printf "%s" "${auth_response_json}" | jq -r '.session.sid')
    if [ -n "$sid" ] && [ "${session_cache}" -eq 1 ]; then
        { printf "%s\n%s\n" "$now" "$sid"; } > "$session_file"
        chmod 600 "$session_file"
    fi
}

pihole_munin_logout() {
    [ -z "$sid" ] && return 0
    [ "${session_cache}" -eq 1 ] && return 0
    logout_code=$(curl --connect-timeout 5 -k -s -S -o - -w "%{response_code}" -X DELETE "${api_target}${auth_url}" \
        -H "Accept: application/json" \
        -H "sid: ${sid}")
    case "$logout_code" in
        "200"|"204")
            :
        ;;
        *)
            printf "❌ Error: Logout failed, response code was '%s'.\n" "${logout_code}" >&2
            exit 1
        ;;
    esac
}

pihole_munin_api_url() {
    url="${api_target}$1"
    if [ "$auth_required" -eq 1 ] && [ -n "$sid" ]; then
        sep="?"
        case "$url" in
            *"\?"*)
                sep="&"
            ;;
        esac
        url="${url}${sep}sid=${sid}"
    fi
    printf "%s" "$url"
}

pihole_munin_state() {
    state_file="${MUNIN_PLUGSTATE:-/tmp}/$(printf "%s" "$1" | sed -E 's/[^a-zA-Z0-9]/_/g').state"
    if [ -f "${state_file}" ]; then
        state_time=$(head -n 1 "${state_file}")
        if [ $((now - state_time)) -lt "${state_ttl:-120}" ]; then
            cached_response=$(tail -n +2 "${state_file}")
            if printf "%s" "${cached_response}" | jq empty >/dev/null 2>&1; then
                printf "%s\n" "${cached_response}"
                return
            else
                rm -f "${state_file}"
            fi
        fi
    fi
    did_auth=0
    pihole_munin_auth_check
    if [ "$auth_required" -eq 1 ] && [ "$already_authed" -eq 0 ]; then
        pihole_munin_auth
        did_auth=1
    fi
    response=$(curl --connect-timeout 5 -G -k -s "$(pihole_munin_api_url "$1")") || return 1
    if ! printf "%s" "${response}" | jq empty >/dev/null 2>&1; then
        return 1
    fi
    {
        printf "%s\n" \
            "${now}" \
            "${response}"
    } | tee "${state_file}" | tail -n +2
    if [ "$auth_required" -eq 1 ] && [ "$did_auth" -eq 1 ] && [ "${session_cache}" -ne 1 ]; then
        pihole_munin_logout
    fi
}

pihole_munin_config() {
    case $pihole_munin_id in
        "cache")
            cache_crit=""
            cache_warn=""
            printf "%s\n" \
                "graph_title ${graph_title_cache:-Pi-hole cache}" \
                "graph_args --lower-limit 0 --units-exponent 0" \
                "graph_info This graph shows Pi-hole's cache" \
                "graph_vlabel cached records" \
                "graph_category ${graph_category}"
            for key in evicted expired immortal inserted; do
                eval "cache_warn=\${cache_${key}_warn:-}"
                eval "cache_crit=\${cache_${key}_crit:-}"
                pihole_munin_print "${key}" "Pi-hole cache ${key}" "${key}" "${cache_crit}" "${cache_warn}"
            done
        ;;
        "domains")
            printf "%s\n" \
                "graph_title ${graph_title_domains:-Pi-hole domains being blocked}" \
                "graph_args --lower-limit 0 --units-exponent 0" \
                "graph_info This graph shows the number of domains being blocked by Pi-hole" \
                "graph_vlabel domains" \
                "graph_category ${graph_category}"
            pihole_munin_print "domains_being_blocked" "Pi-hole domains being blocked" "domains being blocked" "${domains_being_blocked_crit:-1:5000000}" "${domains_being_blocked_warn:-0:2500000}"
        ;;
        "gravity")
            gravity_crit=""
            gravity_warn=""
            printf "%s\n" \
                "graph_title ${graph_title_gravity:-Pi-hole gravity database}" \
                "graph_args --lower-limit 0 --units-exponent 0" \
                "graph_info This graph shows various Pi-hole gravity database statistics" \
                "graph_vlabel count" \
                "graph_category ${graph_category}"
            for gravity_key in \
                "groups|group count" \
                "lists|adlists" \
                "domains_allowed|allowed domains" \
                "domains_denied|blocked domains" \
                "regex_allowed|allowed regex" \
                "regex_denied|blocked regex"; do
                key=${gravity_key%%|*}
                gravity_label=${gravity_key#*|}
                eval "gravity_crit=\${gravity_${key}_crit:-}"
                eval "gravity_warn=\${gravity_${key}_warn:-}"
                pihole_munin_print "${key}" "Pi-hole gravity ${key}" "${gravity_label}" "${gravity_crit}" "${gravity_warn}"
            done
        ;;
        "percent")
            printf "%s\n" \
                "graph_title ${graph_title_percent:-Pi-hole percent blocked}" \
                "graph_args --upper-limit 100 --lower-limit 0 --rigid --slope-mode --units-exponent 0" \
                "graph_info This graph shows Pi-hole's blocked query percentage" \
                "graph_vlabel percent blocked" \
                "graph_category ${graph_category}"
            pihole_munin_print "percent_blocked" "Pi-hole percent blocked" "percent blocked" "${percent_blocked_crit:-90}" "${percent_blocked_warn:-1:80}"
        ;;
        "privacy")
            printf "%s\n" \
                "graph_title ${graph_title_privacy:-Pi-hole privacy level}" \
                "graph_args --upper-limit 3 --lower-limit 0 --rigid --units-exponent 0" \
                "graph_info This graph shows Pi-hole's privacy level" \
                "graph_vlabel show all / 1 / 2 / anonymous" \
                "graph_category ${graph_category}"
            pihole_munin_print "privacy_level" "Pi-hole privacy level" "privacy level" "${privacy_level_crit:-1:3}" "${privacy_level_warn:-3:3}"
        ;;
        "queries")
            queries_crit=""
            queries_warn=""
            printf "%s\n" \
                "graph_title ${graph_title_queries:-Pi-hole queries}" \
                "graph_args --lower-limit 0 --units-exponent 0" \
                "graph_info This graph shows Pi-hole queries" \
                "graph_vlabel queries" \
                "graph_category ${graph_category}"
            for queries_key in \
                "blocked|queries blocked" \
                "cached|queries cached" \
                "frequency|query frequency (queries per second)" \
                "forwarded|queries forwarded" \
                "total|queries total" \
                "unique_domains|unique domains queried"; do
                key=${queries_key%%|*}
                queries_label=${queries_key#*|}
                eval "queries_crit=\${queries_${key}_crit:-}"
                eval "queries_warn=\${queries_${key}_warn:-}"
                [ "$key" = "unique_domains" ] && queries_crit="${queries_crit:-1:20000}" && queries_warn="${queries_warn:-0:10000}"
                pihole_munin_print "${key}" "Pi-hole ${queries_label}" "${key}" "${queries_crit}" "${queries_warn}"
            done
        ;;
        "status")
            printf "%s\n" \
                "graph_title ${graph_title_status:-Pi-hole status}" \
                "graph_args --upper-limit 1 --lower-limit -1 --rigid --units-exponent 0" \
                "graph_info This graph shows Pi-hole's blocking status" \
                "graph_vlabel unknown / disabled / enabled" \
                "graph_category ${graph_category}"
            pihole_munin_print "status" "Pi-hole blocking status" "blocking status" "${status_crit:-0:1}" "${status_warn:-1:1}"
        ;;
        *)
            case $pihole_munin_id in
                "cache_by_type")
                    cache_by_type_crit=""
                    cache_by_type_warn=""
                    printf "%s\n" \
                        "graph_title ${graph_title_cache_by_type:-Pi-hole cache by type}" \
                        "graph_args --lower-limit 0 --units-exponent 0" \
                        "graph_info This graph shows Pi-hole's cached records by type" \
                        "graph_vlabel cached records" \
                        "graph_category ${graph_category}"
                    cache_by_type_response=$(pihole_munin_state "${info_metrics_url}") || exit 1
                    printf "%s" "${cache_by_type_response}" | jq -r '.metrics.dns.cache.content[] | .name' \
                    | while read -r key; do
                        for type in "valid" "stale"; do
                            case $type in
                                "valid")
                                    munin_key="${key}"
                                    cache_by_type_label="${key}"
                                    warn_var="cache_by_type_${key}_warn"
                                    crit_var="cache_by_type_${key}_crit"
                                    ;;
                                "stale")
                                    munin_key="${key}_STALE"
                                    cache_by_type_label="${key} (stale)"
                                    warn_var="cache_by_type_${key}_STALE_warn"
                                    crit_var="cache_by_type_${key}_STALE_crit"
                                    ;;
                            esac
                            eval cache_by_type_warn="\${$warn_var}"
                            eval cache_by_type_crit="\${$crit_var}"
                            pihole_munin_print "${munin_key}" "Pi-hole cache type ${cache_by_type_label}" "${cache_by_type_label}" "${cache_by_type_crit}" "${cache_by_type_warn}"
                        done
                    done
                ;;
                "clients")
                    printf "%s\n" \
                        "graph_title ${graph_title_clients:-Pi-hole clients}" \
                        "graph_args --lower-limit 0 --units-exponent 0" \
                        "graph_info This graph shows active and total Pi-hole clients" \
                        "graph_vlabel clients" \
                        "graph_category ${graph_category}"
                    clients_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
                    printf "%s" "${clients_response}" | jq -r '.clients | keys[]' \
                    | while read -r key; do
                        case $key in
                            "active")
                                pihole_munin_print "${key}" "Pi-hole clients ${key}" "${key} clients" "${clients_active_crit:-100}" "${clients_active_warn:-1:50}"
                            ;;
                            "total")
                                pihole_munin_print "${key}" "Pi-hole clients ${key}" "${key} clients" "${clients_total_crit:-200}" "${clients_total_warn:-1:100}"
                            ;;
                        esac
                    done
                ;;
                "dnsmasq")
                    dnsmasq_crit=""
                    dnsmasq_warn=""
                    printf "%s\n" \
                        "graph_title ${graph_title_dnsmasq:-Pi-hole dnsmasq}" \
                        "graph_args --lower-limit 0 --units-exponent 0" \
                        "graph_info This graph shows various Pi-hole dnsmasq statistics" \
                        "graph_vlabel count" \
                        "graph_category ${graph_category}"
                    dnsmasq_response=$(pihole_munin_state "${info_ftl_url}") || exit 1
                    printf "%s" "${dnsmasq_response}" | jq -r '.ftl.dnsmasq | to_entries[] | .key' \
                    | while read -r key; do
                        dnsmasq_label=$(printf "%s" "$key" | sed 's/_/ /g')
                        eval "dnsmasq_crit=\${dnsmasq_${key}_crit:-}"
                        eval "dnsmasq_warn=\${dnsmasq_${key}_warn:-}"
                        pihole_munin_print "${key}" "Pi-hole dnsmasq ${dnsmasq_label}" "${dnsmasq_label}" "${dnsmasq_crit}" "${dnsmasq_warn}"
                    done
                ;;
                "queries_by_status")
                    queries_by_status_crit=""
                    queries_by_status_warn=""
                    printf "%s\n" \
                        "graph_title ${graph_title_queries_by_status:-Pi-hole queries by status}" \
                        "graph_args --lower-limit 0 --units-exponent 0" \
                        "graph_info This graph shows Pi-hole queries by status" \
                        "graph_vlabel queries" \
                        "graph_category ${graph_category}"
                    queries_by_status_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
                    printf "%s" "${queries_by_status_response}" | jq -r '.queries.status | keys[]' \
                    | while read -r key; do
                        eval "queries_by_status_crit=\${queries_by_status_${key}_crit:-}"
                        eval "queries_by_status_warn=\${queries_by_status_${key}_warn:-}"
                        pihole_munin_print "${key}" "Pi-hole query status ${key}" "${key}" "${queries_by_status_crit}" "${queries_by_status_warn}"
                    done
                ;;
                "queries_by_type")
                    queries_by_type_crit=""
                    queries_by_type_warn=""
                    printf "%s\n" \
                        "graph_title ${graph_title_queries_by_type:-Pi-hole queries by type}" \
                        "graph_args --lower-limit 0 --units-exponent 0" \
                        "graph_info This graph shows Pi-hole queries by record type" \
                        "graph_vlabel queries" \
                        "graph_category ${graph_category}"
                    queries_by_type_response=$(pihole_munin_state "${stats_query_types_url}" ) || exit 1
                    printf "%s" "${queries_by_type_response}" | jq -r '.types | keys[]' \
                    | while read -r key; do
                        eval "queries_by_type_crit=\${queries_by_type_${key}_crit:-}"
                        eval "queries_by_type_warn=\${queries_by_type_${key}_warn:-}"
                        pihole_munin_print "${key}" "Pi-hole query type ${key}" "${key}" "${queries_by_type_crit}" "${queries_by_type_warn}"
                    done
                ;;
                "replies")
                    replies_crit=""
                    replies_warn=""
                    printf "%s\n" \
                        "graph_title ${graph_title_replies:-Pi-hole replies}" \
                        "graph_args --lower-limit 0 --units-exponent 0" \
                        "graph_info This graph shows Pi-hole replies" \
                        "graph_vlabel replies" \
                        "graph_category ${graph_category}"
                    replies_response=$(pihole_munin_state "${info_metrics_url}" ) || exit 1
                    printf "%s" "${replies_response}" | jq -r '.metrics.dns.replies | keys[]' \
                    | while read -r key; do
                        eval "replies_crit=\${replies_${key}_crit:-}"
                        eval "replies_warn=\${replies_${key}_warn:-}"
                        pihole_munin_print "${key}" "Pi-hole replies ${key}" "${key}" "${replies_crit}" "${replies_warn}"
                    done
                ;;
                "replies_by_type")
                    replies_by_type_crit=""
                    replies_by_type_warn=""
                    printf "%s\n" \
                        "graph_title ${graph_title_replies_by_type:-Pi-hole replies by type}" \
                        "graph_args --lower-limit 0 --units-exponent 0" \
                        "graph_info This graph shows Pi-hole replies by record type" \
                        "graph_vlabel replies" \
                        "graph_category ${graph_category}"
                    replies_by_type_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
                    printf "%s" "${replies_by_type_response}" | jq -r '.queries.replies | keys[]' \
                    | while read -r key; do
                        eval "replies_by_type_crit=\${replies_by_type_${key}_crit:-}"
                        eval "replies_by_type_warn=\${replies_by_type_${key}_warn:-}"
                        pihole_munin_print "${key}" "Pi-hole reply type ${key}" "${key}" "${replies_by_type_crit}" "${replies_by_type_warn}"
                    done
                ;;
            esac
        ;;
    esac
}

pihole_munin_fetch() {
    case $pihole_munin_id in
        "cache")
            cache_response=$(pihole_munin_state "${info_metrics_url}" ) || exit 1
            printf "%s" "${cache_response}" | jq -r '
                .metrics.dns.cache as $cache |
                [
                    {key: "evicted", value: $cache.evicted},
                    {key: "expired", value: $cache.expired},
                    {key: "immortal", value: $cache.immortal},
                    {key: "inserted", value: $cache.inserted}
                ] | .[]
                | "\(.key).value \(.value)"'
        ;;
        "cache_by_type")
            cache_by_type_response=$(pihole_munin_state "${info_metrics_url}" ) || exit 1
            printf "%s" "${cache_by_type_response}" | jq -r '.metrics.dns.cache.content[] | "\(.name).value \(.count.valid)\n\(.name)_STALE.value \(.count.stale)"'
        ;;
        "clients")
            clients_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
            printf "%s" "${clients_response}" | jq -r '.clients | to_entries[] | "\(.key).value \(.value)"'
        ;;
        "dnsmasq")
            dnsmasq_response=$(pihole_munin_state "${info_ftl_url}" ) || exit 1
            printf "%s" "${dnsmasq_response}" | jq -r '.ftl.dnsmasq | to_entries[] | "\(.key).value \(.value)"'
        ;;
        "domains")
            domains_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
            printf "%s" "${domains_response}" | jq -r '.gravity | "\("domains_being_blocked.value") \(.domains_being_blocked)"'
        ;;
        "gravity")
            gravity_response=$(pihole_munin_state "${info_ftl_url}" ) || exit 1
            printf "%s" "${gravity_response}" | jq -r '
                .ftl.database as $gravity |
                [
                    {key: "groups", value: $gravity.groups},
                    {key: "lists", value: $gravity.lists},
                    {key: "domains_allowed", value: $gravity.domains.allowed},
                    {key: "domains_denied", value: $gravity.domains.denied},
                    {key: "regex_allowed", value: $gravity.regex.allowed},
                    {key: "regex_denied", value: $gravity.regex.denied}
                ] | .[]
                | "\(.key).value \(.value)"'
        ;;
        "percent")
            percent_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
            printf "%s" "${percent_response}" | jq -r '.queries | to_entries[] | select(.key == "percent_blocked") | "\(.key).value \(.value | tonumber | . * 100 | round / 100)"'
        ;;
        "privacy")
            ftl_response=$(pihole_munin_state "${info_ftl_url}" ) || exit 1
            printf "%s" "${ftl_response}" | jq -r '"privacy_level.value \(.ftl.privacy_level)"'
        ;;
        "queries")
            queries_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
            printf "%s" "${queries_response}" | jq -r '
                .queries as $queries |
                [
                    {key: "blocked", value: $queries.blocked},
                    {key: "cached", value: $queries.cached},
                    {key: "frequency", value: $queries.frequency},
                    {key: "forwarded", value: $queries.forwarded},
                    {key: "total", value: $queries.total},
                    {key: "unique_domains", value: $queries.unique_domains}
                ] | .[]
                | "\(.key).value \(.value)"'
        ;;
        "queries_by_status")
            queries_by_status_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
            printf "%s" "${queries_by_status_response}" | jq -r '.queries.status | to_entries[] | "\(.key).value \(.value)"'
        ;;
        "queries_by_type")
            queries_by_type_response=$(pihole_munin_state "${stats_query_types_url}" ) || exit 1
            printf "%s" "${queries_by_type_response}" | jq -r '.types | to_entries[] | "\(.key).value \(.value)"'
        ;;
        "replies")
            replies_response=$(pihole_munin_state "${info_metrics_url}" ) || exit 1
            printf "%s" "${replies_response}" | jq -r '.metrics.dns.replies | to_entries[] | "\(.key).value \(.value)"'
        ;;
        "replies_by_type")
            replies_by_type_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
            printf "%s" "${replies_by_type_response}" | jq -r '.queries.replies | to_entries[] | "\(.key).value \(.value)"'
        ;;
        "status")
            status_response=$(pihole_munin_state "${dns_blocking_url}" ) || exit 1
            printf "%s" "${status_response}" | jq -r '.blocking' \
            | while read -r key; do
                case $key in
                    "enabled")
                        printf "%s\n" "${pihole_munin_id}.value 1"
                    ;;
                    "disabled")
                        printf "%s\n" "${pihole_munin_id}.value 0"
                    ;;
                    *)
                        printf "%s\n" "${pihole_munin_id}.value -1"
                    ;;
                esac
            done
        ;;
    esac
}

pihole_munin_autoconf() {
    dencies="curl jq"
    for dep in $dencies; do
        if ! command -v "${dep}" >/dev/null 2>&1; then
            printf "%s\n" "no (missing required command: $dep)"
            return
        fi
    done
    if [ -z "${password_to_use}" ]; then
        printf "%s\n" "no (no password found)"
        return
    fi
    printf "%s\n" "yes"
}

plugins="${PLUGINS:-cache cache_by_type clients dnsmasq domains gravity percent privacy queries queries_by_status queries_by_type replies replies_by_type status}"

pihole_munin_suggest() {
    for plugin in $plugins; do
        printf "%s\n" "${plugin}"
    done
}

pihole_munin_root() {
    [ "$(id -u)" -eq 0 ] && return 0
    exec sudo "$0" "$@" || { printf "❌ Error: Failed to acquire root privileges.\n" >&2; return 1; }
}

plugins_available="${PLUGINS_AVAILABLE:-/usr/share/munin/plugins}"
plugins_enabled="${PLUGINS_ENABLED:-/etc/munin/plugins}"

pihole_munin_enable() {
    pihole_munin_root "$@"
    dry_run=0
    for option in "$@"; do
        case "$option" in
            "-D"|"dry"|"--dry-run")
                dry_run=1
            ;;
        esac
    done
    [ -d "${plugins_available}" ] || { printf "❌ Error: Missing directory: %s\n" "${plugins_available}" >&2; return 1; }
    [ -d "${plugins_enabled}" ] || { printf "❌ Error: Missing directory: %s\n" "${plugins_enabled}" >&2; return 1; }
    if [ "$dry_run" -eq 1 ]; then
        printf "%s Installing pihole_munin_ to:\n  %s/pihole_munin_\n" "🛟 [DRY RUN]" "$plugins_available"
    else
        printf "%s Installing pihole_munin_ to:\n  %s/pihole_munin_\n" "🟢" "$plugins_available"
        cp -f "$0" "${plugins_available}/pihole_munin_" || {
            printf "❌ Error: Failed to copy plugin.\n" >&2
            return 1
        }
        chmod 755 "${plugins_available}/pihole_munin_" || {
            printf "❌ Error: Failed to set permissions.\n" >&2
            return 1
        }
    fi
    printf "\n%s Success.\n" \
            "$( [ "$dry_run" -eq 1 ] && printf "✅ [DRY RUN]" || printf "✅" )"
    printf "\n%s Enabling the following plugins:\n" \
        "$( [ "$dry_run" -eq 1 ] && printf "🛟 [DRY RUN]" || printf "🟢" )"
    for plugin in $plugins; do
        target="${plugins_enabled}/pihole_munin_${plugin}"
        if [ "$dry_run" -eq 1 ]; then
            printf "  %s\n" "$plugin"
        else
            ln -sf "${plugins_available}/pihole_munin_" "$target" || {
                printf "❌ Error: Failed to create symlink: %s\n" "$target" >&2
                return 1
            }
            printf "  %s\n" "$plugin"
        fi
    done
    if [ "$dry_run" -eq 1 ]; then
        printf "\n✅ [DRY RUN] Success.\n"
    else
        printf "%s\n" \
            "" \
            "✅ Success." \
            "" \
            "ℹ️ Please restart the Munin node." \
            "" \
            "Example:" \
            "  sudo systemctl restart munin-node.service"
    fi
}

pihole_munin_disable() {
    pihole_munin_root "$@"
    dry_run=0
    confirm=0
    for option in "$@"; do
        case "$option" in
            "-C"|"confirm"|"--confirm"|"-y"|"yes"|"--yes")
                confirm=1
                ;;
            "-D"|"dry"|"--dry-run")
                dry_run=1
                ;;
        esac
    done
    [ -d "${plugins_enabled}" ] || {
        printf "❌ Error: Missing directory: %s\n" "${plugins_enabled}" >&2
        return 1
    }
    printf "%s Disabling the following plugins:\n" \
        "$( [ "$dry_run" -eq 1 ] && printf "🛟 [DRY RUN]" || printf "🔴" )"
    for plugin in $plugins; do
        path="${plugins_enabled}/pihole_munin_${plugin}"
        if [ -L "$path" ]; then
            if [ "$dry_run" -eq 1 ]; then
                printf "  %s\n" "$plugin"
            else
                rm -f "$path" || {
                    printf "❌ Error: Failed to remove symlink: %s\n" "$path" >&2
                    return 1
                }
                printf "  %s\n" "$plugin"
            fi
        fi
    done
    printf "\n%s Success.\n" \
            "$( [ "$dry_run" -eq 1 ] && printf "✅ [DRY RUN]" || printf "✅" )"
    [ -d "${plugins_available}" ] || {
        printf "❌ Error: Missing directory: %s\n" "${plugins_available}" >&2
        return 1
    }
    path="${plugins_available}/pihole_munin_"
    if [ -e "$path" ]; then
        if [ "$confirm" -eq 1 ]; then
            if [ "$dry_run" -eq 1 ]; then
                printf "\n%s Uninstalling pihole_munin_ from:\n  %s\n" "🛟 [DRY RUN]" "$path"
            else
                printf "\n%s Uninstalling pihole_munin_ from:\n  %s\n" "🔴" "$path"
                rm -f "$path" || {
                    printf "❌ Error: Failed to remove: %s\n" "$path" >&2
                    return 1
                }
            fi
        else
            printf "⚠️ Skipping uninstall (add --confirm to allow):\n  %s\n" "$path"
        fi
    fi
    printf "\n%s Success.\n" \
            "$( [ "$dry_run" -eq 1 ] && printf "✅ [DRY RUN]" || printf "✅" )"
}

pihole_munin_configure() {
    pihole_munin_root "$@"
    safe_write() {
        "$@" || { printf "❌ Error: Failed to write to temporary file.\n" >&2; return 1; }
    }
    safe_move() {
        "$@" || { printf "❌ Error: Failed to move temporary file.\n" >&2; return 1; }
    }
    config_file="/etc/munin/plugin-conf.d/pihole_munin_"
    [ -n "$PIHOLE_MUNIN_CONF" ] && config_file="$PIHOLE_MUNIN_CONF"
    if [ ! -f "$config_file" ]; then
        safe_write printf "[pihole_munin_*]\n" > "$config_file"
    fi
    cmd="$1"
    shift
    case "$cmd" in
        "list")
            [ -f "$config_file" ] || { printf "❌ Error: Configuration file not found.\n" >&2; return 1; }
            matches=$(grep -E '^( *env\.| *user\s)' "$config_file")
            [ -z "$matches" ] && { printf "ℹ️ No configuration variables found in %s.\n" "$config_file"; return 0; }
            printf "🔍 Listing variables in %s...\n" "$config_file"
            printf "%s\n" "$matches" | while IFS= read -r line; do
                case "$line" in
                    *"env."*"_password "*|*"env.password "*)
                        var=$(printf '%s' "$line" | awk '{print $1}')
                        val=$(printf '%s' "$line" | cut -d' ' -f2-)
                        len=$(printf '%s' "$val" | wc -c)
                        [ "$len" -gt 0 ] && len=$((len - 1))
                        masked=$(printf '%*s' "$len" '' | tr ' ' '*')
                        printf '  🔑 %s %s\n' "$var" "$masked"
                    ;;
                    *"env.proto "*)
                        printf '  🔗 %s\n' "$line"
                    ;;
                    *"env.host "*)
                        printf '  🖥️ %s\n' "$line"
                    ;;
                    *"env.port "*)
                        printf '  🔌 %s\n' "$line"
                    ;;
                    *"env.graph_category "*)
                        printf '  📈 %s\n' "$line"
                    ;;
                    *"env.graph_title "*)
                        printf '  🏷️ %s\n' "$line"
                    ;;
                    *"env."*"_crit "*)
                        printf '  🚨 %s\n' "$line"
                    ;;
                    *"env."*"_warn "*)
                        printf '  ⚠️ %s\n' "$line"
                    ;;
                    "user "*)
                        printf '  👤 %s\n' "$line"
                    ;;
                    "group "*)
                        printf '  👥 %s\n' "$line"
                    ;;
                    *)
                        printf '  🔧 %s\n' "$line"
                    ;;
                esac
            done
        ;;
        "add")
            [ -z "$1" ] && {
                printf "❌ Error: No variable specified for addition.\n" >&2
                return 1
            }
            var="$1"
            shift
            value="$*"
            trimmed_value=$(printf '%s' "$value" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            prompt_secure_value() {
                printf "\nEnter value: "
                stty -echo
                IFS= read -r first_entry
                stty echo
                printf "\nConfirm value: "
                stty -echo
                IFS= read -r second_entry
                stty echo
                printf "\n"
                if [ "$first_entry" != "$second_entry" ]; then
                    printf "❌ Error: Entered values do not match.\n" >&2
                    return 1
                fi
                value=$first_entry
                return 0
            }
            printf "➕ Adding variable to %s...\n" "$config_file"
            case "$var" in
                "pihole_password"|"app_password")
                    if [ -n "$trimmed_value" ]; then
                        printf "\n⚠️ Warning: Sensitive variable '%s' passed on the command line.\n" "$var" >&2
                        printf "  This may be visible in shell history or process lists.\n" >&2
                    else
                        printf "%s\n\n" \
                            "⚠️ Warning: Sensitive variable '$var' detected." \
                            "ℹ️ You will be prompted to enter the value securely.\n" >&2
                        if ! prompt_secure_value; then
                            return 1
                        fi
                        trimmed_value="$value"
                    fi
                ;;
            esac
            [ -z "$trimmed_value" ] && {
                printf "❌ Error: Value for '%s' is empty or whitespace only.\n" "$var" >&2
                return 1
            }
            case "$var" in
                "user"|"group")
                    entry="    $var $value"
                    safe_write sed "/^ *$var\s/d" "$config_file" > "$config_file.tmp"
                ;;
                *)
                    entry="    env.$var $value"
                    safe_write sed "/^ *env\.$var\s/d" "$config_file" > "$config_file.tmp"
                ;;
            esac
            safe_write printf "%s\n" "$entry" >> "$config_file.tmp"
            safe_move "$config_file.tmp" "$config_file"
            printf "\n✅ Success.\n"
        ;;
        "remove")
            [ -z "$1" ] && { printf "❌ Error: No variable specified for removal.\n" >&2; return 1; }
            printf "➖ Removing variable from %s...\n" "$config_file"
            var="$1"
            case "$var" in
                "user")
                    pattern='^ *user[[:space:]]'
                ;;
                "group")
                    pattern='^ *group[[:space:]]'
                ;;
                *)
                    escaped_var=$(printf '%s' "$var" | sed 's/[][\\.^$*]/\\&/g')
                    pattern="^ *env\.${escaped_var}[[:space:]]"
                ;;
            esac
            if grep -Eq "$pattern" "$config_file"; then
                safe_write sed "/$pattern/d" "$config_file" > "${config_file}.tmp"
                safe_move "${config_file}.tmp" "$config_file"
                printf "\n✅ Success.\n"
            else
                printf "⚠️ Variable '%s' not found in %s\n" "$var" "$config_file"
            fi
        ;;
        *)
            printf "⚠️ Unknown command: %s\n" "$cmd" >&2
        ;;
    esac
}

pihole_munin_check() {
    IFS=. read -r a b c <<EOF
${1:-0.0.0}
EOF
    IFS=. read -r x y z <<EOF
${2:-0.0.0}
EOF
    [ "${a:-0}" -gt "${x:-0}" ] && return 0
    [ "${a:-0}" -lt "${x:-0}" ] && return 1
    [ "${b:-0}" -gt "${y:-0}" ] && return 0
    [ "${b:-0}" -lt "${y:-0}" ] && return 1
    [ "${c:-0}" -gt "${z:-0}" ]
}

pihole_munin_version() {
    skip_check=0
    for option in "$@"; do
        case "$option" in
            "-S"|"skip"|"--skip-version-check")
                skip_check=1
            ;;
            *)
                printf "⚠️ Unknown option: %s\n\n" "$option"
                pihole_munin_help version
                return 1
            ;;
        esac
    done
    printf "Version: %s\n" "$version"
    if [ "$skip_check" -eq 0 ] && command -v dig >/dev/null 2>&1; then
        remote_version=$(dig +short TXT pihole-munin.sainternet.xyz | sed -e 's/[^.0-9]//g')
        if [ -n "$remote_version" ]; then
            if pihole_munin_check "$remote_version" "$version"; then
                printf "%s\n" \
                "" \
                "A newer version is available: $remote_version" \
                "" \
                "ℹ️ Run '$0 admin update' to update the plugin," \
                "  or run '$0 help admin update' for more information."
            else
                printf "\n%s\n" "✅ You are using the latest version."
            fi
        else
            printf "%s\n" "❌ Error: Unable to check for updates." >&2
            return 1
        fi
    fi
}

pihole_munin_update() {
    pihole_munin_root "$@"
    repo_url="https://github.com/saint-lascivious/pihole_munin_"
    raw_url="${repo_url}/raw/master/pihole_munin_"
    target="${plugins_available}/pihole_munin_"
    confirm=0
    for option in "$@"; do
        case "$option" in
            "-C"|"confirm"|"--confirm"|"-y"|"yes"|"--yes")
                confirm=1
            ;;
            "-D"|"dry"|"--dry-run")
                dry_run=1
            ;;
        esac
    done
    [ -f "$target" ] || {
        printf "❌ Error: Update target '%s' not found.\n" "$target" >&2
        return 1
    }
    tmp_file="$(mktemp /tmp/pihole_munin_update.XXXXXX)" || {
        printf "❌ Error: Failed to create temporary file.\n" >&2
        return 1
    }
    printf "%s Updating pihole_munin_ plugin...\n" \
        "$( [ "$dry_run" -eq 1 ] && printf "🛟 [DRY RUN]" || printf "🔃" )"
    if curl -fsSL "$raw_url" -o "$tmp_file"; then
        [ -s "$tmp_file" ] || {
            printf "❌ Error: Downloaded update is empty.\n" >&2
            rm -f "$tmp_file"
            return 1
        }
        remote_version=$(grep -E '^version=' "$tmp_file" | cut -d= -f2)
        local_version=$(grep -E '^version=' "$target" | cut -d= -f2)
        if [ -n "$remote_version" ] && [ -n "$local_version" ]; then
            printf "🔄 Checking for updates...\n"
            printf "📦 Local version:  %s\n" "$local_version"
            printf "🌐 Remote version: %s\n" "$remote_version"
            if ! pihole_munin_check "$remote_version" "$local_version"; then
                printf "\n✅ You are using the latest version.\n"
                rm -f "$tmp_file"
                return 0
            fi
        else
            printf "⚠️ Could not determine version(s), proceeding with update.\n"
        fi
        if [ "$dry_run" -eq 0 ]; then
            printf "\n🔄 Backing up existing script...\n"
            cp -f "$target" "${target}.bak" || {
                printf "❌ Error: Failed to back up existing script.\n" >&2
                rm -f "$tmp_file"
                return 1
            }
            printf "🗄️ Backup created: %s\n" "${target}.bak"
            printf "%s\n" \
                "" \
                "ℹ️ You can restore this backup at any time." \
                "" \
                "Example:" \
                "  sudo cp -f ${target}.bak $target"
        fi
        printf "\n%s Installing update...\n" \
            "$( [ "$dry_run" -eq 1 ] && printf "🛟 [DRY RUN]" || printf "🔄")"
        if [ "$target" = "$0" ] && [ "$confirm" = "0" ]; then
            printf "%s\n" \
                "⚠️ You are updating the currently running script," \
                "  add --confirm to bypass this prompt." \
                "" \
                "Example:" \
                "  $0 admin update --confirm"
            printf "\nContinue? Type 'yes' to proceed: "
            read -r answer
            [ "$(printf %s "$answer" | tr '[:upper:]' '[:lower:]')" = "yes" ] || {
                printf "❌ Aborted.\n"
                rm -f "$tmp_file"
                return 1
            }
        fi
        chmod 755 "$tmp_file" || {
            printf "❌ Error: Failed to set permissions on update.\n" >&2
            rm -f "$tmp_file"
            return 1
        }
        if [ "$dry_run" -eq 0 ]; then
            mv "$tmp_file" "$target" || {
                printf "❌ Error: Failed to install updated plugin.\n" >&2
                rm -f "$tmp_file"
                return 1
            }
            printf "%s\n" \
                "" \
                "✅ Success." \
                "" \
                "ℹ️ Please restart the Munin node." \
                "" \
                "Example:" \
                "  sudo systemctl restart munin-node.service"
        else
            printf "\n✅ [DRY RUN] Success.\n"
        fi
    else
        printf "❌ Error: Unable to fetch update.\n" >&2
        rm -f "$tmp_file"
        return 1
    fi
}

pihole_munin_help() {
    case "$1" in
        "-a"|"admin"|"--admin")
            case "$2" in
                "-A"|"add"|"--add")
                    printf "%s\n" \
                        "❓ Usage: $1 $2 <var> <value>" \
                        "" \
                        "Add or update a plugin configuration variable." \
                        "" \
                        "ℹ️ You will be prompted to enter the value securely if it" \
                        "is sensitive (e.g., app_password or pihole_password)." \
                        "" \
                        "Examples:" \
                        "  $1 $2 host 192.168.1.10" \
                        "  $1 $2 user pihole"
                ;;
                "-r"|"remove"|"--remove")
                    printf "%s\n" \
                        "❓ Usage: $1 $2 <var>" \
                        "" \
                        "Remove a variable from the plugin configuration file." \
                        "" \
                        "Examples:" \
                        "  $1 $2 host" \
                        "  $1 $2 user"
                ;;
                "-l"|"list"|"--list")
                    printf "%s\n" \
                        "❓ Usage: $1 $2" \
                        "" \
                        "List all configured plugin variables." \
                        "" \
                        "ℹ️ Sensitive variables (e.g., passwords)" \
                        "will be masked."
                ;;
                "-e"|"-i"|"enable"|"install"|"--enable"|"--install")
                    printf "%s\n" \
                        "❓ Usage: $1 $2 [<option>]" \
                        "" \
                        "Install pihole_munin_ and enable all plugins." \
                        "" \
                        "ℹ️ This command will install the plugin itself and enable" \
                        "all pihole_munin_ plugins." \
                        "" \
                        "Options:" \
                        "  -D, --dry-run    Show what would be done, but without making any changes."
                ;;
                "-d"|"-u"|"disable"|"uninstall"|"--disable"|"--uninstall")
                    printf "%s\n" \
                        "❓ Usage: $1 $2 [<option>]" \
                        "" \
                        "Disable all plugins and uninstall pihole_munin_." \
                        "" \
                        "ℹ️ This command will remove all pihole_munin_ plugins" \
                        "from the Munin node and uninstall the plugin itself." \
                        "" \
                        "Options:" \
                        "  -C, --confirm    Confirm the uninstallation of pihole_munin_." \
                        "  -D, --dry-run    Show what would be done, but without making any changes."
                ;;
                "-U"|"update"|"--update")
                    printf "%s\n" \
                        "❓ Usage: $1 $2 [<option>]" \
                        "" \
                        "Update pihole_munin_ to the latest version." \
                        "" \
                        "ℹ️ This command will download the latest version from" \
                        "the GitHub repository and replace the current script." \
                        "" \
                        "Options:" \
                        "  -C, --confirm    Bypass confirmation when self-updating." \
                        "  -D, --dry-run    Show what would be done, but without making any changes."
                ;;
                "" )
                    printf "%s\n" \
                        "❓ Usage: $1 <subcommand>" \
                        "" \
                        "Manage plugin configuration and installation." \
                        "" \
                        "Subcommands:" \
                        "  -A, add                      Add or update a plugin configuration variable." \
                        "  -r, remove                   Remove a variable from the plugin configuration." \
                        "  -l, list                     List all configured plugin variables." \
                        "  -e, -i, enable, install      Install pihole_munin_ and enable all plugins." \
                        "  -d, -u, disable, uninstall   Disable all plugins and uninstall pihole_munin_." \
                        "  -U, update                   Update pihole_munin_ to the latest version." \
                        "" \
                        "ℹ️ Run '$0 help admin <subcommand>' for more information on a subcommand."
                ;;
                * )
                    printf "%s\n" \
                        "⚠️ Unknown $1 subcommand: $2" \
                        "" \
                        "ℹ️ Run '$0 help admin' for a list of available subcommands." \
                ;;
            esac
        ;;
        "-v"|"version"|"--version")
            printf "%s\n" \
                "❓ Usage: $1 [<option>]" \
                "" \
                "Display the plugin version string." \
                "" \
                "ℹ️ If not skipped, a check for a newer version will be" \
                "performed using a remote DNS TXT record located at" \
                "pihole-munin.sainternet.xyz." \
                "" \
                "Options:" \
                "  -S, --skip-version-check     Skip remote version check."
        ;;
        "-h"|"help"|"--help")
            printf "%s\n" \
                "❓ Usage: $1 <command> [<subcommand>]" \
                "" \
                "Displays general or detailed help for commands and subcommands." \
                "" \
                "Example: $1 admin add"
        ;;
        "")
            printf "%s\n" \
                "❓ Usage: $0 <command>" \
                "" \
                "Commands:" \
                "  -a, admin    Manage plugin configuration and installation." \
                "  -v, version  Display the plugin version string." \
                "  -h, help     Show detailed help information." \
                "" \
                "ℹ️ Run '$0 help <command>' for more information on a command."
        ;;
        * )
            printf "⚠️ Unknown help topic: %s\n\n" "$*"
            pihole_munin_help
            return 1
        ;;
    esac
}

for arg in "$@"; do
    case $arg in
        "-h"|"help"|"--help")
            help_flag="$arg"
            break
        ;;
    esac
done

if [ -n "$help_flag" ] && [ "$1" != "$help_flag" ]; then
    new_args="$help_flag"
    first=1
    for arg in "$@"; do
        if [ "$first" -eq 1 ] && [ "$arg" = "$help_flag" ]; then
            first=0
            continue
        fi
        new_args="$new_args '$arg'"
    done
    eval "set -- $new_args"
fi

case $1 in
    ""|"fetch")
        pihole_munin_fetch
    ;;
    "config")
        pihole_munin_config
        if [ "${MUNIN_CAP_DIRTYCONFIG}" = "1" ]; then
            pihole_munin_fetch
        fi
    ;;
    "-a"|"admin"|"--admin")
        case $2 in
            "-e"|"-i"|"enable"|"install"|"--enable"|"--install")
                pihole_munin_enable "$@"
            ;;
            "-d"|"-u"|"disable"|"uninstall"|"--disable"|"--uninstall")
                pihole_munin_disable "$@"
            ;;
            "-A"|"-r"|"add"|"remove"|"--add"|"--remove")
                pihole_munin_configure "$2" "$@"
            ;;
            "-l"|"list"|"--list")
                pihole_munin_configure "list"
            ;;
            "-U"|"update"|"--update")
                pihole_munin_update "$@"
            ;;
            "-p"|"password"|"--password")
                pihole_munin_configure "add" "pihole_password" "${3:-}"
            ;;
            "")
                pihole_munin_help "$1"
            ;;
            *)
                pihole_munin_help "$1" "$2"
            ;;
        esac
    ;;
    "-h"|"help"|"--help")
        case $2 in
            "")
                pihole_munin_help
            ;;
            "-a"|"admin"|"--admin")
                pihole_munin_help "$2" "${3:-}"
            ;;
            "-v"|"version"|"--version")
                pihole_munin_help "$2"
            ;;
            *)
                printf "⚠️ Unknown help topic: %s\n\n" "$2"
                pihole_munin_help
            ;;
        esac
    ;;
    "-v"|"version"|"--version")
        shift
        pihole_munin_version "$@"
    ;;
    "autoconf")
        pihole_munin_autoconf
    ;;
    "suggest")
        pihole_munin_suggest
    ;;
    "setpassword")
        pihole_munin_configure "add" "pihole_password" "${2:-}"
    ;;
    *)
        pihole_munin_help
    ;;
esac

exit 0
