#!/usr/bin/env sh

# pihole_munin_

# saint-lascivious (Hayden Pearce), 2025

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version="5.5.2"

: <<=cut
=head1 NAME

pihole_munin_

=head2 VERSION

${version}

=head1 APPLICABLE SYSTEMS

Pi-hole >= 6.0

=head1 DESCRIPTION

Munin plugins for monitoring various Pi-hole statistics.

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf suggest

=head1 WILDCARD PLUGIN

This is a wildcard plugin.

=head2 PLUGINS

  cache                Shows Pi-hole's cache
  cache_by_type        Shows Pi-hole's cached records by type
  clients              Shows active and total Pi-hole clients
  dnsmasq              Shows various Pi-hole FTLDNS dnsmasq statistics
  domains              Shows the number of domains being blocked by Pi-hole
  gravity              Shows various Pi-hole gravity database statistics
  overview             Shows an overview of Pi-hole's DNS traffic
  percent              Shows Pi-hole's blocked query percentage
  privacy              Shows Pi-hole's privacy level
  queries              Shows Pi-hole's queries
  queries_by_status    Shows Pi-hole's queries by status
  queries_by_type      Shows Pi-hole's queries by record type
  replies              Shows Pi-hole's replies
  replies_by_type      Shows Pi-hole's replies by record type
  status               Shows Pi-hole's blocking status

=head1 USAGE

Use the 'admin' command to automatically install pihole_munin_ and enable all plugins at once.

E.g.

  ./pihole_munin_ admin enable

Alternatively, you can install manually and link this plugin to /etc/munin/plugins/ as the desired plugin(s) and restart munin-node.

E.g.

  sudo mv pihole_munin_ /usr/share/munin/plugins/pihole_munin_
  sudo chmod +x /usr/share/munin/plugins/pihole_munin_

then,

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_cache
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_cache_by_type
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_clients
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_dnsmasq
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_domains
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_gravity
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_overview
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_percent
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_privacy
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_queries
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_queries_by_status
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_queries_by_type
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_replies
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_replies_by_type
  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_status

and then,

  sudo systemctl restart munin-node.service

=head1 CONFIGURATION

Example configuration for /etc/munin/plugin-conf.d/pihole_munin_

  [pihole_munin_*]
      ### AUTHENTICATION ###

      #### APPLICATION PASSWORD ####

      # A Pi-hole application password may be used to authenticate with the
      # Pi-hole API, this password differs from the web interface password.
      # Example:
      #   env.app_password APP_PASSWORD_HERE

      #### PI-HOLE PASSWORD ####

      # The Pi-hole password may also, but probably shouldn't, be used.
      # Example:
      #   env.pihole_password PIHOLE_PASSWORD_HERE

      #### CLI PASSWORD ####

      # The path at which Pi-hole's CLI password may be found.
      # If found and readable, this password will be used to authenticate with
      # the Pi-hole API if no other password is provided.
      env.cli_password /etc/pihole/cli_pw

      ### API ###

      # These variables are used to construct the base of the API URL.
      env.proto http
      env.host 127.0.0.1
      env.port 80
      env.api /api

      ### ALERTS ###

      # The following variables are used to set the alert thresholds for
      # various plugins.

      # The format for the variables is:
      #   env.<plugin>_<key>_<alert_type>

      # The plugin is the name of the plugin, e.g. cache, clients, etc.

      # The key is the name of the metric, e.g. evicted, active, etc.

      # The alert_type is either crit or warn, for critical and warning alerts
      # respectively.
    
      # The format for values is either a single value which represents the
      # maximum value before an alert is triggered, or a range of values 
      # separated by a colon, where an alert will be triggered if the value
      # is outside of the specified range.

      # Only individual default values are provided here, the rest are left
      # to the user to configure if desired.

      # clients
      env.clients_active_crit 100
      env.clients_active_warn 1:50
      env.clients_total_crit 0:200
      env.clients_total_warn 100

      # domains
      env.domains_domains_being_blocked_crit 1:10000000
      env.domains_domains_being_blocked_warn 0:5000000

      # percent
      env.percent_percent_blocked_crit 90
      env.percent_percent_blocked_warn 1:75

      # privacy
      env.privacy_privacy_level_crit 1:3
      env.privacy_privacy_level_warn 3:3

      # queries
      env.queries_unique_domains_crit 1:20000
      env.queries_unique_domains_warn 0:10000

      # status
      env.status_blocking_status_crit 0:1
      env.status_blocking_status_warn 1:1

      ### GRAPHS ###

      # The following variables are used to set the graphing options.

      #### GRAPH ####

      # The graph value determines wheter graphs are drawn or not.
      env.graph yes

      # The graph value may be overridden on a per-plugin basis by setting the
      # graph_<plugin> variable to the desired value (yes/no).

      #### GRAPH_ARGS ####

      # The graph_args value determines the arguments passed to Munin's
      # graphing engine.
      env.graph_args --lower-limit 0 --units-exponent 0

      # The default graph arguments are:
      #   cache: --lower-limit 0 --units-exponent 0
      #   cache_by_type: --lower-limit 0 --units-exponent 0
      #   clients: --lower-limit 0 --units-exponent 0
      #   dnsmasq: --lower-limit 0 --units-exponent 0
      #   domains: --lower-limit 0 --units-exponent 0
      #   gravity: --lower-limit 0 --units-exponent 0
      #   percent: --upper-limit 100 --lower-limit 0 --rigid \
      #   --slope-mode --units-exponent 0
      #   privacy: --upper-limit 3 --lower-limit 0 --rigid \
      #   --units-exponent 0
      #   queries: --lower-limit 0 --units-exponent 0
      #   queries_by_status: --lower-limit 0 --units-exponent 0
      #   queries_by_type: --lower-limit 0 --units-exponent 0
      #   replies: --lower-limit 0 --units-exponent 0
      #   replies_by_type: --lower-limit 0 --units-exponent 0
      #   status: --lower-limit 0 --upper-limit 1 --rigid \
      #   --units-exponent 0

      # The default graph arguments may be overridden by setting the
      # graph_args_<plugin> variable to the desired arguments.

      #### GRAPH_CATEGORY ####

      # The graph_category value determines the category in which the
      # pihole_munin_* graphs appear in Munin's interface when drawn.
      env.graph_category dns

      # The default graph category may be overridden on a per-plugin basis
      # by setting the graph_category_<plugin> variable to the desired
      # category.

      #### GRAPH_HEIGHT ####

      # The graph_height value determines the height of the graph in Munin's
      # interface.
      env.graph_height 200

      # The graph height may be overridden on a per-plugin basis by setting the
      # graph_height_<plugin> variable to the desired height.

      #### GRAPH_INFO ####

      # The graph_info_* values determine the information displayed in the
      # graph's tooltip in Munin's interface.

      # The default graph information is:
      #   cache: This graph shows Pi-hole's cache
      #   cache_by_type: This graph shows Pi-hole's cached records by type
      #   clients: This graph shows Pi-hole's active and total clients
      #   dnsmasq: This graph shows various Pi-hole dnsmasq statistics
      #   domains: This graph shows Pi-hole's domains being blocked
      #   gravity: This graph shows Pi-hole's gravity database statistics
      #   overview: This graph shows an overview of Pi-hole's DNS traffic
      #   percent: This graph shows Pi-hole's percent blocked query percentage
      #   privacy: This graph shows Pi-hole's privacy level
      #   queries: This graph shows Pi-hole's queries
      #   queries_by_status: This graph shows Pi-hole's queries by status
      #   queries_by_type: This graph shows Pi-hole's queries by record type
      #   replies: This graph shows Pi-hole's replies
      #   replies_by_type: This graph shows Pi-hole's replies by record type
      #   status: This graph shows Pi-hole's blocking status

      # The default graph information may be overidden by setting the
      # graph_info_<plugin> variable to the desired information.

      #### GRAPH_SCALE ####

      # The graph_scale value determines whether the graph is scaled to fit the
      # data in Munin's interface.
      env.graph_scale no

      # The graph scaling may be overridden on a per-plugin basis by setting
      # the graph_scale_<plugin> variable to the desired value (yes/no).

      #### GRAPH_TITLE ####

      # The graph_title_* values determine the title of the graph in Munin's
      # interface.

      # The default graph titles are:
      #   cache: Pi-hole cache
      #   cache_by_type: Pi-hole cache by type
      #   clients: Pi-hole clients
      #   dnsmasq: Pi-hole dnsmasq
      #   domains: Pi-hole domains being blocked
      #   gravity: Pi-hole gravity database
      #   overview: Pi-hole overview
      #   percent: Pi-hole percent blocked
      #   privacy: Pi-hole privacy level
      #   queries: Pi-hole queries
      #   queries_by_status: Pi-hole queries by status
      #   queries_by_type: Pi-hole queries by type
      #   replies: Pi-hole replies
      #   replies_by_type: Pi-hole replies by type
      #   status: Pi-hole status

      # The default graph titles may be overridden by setting the
      # graph_title_<plugin> variable to the desired title.

      #### GRAPH_TOTAL ####

      # The graph_total_* variables determines whether a total line is drawn in
      # the graph's legend in Munin's interface.

      # Attribute: graph_total
      # Value: string
      # Type: optional
      # Description: If set, summarizes all the data sources’ values and
      #   reports the results in an extra row in the legend beneath the graph.
      #   The value you set here is used as label for that line.
      #   Note that, since Munin version 2.1, using the special undef keyword
      #   disables it (to override in munin.conf).

      # The format for the variables is:
      #   env.graph_total_<plugin>

      # Plugins: cache_by_type, queries_by_status, queries_by_type and
      # replies_by_type

      # The format for the values is a string containing the label to be
      # displayed in the graph's legend in Munin's interface.
      # E.g. "total", "sum", "all", etc.

      #### GRAPH_VLABEL ####

      # The graph_vlabel_* values determine the vertical label of the graph
      # in Munin's interface.

      # The default graph vertical labels are:
      #   cache: cached records
      #   cache_by_type: cached records
      #   clients: clients
      #   dnsmasq: count
      #   domains: domains being blocked
      #   gravity: count
      #   overview: queries in (-) / replies out (+)
      #   percent: percent blocked
      #   privacy: show all / 1 / 2 / anonymous
      #   queries: queries
      #   queries_by_status: queries
      #   queries_by_type: queries
      #   replies: replies
      #   replies_by_type: replies
      #   status: unknown / disabled / enabled

      # The default graph vertical labels may be overridden by setting the
      # graph_vlabel_<plugin> variable to the desired label.

      #### GRAPH_WIDTH ####

      # The graph_width value determines the width of the graph in Munin's
      # interface.
      env.graph_width 400

      # The graph width may be overridden on a per-plugin basis by setting the
      # graph_width_<plugin> variable to the desired width.

      ### FIELDS ###

      # The following variables determine how graphed fields are displayed in
      # Munin's interface.

      #### FIELDNAME.COLOUR ####

      # Attribute: {fieldname}.colour
      # Value: Hexadecimal colour code
      # Type: optional
      # Description: Custom specification of colour for drawing curve.
      #   Available since 1.2.5 and 1.3.3.
      # Default: Selected by order sequence from Munin standard colour set

      # The format for the variables is:
      #   env.<plugin>_<key>_colour

      # The plugin is the name of the plugin, e.g. cache, clients, etc.

      # The key is the name of the metric, e.g. evicted, active, etc.

      # The format for the values is three or six hexadecimal digits
      # with or without a leading hash (#) character.
      # E.g. #FF0000, 00FF00, 0000FF, #F00, F0F, 0F0, 0F00FF, etc.

      #### FIELDNAME.DRAW ####

      # Attribute: {fieldname}.draw
      # Value: AREA, LINE, LINE[n], STACK, AREASTACK, LINESTACK, LINESTACK[n]
      # Type: optional
      # Description: Determines how the data points are displayed in the graph.
      #   The LINE takes an optional width suffix, commonly LINE1, LINE2, etc…

      # The *STACK values are specific to munin and makes the first a LINE,
      # LINE[n] or AREA datasource, and the rest as STACK.
      # Default: LINE1 since Munin version 2.0.

      # The format for the variables is:
      #   env.<plugin>_<key>_draw

      # The format for the values is the draw style to be used.
      # E.g. LINE1, LINE2, AREA, STACK, etc.

      #### FIELDNAME.GRAPH ####

      # Attribute: {fieldname}.graph
      # Value: yes|no
      # Type: optional
      # Description: Determines if the data source should be visible in
      #   the generated graph.
      # Default: yes

      # The format for the variables is:
      #   env.<plugin>_<key>_graph

      # The format for the values is either yes or no.

      #### FIELDNAME.INFO ####

      # Attribute: {fieldname}.info
      # Value: html text
      # Type: optional
      # Description: Explanation on the data source in this field. The Info is
      #   displayed in the field description table on the detail web page of
      #   the graph.

      # The format for the variables is:
      #   env.<plugin>_<key>_info

      # The format for the values is a string containing the information to be
      # displayed in the graph's tooltip in Munin's interface.

      #### FIELDNAME.LABEL ####

      # Attribute: {fieldname}.label
      # Value: anything except # and \
      # Type: required
      # Description: The label used in the legend for the graph on the HTML
      #   page.

      # The format for the variables is:
      #   env.<plugin>_<key>_label

      # The format for the values is a string containing the label to be
      # displayed in the graph's legend in Munin's interface.
      # The label can contain any special characters except hash (#) or
      # or forward slash (\).

      #### FIELDNAME.TYPE ####

      # Attribute: {fieldname}.type
      # Value: GAUGE|COUNTER|DERIVE|ABSOLUTE
      # Type: optional
      # Description: Sets the RRD Data Source Type for this field.
      #   The values must be written in capitals. The type used may
      #   introduce restrictions for {fieldname.value}.
      # Default: GAUGE

      # The type of the field determines how the data is interpreted
      # by Munin's graphing engine. The type may be one of the following:
      #   GAUGE: A value that can go up and down, e.g. temperature, disk
      #   usage, etc.
      #   COUNTER: A value that only goes up, e.g. number of requests, bytes
      #   sent, etc.
      #   DERIVE: A value that can go up and down, but is derived from a
      #   counter, e.g. network traffic, etc.
      #   ABSOLUTE: A value that is an absolute number, e.g. number of users.
        
      # The format for the variables is:
      #   env.<plugin>_<key>_type

      # The format for the values is the type of graph to be used.
      # E.g. GAUGE, DERIVE, COUNTER, ABSOLUTE, etc.

      ### MISCELLANEOUS ###

      #### USER AND GROUP ####

      # The user these plugins should run as.
      # The pihole user has access to the CLI password by default.
      user pihole

      # The group these plugins should run as.
      # The pihole group has access to the CLI password by default.
      group pihole

      #### STATEFULNESS ####

      # API responses are cached to reduce the number of requests made to the
      # Pi-hole API. This variable determines the time (in seconds) before
      # cached responses are considered stale.
      env.state_ttl 120

      # The *_state_ttl variables can be used to override the default state_ttl
      # value on a per-plugin basis.

      # The default state ttl may be overridden by setting the
      # <plugin>_state_ttl variable to the desired value.

      # The session_ttl variable determines the time (in seconds) before cached
      # session IDs are considered stale.

      # This variable is only used if SESSION_CACHE is set to 1.
      env.session_ttl 300

The plugin can be configured manually, or via the command line using the admin command.

E.g.

  ./pihole_munin_ admin add <var> [<val>]
  ./pihole_munin_ admin remove <var>
  ./pihole_munin_ admin list

Variables SHOULD be entered without the env. prefix, and values SHOULD be without encapsulating quotation.

E.g.

  ./pihole_munin_ admin add graph_category dns
  ./pihole_munin_ admin add clients_active_warn 1:50
  ./pihole_munin_ admin add clients_total_warn 100

Sensitive variables such as the Application or Pi-hole Passwords get a special carve outs in the admin command.

Firstly, if entered without a value, both the 'app_password' and 'pihole_password' variables trigger a prompt to enter (and confirm) the password interactively.

E.g.

  ./pihole_munin_ admin add app_password
  ./pihole_munin_ admin add pihole_password

Secondly, if entered with the value 'nopassword', 'none' or 'null', the 'pihole_password' is set to an empty string (internally).

E.g.

  ./pihole_munin_ admin add pihole_password nopassword
  ./pihole_munin_ admin add pihole_password none
  ./pihole_munin_ admin add pihole_password null

=head1 AUTHOR

saint-lascivious (Hayden Pearce), 2025

=head1 LICENSE

GNU GPLv3
=cut

pihole_munin_plugin_id="$(printf "%s" "$0" | sed -e 's/^.*pihole_munin_//')"

if [ -z "${pihole_munin_plugin_id}" ]; then
    pihole_munin_plugin_id="percent"
fi

password_to_use=""
password_set="0"

host="${host:-127.0.0.1}"
is_localhost="0"

cli_password="${cli_password:-/etc/pihole/cli_pw}"

if [ -n "${app_password+x}" ]; then
    password_to_use="$app_password"
    password_set=1
elif [ -n "${pihole_password+set}" ]; then
    case "$pihole_password" in
        "nopassword"|"none"|"null")
            password_to_use=""
            password_set=1
        ;;
        "")
            printf "❌ Error: 'pihole_password' is set but empty — refusing to use empty password.\n" >&2
            exit 1
        ;;
        *)
            password_to_use="$pihole_password"
            password_set=1
        ;;
    esac
elif [ "${host}" = "127.0.0.1" ] || [ "${host}" = "localhost" ] || [ "${host}" = "::1" ]; then
    is_localhost="1"
    if [ -r "$cli_password" ]; then
        if [ -s "$cli_password" ]; then
            password_to_use=$(cat "$cli_password")
            password_set=1
        fi
    fi
fi

pihole_munin_print() {
    key_val="$1"
    colour_val="$2"
    crit_val="$3"
    draw_val="$4"
    graph_val="$5"
    info_val="$6"
    label_val="$7"
    type_val="$8"
    warn_val="$9"
    if ! printf %s "${key_val}" | grep -Eq '^[a-zA-Z_][a-zA-Z0-9_]*$'; then
        printf "❌ Error: Invalid or missing key.\n" >&2
        return 1
    fi
    if [ -n "${colour_val}" ]; then
        colour_val="${colour_val#\#}"
        if printf %s "${colour_val}" | grep -Eq '^[0-9A-Fa-f]{3}$'; then
            r=$(printf %s "${colour_val}" | cut -c1)
            g=$(printf %s "${colour_val}" | cut -c2)
            b=$(printf %s "${colour_val}" | cut -c3)
            colour_val="${r}${r}${g}${g}${b}${b}"
        fi
        if printf %s "${colour_val}" | grep -Eq '^[0-9A-Fa-f]{6}$'; then
            printf "%s.colour %s\n" "${key_val}" "${colour_val}"
        fi
    fi
    if [ -n "${crit_val}" ]; then
        if printf %s "${crit_val}" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)?(:(-?[0-9]+(\.[0-9]*)?)?)?$|^(-?[0-9]+(\.[0-9]*)?):$'; then
            printf "%s.critical %s\n" "${key_val}" "${crit_val}"
        fi
    fi
    if printf %s "${draw_val}" | grep -Eq '^LINE[0-9]*$|^AREA$|^STACK$|^AREASTACK$|^LINESTACK[0-9]*$'; then
        printf "%s.draw %s\n" "${key_val}" "${draw_val}"
    fi
    case "${graph_val}" in
        "yes"|"no")
            printf "%s.graph %s\n" "${key_val}" "${graph_val}"
        ;;
    esac
    [ -n "${info_val}" ] && printf "%s.info %s\n" "${key_val}" "${info_val}"
    if [ -z "${label_val}" ] || printf %s "${label_val}" | grep -q '[#\\]'; then
        printf "❌ Error: Invalid or missing label for field '%s'.\n" "${key_val}" >&2
        return 1
    fi
    printf "%s.label %s\n" "${key_val}" "${label_val}"
    case "${type_val}" in
        "GAUGE"|"COUNTER"|"DERIVE"|"ABSOLUTE")
            printf "%s.type %s\n" "${key_val}" "${type_val}"
        ;;
    esac
    if [ -n "$warn_val" ]; then
        if printf %s "$warn_val" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)?(:(-?[0-9]+(\.[0-9]*)?)?)?$|^(-?[0-9]+(\.[0-9]*)?):$'; then
            printf "%s.warning %s\n" "${key_val}" "$warn_val"
        fi
    fi
}

proto="${proto:-http}"
port="${port:-80}"
api="${api:-/api}"

api_target="${proto}://${host}:${port}${api}"
auth_url="${auth_url:-/auth}"

auth_required="1"
already_authed="0"

pihole_munin_auth_check() {
    check_response=$(curl --connect-timeout 5 -k -s -w "%{response_code}" "${api_target}${auth_url}")
    check_json=$(printf "%s" "$check_response" | head -c -3)
    check_code=$(printf "%s" "$check_response" | tail -c 3)
    case "$check_code" in
        "200")
            if printf "%s" "$check_json" | jq -e '.session.valid == true' >/dev/null 2>&1; then
                auth_required="0"
                already_authed="1"
            fi
        ;;
        "401")
            :
        ;;
        *)
            printf "❌ Error: Unepected response while verifying authentication requirement, response code was '%s'.\n" "${check_code}" >&2
            exit 1
        ;;
    esac
}

session_cache="${SESSION_CACHE:-0}"
now=$(date +%s)

pihole_munin_auth() {
    session_file="${MUNIN_PLUGSTATE:-/tmp}/pihole_session.state"
    if [ "${session_cache}" -eq "1" ] && [ -r "$session_file" ]; then
        session_time=$(head -n 1 "$session_file")
        if [ $((now - session_time)) -lt "${session_ttl:-300}" ]; then
            sid=$(tail -n 1 "$session_file")
            return 0
        fi
    fi
    if [ "$password_set" -ne 1 ]; then
        printf "❌ Error: No App Password, Pi-hole Password or CLI Password.\n" >&2
        exit 1
    fi
    auth_response=$(curl --connect-timeout 5 -k -s -S -o - -w "%{response_code}" "${api_target}${auth_url}" -d "{\"password\":\"${password_to_use}\"}")
    auth_response_json=$(printf "%s" "${auth_response}" | head -c -3)
    auth_response_code=$(printf "%s" "${auth_response}" | tail -c 3)
    if [ "${auth_response_code}" -ne 200 ]; then
        printf "❌ Error: Could not get Session ID, response code was '%s'.\n" "${auth_response_code}" >&2
        exit 1
    fi
    sid=$(printf "%s" "${auth_response_json}" | jq -r '.session.sid')
    if [ -n "$sid" ] && [ "${session_cache}" -eq "1" ]; then
        { printf "%s\n%s\n" "$now" "$sid"; } > "$session_file"
        chmod 600 "$session_file"
    fi
}

pihole_munin_logout() {
    [ -z "$sid" ] && return 0
    [ "${session_cache}" -eq "1" ] && return 0
    logout_code=$(curl --connect-timeout 5 -k -s -S -o - -w "%{response_code}" -X DELETE "${api_target}${auth_url}" \
        -H "Accept: application/json" \
        -H "sid: ${sid}")
    case "$logout_code" in
        "200"|"204")
            :
        ;;
        *)
            printf "❌ Error: Logout failed, response code was '%s'.\n" "${logout_code}" >&2
            exit 1
        ;;
    esac
}

pihole_munin_api_url() {
    url="${api_target}$1"
    if [ "$auth_required" -eq "1" ] && [ -n "$sid" ]; then
        sep="?"
        case "$url" in
            *"\?"*)
                sep="&"
            ;;
        esac
        url="${url}${sep}sid=${sid}"
    fi
    printf "%s" "$url"
}

pihole_munin_safe_eval() {
    outvar="$1"
    prefix="$2"
    key="$3"
    suffix="$4"
    default="$5"
    : "${default:=}"
    case "${key}" in
        ''|*[!a-zA-Z0-9_]*)
            eval "$outvar=\${default}"
            return
        ;;
    esac
    varname="${prefix}${key}${suffix}"
    cachevar="_cache_${varname}"
    eval "if [ \"\${$cachevar+x}\" = x ]; then $outvar=\${$cachevar}; return; fi"
    eval "value=\${$varname:-\${default}}"
    eval "$cachevar=\${value}"
    eval "$outvar=\${value}"
}

pihole_munin_validate_json() {
    jq empty >/dev/null 2>&1
}

pihole_munin_state() {
    state_file="${MUNIN_PLUGSTATE:-/tmp}/$(printf "%s" "$1" | sed -E 's/[^a-zA-Z0-9]/_/g').state"
    if [ -f "${state_file}" ]; then
        state_time=$(head -n 1 "${state_file}")
        state_ttl="${state_ttl:-120}"
        pihole_munin_safe_eval state_ttl "" "${pihole_munin_plugin_id}_state_ttl" "" "${state_ttl}"
        if [ $((now - state_time)) -lt "${state_ttl}" ]; then
            cached_response=$(tail -n +2 "${state_file}")
            if printf "%s" "${cached_response}" | pihole_munin_validate_json; then
                printf "%s\n" "${cached_response}"
                return
            else
                rm -f "${state_file}"
            fi
        fi
    fi
    did_auth="0"
    pihole_munin_auth_check
    if [ "$auth_required" -eq "1" ] && [ "$already_authed" -eq "0" ]; then
        pihole_munin_auth
        did_auth="1"
    fi
    response=$(curl --connect-timeout 5 -G -k -s "$(pihole_munin_api_url "$1")") || return 1
    if ! printf "%s" "${response}" | pihole_munin_validate_json; then
        return 1
    fi
    {
        printf "%s\n" \
            "${now}" \
            "${response}"
    } | tee "${state_file}" | tail -n +2
    if [ "$auth_required" -eq "1" ] && [ "$did_auth" -eq "1" ] && [ "${session_cache}" -ne 1 ]; then
        pihole_munin_logout
    fi
}

graph="${graph:-"yes"}"
graph_args="${graph_args:-"--lower-limit 0"}"
graph_category="${graph_category:-"dns"}"
graph_draw="${graph_draw:-"LINE1"}"
graph_height="${graph_height:-"200"}"
graph_scale="${graph_scale:-"yes"}"
graph_type="${graph_type:-"GAUGE"}"
graph_width="${graph_width:-"400"}"

pihole_munin_config() {
    case "$pihole_munin_plugin_id" in
        "cache")
            printf "%s\n" \
                "graph ${graph_cache:-${graph}}" \
                "graph_args ${graph_args_cache:-${graph_args}}" \
                "graph_category ${graph_category_cache:-${graph_category}}" \
                "graph_height ${graph_height_cache:-${graph_height}}" \
                "graph_info ${graph_info_cache:-"This graph shows Pi-hole's cache"}" \
                "graph_scale ${graph_scale_cache:-${graph_scale}}" \
                "graph_title ${graph_title_cache:-"Pi-hole cache"}" \
                "graph_vlabel ${graph_vlabel_cache:-"cached records"}" \
                "graph_width ${graph_width_cache:-${graph_width}}"
            for key in evicted expired immortal inserted; do
                pihole_munin_safe_eval colour_val "cache_" "${key}" "_colour" ""
                pihole_munin_safe_eval crit_val   "cache_" "${key}" "_crit"   ""
                pihole_munin_safe_eval draw_val   "cache_" "${key}" "_draw"   "${graph_draw}"
                pihole_munin_safe_eval graph_val  "cache_" "${key}" "_graph"  ""
                pihole_munin_safe_eval info_val   "cache_" "${key}" "_info"   "Pi-hole cache ${key}"
                pihole_munin_safe_eval label_val  "cache_" "${key}" "_label"  "${key}"
                pihole_munin_safe_eval type_val   "cache_" "${key}" "_type"   "${graph_type}"
                pihole_munin_safe_eval warn_val   "cache_" "${key}" "_warn"   ""
                pihole_munin_print "${key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
            done
        ;;
        "domains")
            printf "%s\n" \
                "graph ${graph_domains:-${graph}}" \
                "graph_args ${graph_args_domains:-${graph_args}}" \
                "graph_category ${graph_category_domains:-${graph_category}}" \
                "graph_height ${graph_height_domains:-${graph_height}}" \
                "graph_info ${graph_info_domains:-"This graph shows Pi-hole's domains being blocked"}" \
                "graph_scale ${graph_scale_domains:-${graph_scale}}" \
                "graph_title ${graph_title_domains:-"Pi-hole domains being blocked"}" \
                "graph_vlabel ${graph_vlabel_domains:-"domains being blocked"}" \
                "graph_width ${graph_width_domains:-${graph_width}}"
            key="domains_being_blocked"
            pihole_munin_safe_eval colour_val "domains_" "${key}" "_colour" ""
            pihole_munin_safe_eval crit_val   "domains_" "${key}" "_crit"   "1:10000000"
            pihole_munin_safe_eval draw_val   "domains_" "${key}" "_draw"   "${graph_draw}"
            pihole_munin_safe_eval graph_val  "domains_" "${key}" "_graph"  "yes"
            pihole_munin_safe_eval info_val   "domains_" "${key}" "_info"   "Pi-hole domains being blocked"
            pihole_munin_safe_eval label_val  "domains_" "${key}" "_label"  "domains being blocked"
            pihole_munin_safe_eval type_val   "domains_" "${key}" "_type"   "${graph_type}"
            pihole_munin_safe_eval warn_val   "domains_" "${key}" "_warn"   "0:5000000"
            pihole_munin_print "${key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
        ;;
        "gravity")
            printf "%s\n" \
                "graph ${graph_gravity:-${graph}}" \
                "graph_args ${graph_args_gravity:-${graph_args}}" \
                "graph_category ${graph_category_gravity:-${graph_category}}" \
                "graph_height ${graph_height_gravity:-${graph_height}}" \
                "graph_info ${graph_info_gravity:-"This graph shows Pi-hole's gravity database statistics"}" \
                "graph_scale ${graph_scale_gravity:-${graph_scale}}" \
                "graph_title ${graph_title_gravity:-"Pi-hole gravity database"}" \
                "graph_vlabel ${graph_vlabel_gravity:-"count"}" \
                "graph_width ${graph_width_gravity:-${graph_width}}"
            for gravity_key in \
                "lists|adlists" \
                "domains_allowed|allowed domains" \
                "regex_allowed|allowed regex" \
                "domains_denied|blocked domains" \
                "regex_denied|blocked regex" \
                "groups|group count"; do
                key=${gravity_key%%|*}
                default_label=${gravity_key#*|}
                pihole_munin_safe_eval colour_val "gravity_" "${key}" "_colour" ""
                pihole_munin_safe_eval crit_val   "gravity_" "${key}" "_crit"   ""
                pihole_munin_safe_eval draw_val   "gravity_" "${key}" "_draw"   "${graph_draw}"
                pihole_munin_safe_eval graph_val  "gravity_" "${key}" "_graph"  ""
                pihole_munin_safe_eval info_val   "gravity_" "${key}" "_info"   "Pi-hole gravity ${key}"
                pihole_munin_safe_eval label_val  "gravity_" "${key}" "_label"  "${default_label}"
                pihole_munin_safe_eval type_val   "gravity_" "${key}" "_type"   "${graph_type}"
                pihole_munin_safe_eval warn_val   "gravity_" "${key}" "_warn"   ""
                pihole_munin_print "${key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
            done
        ;;
        "percent")
            printf "%s\n" \
                "graph ${graph_percent:-${graph}}" \
                "graph_args ${graph_args_percent:-"--upper-limit 100 --lower-limit 0 --rigid --slope-mode --units-exponent 0"}" \
                "graph_category ${graph_category_percent:-${graph_category}}" \
                "graph_height ${graph_height_percent:-${graph_height}}" \
                "graph_info ${graph_info_percent:-"This graph shows Pi-hole's percent blocked query percentage"}" \
                "graph_scale ${graph_scale_percent:-${graph_scale}}" \
                "graph_title ${graph_title_percent:-"Pi-hole percent blocked"}" \
                "graph_vlabel ${graph_vlabel_percent:-"percent blocked"}" \
                "graph_width ${graph_width_percent:-${graph_width}}"
            key="percent_blocked"
            pihole_munin_safe_eval colour_val "percent_" "${key}" "_colour" ""
            pihole_munin_safe_eval crit_val   "percent_" "${key}" "_crit"   "90"
            pihole_munin_safe_eval draw_val   "percent_" "${key}" "_draw"   "${graph_draw}"
            pihole_munin_safe_eval graph_val  "percent_" "${key}" "_graph"  "yes"
            pihole_munin_safe_eval info_val   "percent_" "${key}" "_info"   "Pi-hole percent blocked"
            pihole_munin_safe_eval label_val  "percent_" "${key}" "_label"  "percent blocked"
            pihole_munin_safe_eval type_val   "percent_" "${key}" "_type"   "${graph_type}"
            pihole_munin_safe_eval warn_val   "percent_" "${key}" "_warn"   "1:75"
            pihole_munin_print "${key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
        ;;
        "privacy")
            printf "%s\n" \
                "graph ${graph_privacy:-${graph}}" \
                "graph_args ${graph_args_privacy:-"--upper-limit 3 --lower-limit 0 --rigid --units-exponent 0"}" \
                "graph_category ${graph_category_privacy:-${graph_category}}" \
                "graph_height ${graph_height_privacy:-${graph_height}}" \
                "graph_info ${graph_info_privacy:-"This graph shows Pi-hole's privacy level, see https://docs.pi-hole.net/ftldns/privacylevels/ for more information"}" \
                "graph_scale ${graph_scale_privacy:-${graph_scale}}" \
                "graph_title ${graph_title_privacy:-"Pi-hole privacy level"}" \
                "graph_vlabel ${graph_vlabel_privacy:-"show all / 1 / 2 / anonymous"}" \
                "graph_width ${graph_width_privacy:-${graph_width}}"
            key="privacy_level"
            pihole_munin_safe_eval colour_val "privacy_" "${key}" "_colour" ""
            pihole_munin_safe_eval crit_val   "privacy_" "${key}" "_crit"   "1:3"
            pihole_munin_safe_eval draw_val   "privacy_" "${key}" "_draw"   "${graph_draw}"
            pihole_munin_safe_eval graph_val  "privacy_" "${key}" "_graph"  "yes"
            pihole_munin_safe_eval info_val   "privacy_" "${key}" "_info"   "Pi-hole privacy level"
            pihole_munin_safe_eval label_val  "privacy_" "${key}" "_label"  "privacy level"
            pihole_munin_safe_eval type_val   "privacy_" "${key}" "_type"   "${graph_type}"
            pihole_munin_safe_eval warn_val   "privacy_" "${key}" "_warn"   "3:3"
            pihole_munin_print "${key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
        ;;
        "queries")
            printf "%s\n" \
                "graph ${graph_queries:-${graph}}" \
                "graph_args ${graph_args_queries:-${graph_args}}" \
                "graph_category ${graph_category_queries:-${graph_category}}" \
                "graph_height ${graph_height_queries:-${graph_height}}" \
                "graph_info ${graph_info_queries:-"This graph shows Pi-hole's queries"}" \
                "graph_scale ${graph_scale_queries:-${graph_scale}}" \
                "graph_title ${graph_title_queries:-"Pi-hole queries"}" \
                "graph_vlabel ${graph_vlabel_queries:-"queries"}" \
                "graph_width ${graph_width_queries:-${graph_width}}"
            for queries_key in \
                "blocked|queries blocked" \
                "cached|queries cached" \
                "forwarded|queries forwarded" \
                "frequency|query frequency (queries per second)" \
                "total|queries total" \
                "unique_domains|unique domains queried"; do
                key=${queries_key%%|*}
                default_info="Pi-hole ${queries_key#*|}"
                default_label=$(printf "%s" "${key}" | sed 's/_/ /g')
                pihole_munin_safe_eval colour_val "queries_" "${key}" "_colour" ""
                pihole_munin_safe_eval crit_val   "queries_" "${key}" "_crit"   ""
                pihole_munin_safe_eval draw_val   "queries_" "${key}" "_draw"   "${graph_draw}"
                pihole_munin_safe_eval graph_val  "queries_" "${key}" "_graph"  "yes"
                pihole_munin_safe_eval info_val   "queries_" "${key}" "_info"   "$default_info"
                pihole_munin_safe_eval label_val  "queries_" "${key}" "_label"  "${default_label}"
                pihole_munin_safe_eval type_val   "queries_" "${key}" "_type"   "${graph_type}"
                pihole_munin_safe_eval warn_val   "queries_" "${key}" "_warn"   ""
                [ "${key}" = "unique_domains" ] && crit_val="${crit_val:-1:20000}" && warn_val="${warn_val:-0:10000}"
                pihole_munin_print "${key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
            done
        ;;
        "status")
            printf "%s\n" \
                "graph ${graph_status:-${graph}}" \
                "graph_args ${graph_args_status:-"--lower-limit 0 --upper-limit 1 --rigid --units-exponent 0"}" \
                "graph_height ${graph_height_status:-${graph_height}}" \
                "graph_info ${graph_info_status:-"This graph shows Pi-hole's blocking status"}" \
                "graph_category ${graph_category_status:-${graph_category}}" \
                "graph_scale ${graph_scale_status:-${graph_scale}}" \
                "graph_title ${graph_title_status:-"Pi-hole status"}" \
                "graph_vlabel ${graph_vlabel_status:-"unknown / disabled / enabled"}" \
                "graph_width ${graph_width_status:-${graph_width}}"
            key="blocking_status"
            pihole_munin_safe_eval colour_val "status_" "${key}" "_colour" ""
            pihole_munin_safe_eval crit_val   "status_" "${key}" "_crit"   "0:1"
            pihole_munin_safe_eval draw_val   "status_" "${key}" "_draw"   "${graph_draw}"
            pihole_munin_safe_eval graph_val  "status_" "${key}" "_graph"  "yes"
            pihole_munin_safe_eval info_val   "status_" "${key}" "_info"   "Pi-hole blocking status"
            pihole_munin_safe_eval label_val  "status_" "${key}" "_label"  "blocking status"
            pihole_munin_safe_eval type_val   "status_" "${key}" "_type"   "${graph_type}"
            pihole_munin_safe_eval warn_val   "status_" "${key}" "_warn"   "1:1"
            pihole_munin_print "${key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
        ;;
        *)
            case "$pihole_munin_plugin_id" in
                "cache_by_type")
                    [ "${graph_total_cache_by_type:-total}" != "undef" ] && graph_total_line="graph_total ${graph_total_cache_by_type:-total}"
                    printf "%s\n" \
                        "graph ${graph_cache_by_type:-${graph}}" \
                        "graph_args ${graph_args_cache_by_type:-${graph_args}}" \
                        "graph_category ${graph_category_cache_by_type:-${graph_category}}" \
                        "graph_height ${graph_height_cache_by_type:-${graph_height}}" \
                        "graph_info ${graph_info_cache_by_type:-"This graph shows Pi-hole's cached records by type"}" \
                        "graph_scale ${graph_scale_cache_by_type:-${graph_scale}}" \
                        "graph_title ${graph_title_cache_by_type:-"Pi-hole cache by type"}" \
                        ${graph_total_line:+"$graph_total_line"} \
                        "graph_vlabel ${graph_vlabel_cache_by_type:-"cached records"}" \
                        "graph_width ${graph_width_cache_by_type:-${graph_width}}"
                    cache_by_type_response=$(pihole_munin_state "${info_metrics_url}") || exit 1
                    printf "%s" "${cache_by_type_response}" | jq -r '.metrics.dns.cache.content[] | .name' \
                    | while read -r key; do
                        for type in "valid" "stale"; do
                            case "$type" in
                                "valid")
                                    munin_key="${key}"
                                    default_label="${key}"
                                    suffix=""
                                ;;
                                "stale")
                                    munin_key="${key}_STALE"
                                    default_label="${key} (stale)"
                                    suffix="_STALE"
                                ;;
                            esac
                            pihole_munin_safe_eval colour_val "cache_by_type_" "${key}" "_colour" ""
                            pihole_munin_safe_eval crit_val   "cache_by_type_${key}${suffix}" "" "_crit" ""
                            pihole_munin_safe_eval draw_val   "cache_by_type_" "${key}" "_draw"   "${graph_draw}"
                            pihole_munin_safe_eval graph_val  "cache_by_type_" "${key}" "_graph"  "yes"
                            pihole_munin_safe_eval info_val   "cache_by_type_${key}${suffix}" "" "_info" "Pi-hole cache type ${default_label}"
                            pihole_munin_safe_eval label_val  "cache_by_type_${key}${suffix}" "" "_label" "${default_label}"
                            pihole_munin_safe_eval type_val   "cache_by_type_" "${key}" "_type"   "${graph_type}"
                            pihole_munin_safe_eval warn_val   "cache_by_type_${key}${suffix}" "" "_warn" ""
                            pihole_munin_print "${munin_key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
                        done
                    done
                ;;
                "clients")
                    printf "%s\n" \
                        "graph ${graph_clients:-${graph}}" \
                        "graph_args ${graph_args_clients:-${graph_args}}" \
                        "graph_category ${graph_category_clients:-${graph_category}}" \
                        "graph_height ${graph_height_clients:-${graph_height}}" \
                        "graph_info ${graph_info_clients:-"This graph shows Pi-hole's active and total clients"}" \
                        "graph_scale ${graph_scale_clients:-${graph_scale}}" \
                        "graph_title ${graph_title_clients:-"Pi-hole clients"}" \
                        "graph_vlabel ${graph_vlabel_clients:-"clients"}" \
                        "graph_width ${graph_width_clients:-${graph_width}}"
                    clients_response=$(pihole_munin_state "${stats_summary_url}") || exit 1
                    printf "%s" "${clients_response}" | jq -r '.clients | keys[]' \
                    | while read -r key; do
                        pihole_munin_safe_eval colour_val "clients_${key}_clients" "" "" ""
                        pihole_munin_safe_eval crit_val   "clients_${key}_clients" "" "_crit" ""
                        pihole_munin_safe_eval draw_val   "clients_${key}_clients" "" "_draw" "${graph_draw}"
                        pihole_munin_safe_eval graph_val  "clients_${key}_clients" "" "_graph" "yes"
                        pihole_munin_safe_eval info_val   "clients_${key}_clients" "" "_info" "Pi-hole clients ${key}"
                        pihole_munin_safe_eval label_val  "clients_${key}_clients" "" "_label" "${key} clients"
                        pihole_munin_safe_eval type_val   "clients_${key}_clients" "" "_type" "${graph_type}"
                        pihole_munin_safe_eval warn_val   "clients_${key}_clients" "" "_warn" ""
                        pihole_munin_print "${key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
                    done
                ;;
                "dnsmasq")
                    printf "%s\n" \
                        "graph ${graph_dnsmasq:-${graph}}" \
                        "graph_args ${graph_args_dnsmasq:-${graph_args}}" \
                        "graph_category ${graph_category_dnsmasq:-${graph_category}}" \
                        "graph_height ${graph_height_dnsmasq:-${graph_height}}" \
                        "graph_info ${graph_info_dnsmasq:-"This graph shows various Pi-hole dnsmasq statistics"}" \
                        "graph_scale ${graph_scale_dnsmasq:-${graph_scale}}" \
                        "graph_title ${graph_title_dnsmasq:-"Pi-hole dnsmasq"}" \
                        "graph_vlabel ${graph_vlabel_dnsmasq:-"count"}" \
                        "graph_width ${graph_width_dnsmasq:-${graph_width}}"
                    dnsmasq_response=$(pihole_munin_state "${info_ftl_url}") || exit 1
                    printf "%s" "${dnsmasq_response}" | jq -r '.ftl.dnsmasq | to_entries[] | .key' \
                    | while read -r key; do
                        default_label=$(printf "%s" "${key}" | sed 's/_/ /g')
                        pihole_munin_safe_eval colour_val "dnsmasq_" "${key}" "_colour" ""
                        pihole_munin_safe_eval crit_val   "dnsmasq_" "${key}" "_crit"   ""
                        pihole_munin_safe_eval draw_val   "dnsmasq_" "${key}" "_draw"   "${graph_draw}"
                        pihole_munin_safe_eval graph_val  "dnsmasq_" "${key}" "_graph"  "yes"
                        pihole_munin_safe_eval info_val   "dnsmasq_" "${key}" "_info"   "Pi-hole dnsmasq ${default_label}"
                        pihole_munin_safe_eval label_val  "dnsmasq_" "${key}" "_label"  "${default_label}"
                        pihole_munin_safe_eval type_val   "dnsmasq_" "${key}" "_type"   "${graph_type}"
                        pihole_munin_safe_eval warn_val   "dnsmasq_" "${key}" "_warn"   ""
                        pihole_munin_print "${key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
                    done
                ;;
                "overview")
                    printf "%s\n" \
                        "graph ${graph_overview:-${graph}}" \
                        "graph_args ${graph_args_overview:-"--base 1000"}" \
                        "graph_category ${graph_category_overview:-${graph_category}}" \
                        "graph_height ${graph_height_overview:-${graph_height}}" \
                        "graph_info ${graph_info_overview:-"This graph shows an overview of Pi-hole's DNS traffic"}" \
                        "graph_scale ${graph_scale_overview:-${graph_scale}}" \
                        "graph_title ${graph_title_overview:-"Pi-hole overview"}" \
                        "graph_vlabel ${graph_vlabel_overview:-"queries in (-) / replies out (+)"}" \
                        "graph_width ${graph_width_overview:-${graph_width}}"
                    overview_queries_by_type_response=$(pihole_munin_state "${stats_query_types_url}" ) || exit 1
                    printf "%s" "${overview_queries_by_type_response}" | jq -r '.types | keys[]' \
                    | while read -r key; do
                        key_query="query_${key}"
                        key_reply="reply_${key}"
                        query_label_val="${key}"
                        printf "%s.negative %s\n" "${key_query}" "${key_reply}"
                        pihole_munin_safe_eval colour_val "overview_" "${key_query}" "_colour" ""
                        pihole_munin_safe_eval crit_val   "overview_" "${key_query}" "_crit"   ""
                        pihole_munin_safe_eval draw_val   "overview_" "${key_query}" "_draw"   "${graph_draw}"
                        pihole_munin_safe_eval graph_val  "overview_" "${key_query}" "_graph"  "no"
                        pihole_munin_safe_eval info_val   "overview_" "${key_query}" "_info"   "DNS Resource Record type ${query_label_val}"
                        pihole_munin_safe_eval label_val  "overview_" "${key_query}" "_label"  "${query_label_val}"
                        pihole_munin_safe_eval type_val   "overview_" "${key_query}" "_type"   "${graph_type}"
                        pihole_munin_safe_eval warn_val   "overview_" "${key_query}" "_warn"   ""
                        pihole_munin_print "${key_query}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
                    done
                    overview_replies_by_type_response=$(pihole_munin_state "${stats_summary_url}") || exit 1
                    printf "%s" "${overview_replies_by_type_response}" | jq -r '.queries.replies | keys[]' \
                    | while read -r key; do
                        key_reply="reply_${key}"
                        reply_label_val="${key}"
                        pihole_munin_safe_eval colour_val "overview_" "${key_reply}" "_colour" ""
                        pihole_munin_safe_eval crit_val   "overview_" "${key_reply}" "_crit"   ""
                        pihole_munin_safe_eval draw_val   "overview_" "${key_reply}" "_draw"   "${graph_draw}"
                        pihole_munin_safe_eval graph_val  "overview_" "${key_reply}" "_graph"  "yes"
                        pihole_munin_safe_eval info_val   "overview_" "${key_reply}" "_info"   "DNS Resource Record type ${reply_label_val}"
                        pihole_munin_safe_eval label_val  "overview_" "${key_reply}" "_label"  "${reply_label_val}"
                        pihole_munin_safe_eval type_val   "overview_" "${key_reply}" "_type"   "${graph_type}"
                        pihole_munin_safe_eval warn_val   "overview_" "${key_reply}" "_warn"   ""
                        pihole_munin_print "${key_reply}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
                    done
                ;;
                "queries_by_status")
                    [ "${graph_total_queries_by_status:-total}" != "undef" ] && graph_total_line="graph_total ${graph_total_queries_by_status:-total}"
                    printf "%s\n" \
                        "graph ${graph_queries_by_status:-${graph}}" \
                        "graph_args ${graph_args_queries_by_status:-${graph_args}}" \
                        "graph_category ${graph_category_queries_by_status:-${graph_category}}" \
                        "graph_height ${graph_height_queries_by_status:-${graph_height}}" \
                        "graph_info ${graph_info_queries_by_status:-"This graph shows Pi-hole's queries by status"}" \
                        "graph_scale ${graph_scale_queries_by_status:-${graph_scale}}" \
                        "graph_title ${graph_title_queries_by_status:-"Pi-hole queries by status"}" \
                        ${graph_total_line:+"$graph_total_line"} \
                        "graph_vlabel ${graph_vlabel_queries_by_status:-"queries"}" \
                        "graph_width ${graph_width_queries_by_status:-${graph_width}}"
                    queries_by_status_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
                    printf "%s" "${queries_by_status_response}" | jq -r '.queries.status | keys[]' \
                    | while read -r key; do
                        pihole_munin_safe_eval colour_val "queries_by_status_" "${key}" "_colour" ""
                        pihole_munin_safe_eval crit_val   "queries_by_status_" "${key}" "_crit"   ""
                        pihole_munin_safe_eval draw_val   "queries_by_status_" "${key}" "_draw"   "${graph_draw}"
                        pihole_munin_safe_eval graph_val  "queries_by_status_" "${key}" "_graph"  "yes"
                        pihole_munin_safe_eval info_val   "queries_by_status_" "${key}" "_info"   "Pi-hole query status ${key}"
                        pihole_munin_safe_eval label_val  "queries_by_status_" "${key}" "_label"  "${key}"
                        pihole_munin_safe_eval type_val   "queries_by_status_" "${key}" "_type"   "${graph_type}"
                        pihole_munin_safe_eval warn_val   "queries_by_status_" "${key}" "_warn"   ""
                        pihole_munin_print "${key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
                    done
                ;;
                "queries_by_type")
                    [ "${graph_total_queries_by_type:-total}" != "undef" ] && graph_total_line="graph_total ${graph_total_queries_by_type:-total}"
                    printf "%s\n" \
                        "graph ${graph_queries_by_type:-${graph}}" \
                        "graph_args ${graph_args_queries_by_type:-${graph_args}}" \
                        "graph_category ${graph_category_queries_by_type:-${graph_category}}" \
                        "graph_height ${graph_height_queries_by_type:-${graph_height}}" \
                        "graph_info ${graph_info_queries_by_type:-"This graph shows Pi-hole's queries by record type"}" \
                        "graph_scale ${graph_scale_queries_by_type:-${graph_scale}}" \
                        "graph_title ${graph_title_queries_by_type:-"Pi-hole queries by type"}" \
                        ${graph_total_line:+"$graph_total_line"} \
                        "graph_vlabel ${graph_vlabel_queries_by_type:-"queries"}" \
                        "graph_width ${graph_width_queries_by_type:-${graph_width}}"
                    queries_by_type_response=$(pihole_munin_state "${stats_query_types_url}" ) || exit 1
                    printf "%s" "${queries_by_type_response}" | jq -r '.types | keys[]' \
                    | while read -r key; do
                        pihole_munin_safe_eval colour_val "queries_by_type_" "${key}" "_colour" ""
                        pihole_munin_safe_eval crit_val   "queries_by_type_" "${key}" "_crit"   ""
                        pihole_munin_safe_eval draw_val   "queries_by_type_" "${key}" "_draw"   "${graph_draw}"
                        pihole_munin_safe_eval graph_val  "queries_by_type_" "${key}" "_graph"  "yes"
                        pihole_munin_safe_eval info_val   "queries_by_type_" "${key}" "_info"   "Pi-hole query type ${key}"
                        pihole_munin_safe_eval label_val  "queries_by_type_" "${key}" "_label"  "${key}"
                        pihole_munin_safe_eval type_val   "queries_by_type_" "${key}" "_type"   "${graph_type}"
                        pihole_munin_safe_eval warn_val   "queries_by_type_" "${key}" "_warn"   ""
                        pihole_munin_print "${key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
                    done
                ;;
                "replies")
                    printf "%s\n" \
                        "graph ${graph_replies:-${graph}}" \
                        "graph_args ${graph_args_replies:-${graph_args}}" \
                        "graph_category ${graph_category_replies:-${graph_category}}" \
                        "graph_height ${graph_height_replies:-${graph_height}}" \
                        "graph_info ${graph_info_replies:-"This graph shows Pi-hole's replies"}" \
                        "graph_scale ${graph_scale_replies:-${graph_scale}}" \
                        "graph_title ${graph_title_replies:-"Pi-hole replies"}" \
                        "graph_vlabel ${graph_vlabel_replies:-"replies"}" \
                        "graph_width ${graph_width_replies:-${graph_width}}"
                    replies_response=$(pihole_munin_state "${info_metrics_url}" ) || exit 1
                    printf "%s" "${replies_response}" | jq -r '.metrics.dns.replies | keys[]' \
                    | while read -r key; do
                        pihole_munin_safe_eval colour_val "replies_" "${key}" "_colour" ""
                        pihole_munin_safe_eval crit_val   "replies_" "${key}" "_crit"   ""
                        pihole_munin_safe_eval draw_val   "replies_" "${key}" "_draw"   "${graph_draw}"
                        pihole_munin_safe_eval graph_val  "replies_" "${key}" "_graph"  "yes"
                        pihole_munin_safe_eval info_val   "replies_" "${key}" "_info"   "Pi-hole replies ${key}"
                        pihole_munin_safe_eval label_val  "replies_" "${key}" "_label"  "${key}"
                        pihole_munin_safe_eval type_val   "replies_" "${key}" "_type"   "${graph_type}"
                        pihole_munin_safe_eval warn_val   "replies_" "${key}" "_warn"   ""
                        pihole_munin_print "${key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
                    done
                ;;
                "replies_by_type")
                    [ "${graph_total_replies_by_type:-total}" != "undef" ] && graph_total_line="graph_total ${graph_total_replies_by_type:-total}"
                    printf "%s\n" \
                        "graph ${graph_replies_by_type:-${graph}}" \
                        "graph_args ${graph_args_replies_by_type:-${graph_args}}" \
                        "graph_category ${graph_category_replies_by_type:-${graph_category}}" \
                        "graph_height ${graph_height_replies_by_type:-${graph_height}}" \
                        "graph_info ${graph_info_replies_by_type:-"This graph shows Pi-hole's replies by record type"}" \
                        "graph_scale ${graph_scale_replies_by_type:-${graph_scale}}" \
                        "graph_title ${graph_title_replies_by_type:-"Pi-hole replies by type"}" \
                        ${graph_total_line:+"$graph_total_line"} \
                        "graph_vlabel ${graph_vlabel_replies_by_type:-"replies"}" \
                        "graph_width ${graph_width_replies_by_type:-${graph_width}}"
                    replies_by_type_response=$(pihole_munin_state "${stats_summary_url}") || exit 1
                    printf "%s" "${replies_by_type_response}" | jq -r '.queries.replies | keys[]' \
                    | while read -r key; do
                        pihole_munin_safe_eval colour_val "replies_by_type_" "${key}" "_colour" ""
                        pihole_munin_safe_eval crit_val   "replies_by_type_" "${key}" "_crit"   ""
                        pihole_munin_safe_eval draw_val   "replies_by_type_" "${key}" "_draw"   "${graph_draw}"
                        pihole_munin_safe_eval graph_val  "replies_by_type_" "${key}" "_graph"  "yes"
                        pihole_munin_safe_eval info_val   "replies_by_type_" "${key}" "_info"   "Pi-hole reply type ${key}"
                        pihole_munin_safe_eval label_val  "replies_by_type_" "${key}" "_label"  "${key}"
                        pihole_munin_safe_eval type_val   "replies_by_type_" "${key}" "_type"   "${graph_type}"
                        pihole_munin_safe_eval warn_val   "replies_by_type_" "${key}" "_warn"   ""
                        pihole_munin_print "${key}" "${colour_val}" "${crit_val}" "${draw_val}" "${graph_val}" "${info_val}" "${label_val}" "${type_val}" "${warn_val}"
                    done
                ;;
            esac
        ;;
    esac
}

dns_blocking_url="${dns_blocking_url:-/dns/blocking}"
info_ftl_url="${info_ftl_url:-/info/ftl}"
info_metrics_url="${info_metrics_url:-/info/metrics}"
stats_query_types_url="${stats_query_types_url:-/stats/query_types}"
stats_summary_url="${stats_summary_url:-/stats/summary}"

pihole_munin_fetch() {
    case "$pihole_munin_plugin_id" in
        "cache")
            cache_response=$(pihole_munin_state "${info_metrics_url}" ) || exit 1
            printf "%s" "${cache_response}" | jq -r '
                .metrics.dns.cache as $cache |
                [
                    {key: "evicted", value: $cache.evicted},
                    {key: "expired", value: $cache.expired},
                    {key: "immortal", value: $cache.immortal},
                    {key: "inserted", value: $cache.inserted}
                ] | .[]
                | "\(.key).value \(.value)"'
        ;;
        "cache_by_type")
            cache_by_type_response=$(pihole_munin_state "${info_metrics_url}" ) || exit 1
            printf "%s" "${cache_by_type_response}" | jq -r '.metrics.dns.cache.content[] | "\(.name).value \(.count.valid)\n\(.name)_STALE.value \(.count.stale)"'
        ;;
        "clients")
            clients_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
            printf "%s" "${clients_response}" | jq -r '.clients | to_entries[] | "\(.key).value \(.value)"'
        ;;
        "dnsmasq")
            dnsmasq_response=$(pihole_munin_state "${info_ftl_url}" ) || exit 1
            printf "%s" "${dnsmasq_response}" | jq -r '.ftl.dnsmasq | to_entries[] | "\(.key).value \(.value)"'
        ;;
        "domains")
            domains_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
            printf "%s" "${domains_response}" | jq -r '.gravity | "\("domains_being_blocked.value") \(.domains_being_blocked)"'
        ;;
        "gravity")
            gravity_response=$(pihole_munin_state "${info_ftl_url}" ) || exit 1
            printf "%s" "${gravity_response}" | jq -r '
                .ftl.database as $gravity |
                [
                    {key: "groups", value: $gravity.groups},
                    {key: "lists", value: $gravity.lists},
                    {key: "domains_allowed", value: $gravity.domains.allowed},
                    {key: "domains_denied", value: $gravity.domains.denied},
                    {key: "regex_allowed", value: $gravity.regex.allowed},
                    {key: "regex_denied", value: $gravity.regex.denied}
                ] | .[]
                | "\(.key).value \(.value)"'
        ;;
        "overview")
            overview_queries_by_type_response=$(pihole_munin_state "${stats_query_types_url}" ) || exit 1
            overview_replies_by_type_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
            printf "%s" "${overview_queries_by_type_response}" | jq -r '.types | to_entries[] | "query_\(.key).value \(.value)"'
            printf "%s" "${overview_replies_by_type_response}" | jq -r '.queries.replies | to_entries[] | "reply_\(.key).value \(.value)"'
        ;;
        "percent")
            percent_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
            printf "%s" "${percent_response}" | jq -r '.queries | to_entries[] | select(.key == "percent_blocked") | "\(.key).value \(.value | tonumber | . * 100 | round / 100)"'
        ;;
        "privacy")
            ftl_response=$(pihole_munin_state "${info_ftl_url}" ) || exit 1
            printf "%s" "${ftl_response}" | jq -r '"privacy_level.value \(.ftl.privacy_level)"'
        ;;
        "queries")
            queries_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
            printf "%s" "${queries_response}" | jq -r '
                .queries as $queries |
                [
                    {key: "blocked", value: $queries.blocked},
                    {key: "cached", value: $queries.cached},
                    {key: "frequency", value: $queries.frequency},
                    {key: "forwarded", value: $queries.forwarded},
                    {key: "total", value: $queries.total},
                    {key: "unique_domains", value: $queries.unique_domains}
                ] | .[]
                | "\(.key).value \(.value)"'
        ;;
        "queries_by_status")
            queries_by_status_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
            printf "%s" "${queries_by_status_response}" | jq -r '.queries.status | to_entries[] | "\(.key).value \(.value)"'
        ;;
        "queries_by_type")
            queries_by_type_response=$(pihole_munin_state "${stats_query_types_url}" ) || exit 1
            printf "%s" "${queries_by_type_response}" | jq -r '.types | to_entries[] | "\(.key).value \(.value)"'
        ;;
        "replies")
            replies_response=$(pihole_munin_state "${info_metrics_url}" ) || exit 1
            printf "%s" "${replies_response}" | jq -r '.metrics.dns.replies | to_entries[] | "\(.key).value \(.value)"'
        ;;
        "replies_by_type")
            replies_by_type_response=$(pihole_munin_state "${stats_summary_url}" ) || exit 1
            printf "%s" "${replies_by_type_response}" | jq -r '.queries.replies | to_entries[] | "\(.key).value \(.value)"'
        ;;
        "status")
            status_response=$(pihole_munin_state "${dns_blocking_url}" ) || exit 1
            printf "%s" "${status_response}" | jq -r '.blocking' \
            | while read -r key; do
                case "${key}" in
                    "enabled")
                        status_value="1"
                    ;;
                    "disabled")
                        status_value="0"
                    ;;
                    *)
                        status_value="-1"
                    ;;
                esac
                printf "blocking_status.value %s\n" "${status_value}"
            done
        ;;
    esac
}

pihole_munin_autoconf() {
    if { [ "${is_localhost}" -eq "1" ]; } && ! command -v pihole >/dev/null 2>&1; then
        printf "%s\n" "no (not a Pi-hole host)"
        return
    fi
    if [ "${password_set}" -eq "0" ]; then
        printf "%s\n" "no (no password set)"
        return
    fi
    dencies="curl jq"
    for dep in $dencies; do
        if ! command -v "${dep}" >/dev/null 2>&1; then
            printf "no (missing required command: %s)\n" "${dep}"
            return
        fi
    done
    printf "yes\n"
}

plugins="${PLUGINS:-cache cache_by_type clients dnsmasq domains gravity overview percent privacy queries queries_by_status queries_by_type replies replies_by_type status}"

pihole_munin_suggest() {
    for plugin in $plugins; do
        printf "%s\n" "${plugin}"
    done
}

pihole_munin_root() {
    [ "$(id -u)" -eq "0" ] && return 0
    exec sudo "$0" "$@" || { printf "❌ Error: Failed to acquire root privileges.\n" >&2; return 1; }
}

plugins_available="${PLUGINS_AVAILABLE:-/usr/share/munin/plugins}"
plugins_enabled="${PLUGINS_ENABLED:-/etc/munin/plugins}"

pihole_munin_header() {
    timestamp=$(date --rfc-3339=seconds)
    printf "%s\n\n" \
        "pihole_munin_ version: ${version} " \
        "⌚ ${timestamp}"
}

pihole_munin_enable() {
    pihole_munin_root "$@"
    pihole_munin_header
    dry_run="0"
    for option in "$@"; do
        case "$option" in
            "-D"|"dry"|"--dry-run")
                dry_run="1"
            ;;
        esac
    done
    [ -d "${plugins_available}" ] || { printf "❌ Error: Missing directory: %s\n" "${plugins_available}" >&2; return 1; }
    [ -d "${plugins_enabled}" ] || { printf "❌ Error: Missing directory: %s\n" "${plugins_enabled}" >&2; return 1; }
    if [ "$dry_run" -eq "1" ]; then
        printf "%s Installing pihole_munin_ to:\n  %s/pihole_munin_\n" "🛟 [DRY RUN]" "$plugins_available"
    else
        printf "%s Installing pihole_munin_ to:\n  %s/pihole_munin_\n" "🟢" "$plugins_available"
        cp -f "$0" "${plugins_available}/pihole_munin_" || {
            printf "❌ Error: Failed to copy plugin.\n" >&2
            return 1
        }
        chmod 755 "${plugins_available}/pihole_munin_" || {
            printf "❌ Error: Failed to set permissions.\n" >&2
            return 1
        }
    fi
    printf "\n%s Success.\n" \
            "$( [ "$dry_run" -eq "1" ] && printf "✅ [DRY RUN]" || printf "✅" )"
    printf "\n%s Enabling the following plugins:\n" \
        "$( [ "$dry_run" -eq "1" ] && printf "🛟 [DRY RUN]" || printf "🟢" )"
    for plugin in $plugins; do
        target="${plugins_enabled}/pihole_munin_${plugin}"
        if [ "$dry_run" -eq "1" ]; then
            printf "  %s\n" "$plugin"
        else
            ln -sf "${plugins_available}/pihole_munin_" "$target" || {
                printf "❌ Error: Failed to create symlink: %s\n" "$target" >&2
                return 1
            }
            printf "  %s\n" "$plugin"
        fi
    done
    if [ "$dry_run" -eq "1" ]; then
        printf "\n✅ [DRY RUN] Success.\n"
    else
        printf "\n%s\n\n%s\n\n%s\n%s\n" \
            "✅ Success." \
            "ℹ️ Please restart the Munin node." \
            "Example:" \
            "  sudo systemctl restart munin-node.service"
    fi
}

pihole_munin_disable() {
    pihole_munin_root "$@"
    pihole_munin_header
    dry_run="0"
    confirm="0"
    for option in "$@"; do
        case "$option" in
            "-C"|"confirm"|"--confirm"|"-y"|"yes"|"--yes")
                confirm="1"
            ;;
            "-D"|"dry"|"--dry-run")
                dry_run="1"
            ;;
        esac
    done
    [ -d "${plugins_enabled}" ] || {
        printf "❌ Error: Missing directory: %s\n" "${plugins_enabled}" >&2
        return 1
    }
    printf "%s Disabling the following plugins:\n" \
        "$( [ "$dry_run" -eq "1" ] && printf "🛟 [DRY RUN]" || printf "🔴" )"
    for plugin in $plugins; do
        path="${plugins_enabled}/pihole_munin_${plugin}"
        if [ -L "$path" ]; then
            if [ "$dry_run" -eq "1" ]; then
                printf "  %s\n" "$plugin"
            else
                rm -f "$path" || {
                    printf "❌ Error: Failed to remove symlink: %s\n" "$path" >&2
                    return 1
                }
                printf "  %s\n" "$plugin"
            fi
        fi
    done
    printf "\n%s Success.\n" \
            "$( [ "$dry_run" -eq "1" ] && printf "✅ [DRY RUN]" || printf "✅" )"
    [ -d "${plugins_available}" ] || {
        printf "❌ Error: Missing directory: %s\n" "${plugins_available}" >&2
        return 1
    }
    path="${plugins_available}/pihole_munin_"
    if [ -e "$path" ]; then
        if [ "$confirm" -eq "1" ]; then
            if [ "$dry_run" -eq "1" ]; then
                printf "\n%s Uninstalling pihole_munin_ from:\n  %s\n" "🛟 [DRY RUN]" "$path"
            else
                printf "\n%s Uninstalling pihole_munin_ from:\n  %s\n" "🔴" "$path"
                rm -f "$path" || {
                    printf "❌ Error: Failed to remove: %s\n" "$path" >&2
                    return 1
                }
            fi
        else
            printf "⚠️ Skipping uninstall (add --confirm to allow):\n  %s\n" "$path"
        fi
    fi
    printf "\n%s Success.\n" \
            "$( [ "$dry_run" -eq "1" ] && printf "✅ [DRY RUN]" || printf "✅" )"
}

pihole_munin_safe_write() {
    "$@" || { printf "❌ Error: Failed to write to temporary file.\n" >&2; return 1; }
}

pihole_munin_safe_move() {
    "$@" || { printf "❌ Error: Failed to move temporary file.\n" >&2; return 1; }
}

pihole_munin_safe_prompt() {
    printf "\nEnter value: "
    stty -echo
    IFS= read -r first_entry
    stty echo
    printf "\nConfirm value: "
    stty -echo
    IFS= read -r second_entry
    stty echo
    printf "\n"
    if [ "$first_entry" != "$second_entry" ]; then
        printf "❌ Error: Entered values do not match.\n" >&2
        return 1
    fi
    value=$first_entry
    return 0
}

pihole_munin_configure() {
    pihole_munin_root "$@"
    config_file="/etc/munin/plugin-conf.d/pihole_munin_"
    [ -n "$PIHOLE_MUNIN_CONF" ] && config_file="$PIHOLE_MUNIN_CONF"
    if [ ! -f "$config_file" ]; then
        pihole_munin_safe_write printf "[pihole_munin_*]\n" > "$config_file"
    fi
    command="$1"
    shift
    case "$command" in
        "list")
            [ -f "$config_file" ] || { printf "❌ Error: Configuration file not found.\n" >&2; return 1; }
            matches=$(grep -E '^( *env\.| *user\s)' "$config_file")
            [ -z "$matches" ] && { printf "ℹ️ No configuration variables found in %s.\n" "$config_file"; return 0; }
            printf "🔍 Listing variables in %s...\n" "$config_file"
            printf "%s\n" "$matches" | while IFS= read -r line; do
                case "$line" in
                    *"env."*"_password "*|*"env.password "*)
                        var=$(printf '%s' "$line" | awk '{print $1}')
                        val=$(printf '%s' "$line" | cut -d' ' -f2-)
                        len=$(printf '%s' "$val" | wc -c)
                        [ "$len" -gt 0 ] && len=$((len - 1))
                        masked=$(printf '%*s' "$len" '' | tr ' ' '*')
                        printf '  🔑 %s %s\n' "$var" "$masked"
                    ;;
                    *"env.proto "*)
                        printf '  🔗 %s\n' "$line"
                    ;;
                    *"env.host "*)
                        printf '  🖥️ %s\n' "$line"
                    ;;
                    *"env.port "*)
                        printf '  🔌 %s\n' "$line"
                    ;;
                    *"env.graph_category "*)
                        printf '  📈 %s\n' "$line"
                    ;;
                    *"env.graph_title "*)
                        printf '  🏷️ %s\n' "$line"
                    ;;
                    *"env."*"_crit "*)
                        printf '  🚨 %s\n' "$line"
                    ;;
                    *"env."*"_warn "*)
                        printf '  ⚠️ %s\n' "$line"
                    ;;
                    "user "*)
                        printf '  👤 %s\n' "$line"
                    ;;
                    "group "*)
                        printf '  👥 %s\n' "$line"
                    ;;
                    *)
                        printf '  🔧 %s\n' "$line"
                    ;;
                esac
            done
        ;;
        "add")
            [ -z "$1" ] && {
                printf "❌ Error: No variable specified for addition.\n" >&2
                return 1
            }
            var="$1"
            case "$var" in
                "env."*)
                    var="${var#env.}"
                ;;
            esac
            shift
            value="$*"
            trimmed_value=$(printf '%s' "$value" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            printf "➕ Adding variable to %s...\n" "$config_file"
            case "$var" in
                "pihole_password")
                    case "$trimmed_value" in
                        "nopassword"|"none"|"null")
                            :
                        ;;
                        *)
                            printf "\n⚠️ Warning: Sensitive variable '%s' passed on the command line.\n" "$var" >&2
                            printf "  This may be visible in shell history or process lists.\n" >&2
                        ;;
                    esac
                    if [ -z "$trimmed_value" ]; then
                        printf "\n%s\n\n%s\n\n" \
                            "⚠️ Warning: Sensitive variable '$var' detected." \
                            "ℹ️ You will be prompted to enter the value securely." >&2
                        if ! pihole_munin_safe_prompt; then
                            return 1
                        fi
                        trimmed_value="$value"
                    fi
                ;;
                "app_password")
                    printf "\n⚠️ Warning: Sensitive variable '%s' passed on the command line.\n" "$var" >&2
                    printf "  This may be visible in shell history or process lists.\n" >&2
                    if [ -z "$trimmed_value" ]; then
                        printf "\n%s\n\n%s\n\n" \
                            "⚠️ Warning: Sensitive variable '$var' detected." \
                            "ℹ️ You will be prompted to enter the value securely." >&2
                        if ! pihole_munin_safe_prompt; then
                            return 1
                        fi
                        trimmed_value="$value"
                    fi
                ;;
            esac
            [ -z "$trimmed_value" ] && {
                printf "❌ Error: Value for '%s' is empty or whitespace only.\n" "$var" >&2
                return 1
            }
            case "$var" in
                "user"|"group")
                    entry="    $var $value"
                    pihole_munin_safe_write sed "/^ *$var\s/d" "$config_file" > "$config_file.tmp"
                ;;
                *)
                    entry="    env.$var $value"
                    pihole_munin_safe_write sed "/^ *env\.$var\s/d" "$config_file" > "$config_file.tmp"
                ;;
            esac
            pihole_munin_safe_write printf "%s\n" "$entry" >> "$config_file.tmp"
            pihole_munin_safe_move "$config_file.tmp" "$config_file"
            printf "\n✅ Success.\n"
        ;;
        "remove")
            [ -z "$1" ] && { printf "❌ Error: No variable specified for removal.\n" >&2; return 1; }
            printf "➖ Removing variable from %s...\n" "$config_file"
            var="$1"
            case "$var" in
                "user")
                    pattern='^ *user[[:space:]]'
                ;;
                "group")
                    pattern='^ *group[[:space:]]'
                ;;
                *)
                    escaped_var=$(printf '%s' "$var" | sed 's/[][\\.^$*]/\\&/g')
                    pattern="^ *env\.${escaped_var}[[:space:]]"
                ;;
            esac
            if grep -Eq "$pattern" "$config_file"; then
                pihole_munin_safe_write sed "/$pattern/d" "$config_file" > "${config_file}.tmp"
                pihole_munin_safe_move "${config_file}.tmp" "$config_file"
                printf "\n✅ Success.\n"
            else
                printf "⚠️ Variable '%s' not found in %s\n" "$var" "$config_file"
            fi
        ;;
        *)
            printf "⚠️ Unknown command: %s\n" "$command" >&2
        ;;
    esac
}

pihole_munin_check() {
    IFS=. read -r a b c <<EOF
${1:-0.0.0}
EOF
    IFS=. read -r x y z <<EOF
${2:-0.0.0}
EOF
    [ "${a:-0}" -gt "${x:-0}" ] && return 0
    [ "${a:-0}" -lt "${x:-0}" ] && return 1
    [ "${b:-0}" -gt "${y:-0}" ] && return 0
    [ "${b:-0}" -lt "${y:-0}" ] && return 1
    [ "${c:-0}" -gt "${z:-0}" ]
}

pihole_munin_version() {
    skip_check="0"
    for option in "$@"; do
        case "$option" in
            "-S"|"skip"|"--skip-version-check")
                skip_check="1"
            ;;
            *)
                printf "⚠️ Unknown option: %s\n\n" "$option"
                pihole_munin_help version
                return 1
            ;;
        esac
    done
    printf "Version: %s\n" "$version"
    if [ "$skip_check" -eq "0" ] && command -v dig >/dev/null 2>&1; then
        remote_version=$(dig +short TXT pihole-munin.sainternet.xyz | sed -e 's/[^.0-9]//g')
        if [ -n "$remote_version" ]; then
            if pihole_munin_check "$remote_version" "$version"; then
                printf "\n%s\n\n%s\n%s\n" \
                "A newer version is available: $remote_version" \
                "ℹ️ Run '$0 admin update' to update the plugin," \
                "  or run '$0 help admin update' for more information."
            else
                printf "\n%s\n" "✅ You are using the latest version."
            fi
        else
            printf "%s\n" "❌ Error: Unable to check for updates." >&2
            return 1
        fi
    fi
}

pihole_munin_update() {
    pihole_munin_root "$@"
    repo_url="https://github.com/saint-lascivious/pihole_munin_"
    raw_url="${repo_url}/raw/master/pihole_munin_"
    target="${plugins_available}/pihole_munin_"
    confirm="0"
    for option in "$@"; do
        case "$option" in
            "-C"|"confirm"|"--confirm"|"-y"|"yes"|"--yes")
                confirm="1"
            ;;
            "-D"|"dry"|"--dry-run")
                dry_run="1"
            ;;
        esac
    done
    [ -f "$target" ] || {
        printf "❌ Error: Update target '%s' not found.\n" "$target" >&2
        return 1
    }
    tmp_file="$(mktemp /tmp/pihole_munin_update.XXXXXX)" || {
        printf "❌ Error: Failed to create temporary file.\n" >&2
        return 1
    }
    printf "%s Updating pihole_munin_ plugin...\n" \
        "$( [ "$dry_run" -eq "1" ] && printf "🛟 [DRY RUN]" || printf "🔃" )"
    if curl -fsSL "$raw_url" -o "$tmp_file"; then
        [ -s "$tmp_file" ] || {
            printf "❌ Error: Downloaded update is empty.\n" >&2
            rm -f "$tmp_file"
            return 1
        }
        remote_version=$(grep -E '^version=' "$tmp_file" | cut -d= -f2)
        local_version=$(grep -E '^version=' "$target" | cut -d= -f2)
        if [ -n "$remote_version" ] && [ -n "$local_version" ]; then
            printf "🔄 Checking for updates...\n"
            printf "📦 Local version:  %s\n" "$local_version"
            printf "🌐 Remote version: %s\n" "$remote_version"
            if ! pihole_munin_check "$remote_version" "$local_version"; then
                printf "\n✅ You are using the latest version.\n"
                rm -f "$tmp_file"
                return 0
            fi
        else
            printf "⚠️ Could not determine version(s), proceeding with update.\n"
        fi
        if [ "$dry_run" -eq "0" ]; then
            printf "\n🔄 Backing up existing script...\n"
            cp -f "$target" "${target}.bak" || {
                printf "❌ Error: Failed to back up existing script.\n" >&2
                rm -f "$tmp_file"
                return 1
            }
            printf "🗄️ Backup created: %s\n" "${target}.bak"
            printf "\n%s\n\n%s\n%s\n" \
                "ℹ️ You can restore this backup at any time." \
                "Example:" \
                "  sudo cp -f ${target}.bak $target"
        fi
        printf "\n%s Installing update...\n" \
            "$( [ "$dry_run" -eq "1" ] && printf "🛟 [DRY RUN]" || printf "🔄")"
        if [ "$target" = "$0" ] && [ "$confirm" = "0" ]; then
            printf "%s\n%s\n\n%s\n%s\n" \
                "⚠️ You are updating the currently running script," \
                "  add --confirm to bypass this prompt." \
                "Example:" \
                "  $0 admin update --confirm"
            printf "\nContinue? Type 'yes' to proceed: "
            read -r answer
            [ "$(printf %s "$answer" | tr '[:upper:]' '[:lower:]')" = "yes" ] || {
                printf "❌ Aborted.\n"
                rm -f "$tmp_file"
                return 1
            }
        fi
        chmod 755 "$tmp_file" || {
            printf "❌ Error: Failed to set permissions on update.\n" >&2
            rm -f "$tmp_file"
            return 1
        }
        if [ "$dry_run" -eq "0" ]; then
            mv "$tmp_file" "$target" || {
                printf "❌ Error: Failed to install updated plugin.\n" >&2
                rm -f "$tmp_file"
                return 1
            }
            printf "\n%s\n\n%s\n\n%s\n%s\n" \
                "✅ Success." \
                "ℹ️ Please restart the Munin node." \
                "Example:" \
                "  sudo systemctl restart munin-node.service"
        else
            printf "\n✅ [DRY RUN] Success.\n"
        fi
    else
        printf "❌ Error: Unable to fetch update.\n" >&2
        rm -f "$tmp_file"
        return 1
    fi
}

pihole_munin_help() {
    case "$1" in
        "-a"|"admin"|"--admin")
            case "$2" in
                "-A"|"add"|"--add")
                    printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n\n%s\n%s\n%s\n" \
                        "❓ Usage: $1 $2 <var> [<val>]" \
                        "Add or update a plugin configuration variable." \
                        "Variables SHOULD be entered without the env. prefix, and" \
                        "values SHOULD be without encapsulating quotation." \
                        "ℹ️ You will be prompted to enter the value securely if it" \
                        "is sensitive (e.g., app_password or pihole_password)." \
                        "Examples:" \
                        "  $1 $2 host 192.168.1.10" \
                        "  $1 $2 user pihole"
                ;;
                "-r"|"remove"|"--remove")
                    printf "%s\n\n%s\n\n%s\n%s\n%s\n" \
                        "❓ Usage: $1 $2 <var>" \
                        "Remove a variable from the plugin configuration file." \
                        "Examples:" \
                        "  $1 $2 host" \
                        "  $1 $2 user"
                ;;
                "-l"|"list"|"--list")
                    printf "%s\n\n%s\n\n%s\n%s\n" \
                        "❓ Usage: $1 $2" \
                        "List all configured plugin variables." \
                        "ℹ️ Sensitive variables (e.g., passwords)" \
                        "will be masked."
                ;;
                "-e"|"enable"|"--enable"|"-i"|"install"|"--install")
                    printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n" \
                        "❓ Usage: $1 $2 [<option>]" \
                        "Install pihole_munin_ and enable all plugins." \
                        "ℹ️ This command will install the plugin itself and enable" \
                        "all pihole_munin_ plugins." \
                        "Options:" \
                        "  -D, --dry-run    Show what would be done, but without making any changes."
                ;;
                "-d"|"disable"|"--disable"|"-u"|"uninstall"|"--uninstall")
                    printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n%s\n" \
                        "❓ Usage: $1 $2 [<option>]" \
                        "Disable all plugins and uninstall pihole_munin_." \
                        "ℹ️ This command will remove all pihole_munin_ plugins" \
                        "from the Munin node and uninstall the plugin itself." \
                        "Options:" \
                        "  -C, --confirm    Confirm the uninstallation of pihole_munin_." \
                        "  -D, --dry-run    Show what would be done, but without making any changes."
                ;;
                "-U"|"update"|"--update")
                    printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n%s\n%s\n\n%s\n%s\n%s\n\n%s\n%s\n%s\n" \
                        "❓ Usage: $1 $2 [<option>]" \
                        "Update pihole_munin_ to the latest version." \
                        "ℹ️ This command will download the latest version from" \
                        "the GitHub repository and replace the current script." \
                        "⚠️ This is not intended to be run blind, but that's still" \
                        "something you're free to do. Updating blind may result in" \
                        "pulling in a newer version that exists in the repo, but" \
                        "is not necessarily intended for public consumption." \
                        "At some point I will probably split the update checking out" \
                        " of the version function and into its own function, but that" \
                        " day is not today." \
                        "Options:" \
                        "  -C, --confirm    Bypass confirmation when self-updating." \
                        "  -D, --dry-run    Show what would be done, but without making any changes."
                ;;
                "-p"|"password"|"--password")
                    printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n%s\n" \
                        "❓ Usage: $1 $2 [<password>]" \
                        "Set the Pi-hole password." \
                        "ℹ️ This command will add or update the pihole_password" \
                        "variable in the plugin configuration file." \
                        "Examples:" \
                        "  $1 $2 mysecretpassword" \
                        "  $1 $2 nopassword"
                ;;
                "" )
                    printf "%s\n\n%s\n\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n%s\n" \
                        "❓ Usage: $1 <subcommand>" \
                        "Manage plugin configuration and installation." \
                        "Subcommands:" \
                        "  -A, add                      Add or update a plugin configuration variable." \
                        "  -d, -u, disable, uninstall   Disable all plugins and uninstall pihole_munin_." \
                        "  -e, -i, enable, install      Install pihole_munin_ and enable all plugins." \
                        "  -l, list                     List all configured plugin variables." \
                        "  -p, password                 Set the Pi-hole password." \
                        "  -r, remove                   Remove a variable from the plugin configuration." \
                        "  -U, update                   Update pihole_munin_ to the latest version." \
                        "ℹ️ Run '$0 help admin <subcommand>' for more information on a subcommand."
                ;;
                * )
                    printf "%s\n\n%s\n" \
                        "⚠️ Unknown $1 subcommand: $2" \
                        "ℹ️ Run '$0 help admin' for a list of available subcommands." \
                ;;
            esac
        ;;
        "autoconf")
            printf "%s\n\n%s\n%s\n%s\n\n%s\n\n%s\n\n%s\n\n%s\n%s\n" \
                "❓ Usage: $1" \
                "A plugin with a capabilities=autoconf magic marker will first be invoked with" \
                "autoconf as the sole argument. When invoked thus the plugin should do one of" \
                "these two:" \
                "  1. Print 'yes' to signal that the plugin thinks it can be useful on this host" \
                "  2. Print 'no' to signal that the plugin does not think so." \
                "The plugin should always exit 0, even if the response is 'no'." \
                "If the answer was 'yes' and it’s not a wildcard plugin, the plugin will be" \
                "linked into the plugins catalog of munin-node."
        ;;
        "config")
            printf "%s\n\n%s\n%s/n%s/n" \
                "❓ Usage: $1" \
                "The config output describes the plugin and the graph it creates." \
                "The full set of attributes you can use is found in the config reference." \
                "https://guide.munin-monitoring.org/en/master/reference/plugin.html#plugin-reference" \
        ;;
        "fetch")
            printf "%s\n\n%s\n%s\n%s\n%s\n" \
                "❓ Usage: $1" \
                "When the node receives a fetch command for a plugin, the plugin is invoked" \
                "without any arguments on the command line and is expected to emit one or more" \
                "field.value attribute values. One for each thing the plugin observes as defined" \
                "by the config output. Plotting of graphs may be disabled by the config output."
        ;;
        "-h"|"help"|"--help")
            printf "%s\n\n%s\n\n%s\n" \
                "❓ Usage: $1 <command> [<subcommand>]" \
                "Displays general or detailed help for commands and subcommands." \
                "Example: $1 admin add"
        ;;
        "setpassword")
            printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n%s\n" \
                "❓ Usage: $1 [<password>]" \
                "Shortcut to set the Pi-hole password." \
                "ℹ️ This command will add or update the pihole_password" \
                "variable in the plugin configuration file." \
                "Examples:" \
                "  $1 mysecretpassword" \
                "  $1 nopassword"
        ;;
        "suggest")
            printf "%s\n\n%s\n%s\n\n%s\n%s\n%s\n%s\n" \
                "❓ Usage: $1" \
                "Munin creates one graph per plugin. To create many graphs from one plugin, you" \
                "can write a wildcard plugin." \
                "These plugins take one or more bits of configuration from the file name it is" \
                "run as. The plugin is stored as one file in the directory for available plugins," \
                "but is linked as multiple files in the directory for enabled plugins. This creates" \
                "one graph per link name, using just one plugin as source."
        ;;
        "-v"|"version"|"--version")
            printf "%s\n\n%s\n\n%s\n%s\n%s\n\n%s\n%s\n" \
                "❓ Usage: $1 [<option>]" \
                "Display the plugin version string." \
                "ℹ️ If not skipped, a check for a newer version will be" \
                "performed using a remote DNS TXT record located at" \
                "pihole-munin.sainternet.xyz." \
                "Options:" \
                "  -S, --skip-version-check     Skip remote version check."
        ;;
        "")
            printf "%s\n\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n%s\n" \
                "❓ Usage: $0 <command>" \
                "Commands:" \
                "  -a, admin    Manage plugin configuration and installation." \
                "  autoconf     Check if the plugin can be useful on this host." \
                "  config       Display the plugin configuration." \
                "  fetch        Fetch data from the plugin for Munin to process." \
                "  -h, help     Show detailed help information." \
                "  setpassword  Shortcut to set the Pi-hole password." \
                "  suggest      List available plugins for Munin." \
                "  -v, version  Display the plugin version string." \
                "ℹ️ Run '$0 help <command>' for more information on a command."
        ;;
        * )
            printf "⚠️ Unknown help topic: %s\n\n" "$*"
            pihole_munin_help
            return 1
        ;;
    esac
}

for argument in "$@"; do
    case "$argument" in
        "-h"|"help"|"--help")
            help_flag="$argument"
            break
        ;;
    esac
done

if [ -n "$help_flag" ] && [ "$1" != "$help_flag" ]; then
    new_arguments=""
    first="1"
    for argument; do
        if [ "$first" -eq "1" ] && [ "$argument" = "$help_flag" ]; then
            first="0"
            continue
        fi
        new_arguments="${new_arguments:+$new_arguments }$(printf '%s\n' "$argument" | sed "s/'/'\\\\''/g; s/^/'/; s/\$/'/")"
    done
    eval "set -- '$help_flag' $new_arguments"
fi

case "$1" in
    ""|"fetch")
        pihole_munin_fetch
    ;;
    "config")
        pihole_munin_config
        if [ "${MUNIN_CAP_DIRTYCONFIG}" = "1" ]; then
            pihole_munin_fetch
        fi
    ;;
    "-a"|"admin"|"--admin")
        case "$2" in
            "-e"|"-i"|"enable"|"install"|"--enable"|"--install")
                pihole_munin_enable "$@"
            ;;
            "-d"|"-u"|"disable"|"uninstall"|"--disable"|"--uninstall")
                pihole_munin_disable "$@"
            ;;
            "-A"|"-r"|"add"|"remove"|"--add"|"--remove")
                pihole_munin_configure "$2" "$@"
            ;;
            "-l"|"list"|"--list")
                pihole_munin_configure "list"
            ;;
            "-U"|"update"|"--update")
                pihole_munin_update "$@"
            ;;
            "-p"|"password"|"--password")
                pihole_munin_configure "add" "pihole_password" "${3:-}"
            ;;
            "")
                pihole_munin_help "$1"
            ;;
            *)
                pihole_munin_help "$1" "$2"
            ;;
        esac
    ;;
    "-h"|"help"|"--help")
        case "$2" in
            "")
                pihole_munin_help
            ;;
            "-a"|"admin"|"--admin")
                pihole_munin_help "$2" "${3:-}"
            ;;
            "-v"|"version"|"--version"|"setpassword")
                pihole_munin_help "$2"
            ;;
            *)
                printf "⚠️ Unknown help topic: %s\n\n" "$2"
                pihole_munin_help
            ;;
        esac
    ;;
    "-v"|"version"|"--version")
        shift
        pihole_munin_version "$@"
    ;;
    "autoconf")
        pihole_munin_autoconf
    ;;
    "suggest")
        pihole_munin_suggest
    ;;
    "setpassword")
        pihole_munin_configure "add" "pihole_password" "${2:-}"
    ;;
    *)
        pihole_munin_help
    ;;
esac

exit 0
