#!/usr/bin/env sh

#         _  _             _                                     _
#  _ __  (_)| |__    ___  | |  ___      _ __ ___   _   _  _ __  (_) _ __
# | '_ \ | || '_ \  / _ \ | | / _ \    | '_ ` _ \ | | | || '_ \ | || '_ \
# | |_) || || | | || (_) || ||  __/ __ | | | | | || |_| || | | || || | | | __
# | .__/ |_||_| |_| \___/ |_| \___||__||_| |_| |_| \__,_||_| |_||_||_| |_||__|
# |_|

# saint-lascivious (Hayden Pearce), 2025

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

set -e

pihole_munin_version="${PIHOLE_MUNIN_VERSION:-"6.2.0"}"

: <<=cut
=head1 NAME

pihole_munin_

=head2 VERSION

${pihole_munin_version}

=head1 APPLICABLE SYSTEMS

Pi-hole >= 6.0

=head1 DESCRIPTION

Munin plugins for monitoring various Pi-hole statistics.

=head1 MAGIC MARKERS

  #%# family=auto
  #%# capabilities=autoconf suggest

=head1 WILDCARD PLUGIN

This is a wildcard plugin.

=head2 PLUGINS

  cache: Shows Pi-hole's cache
  cache_by_type: Shows Pi-hole's cached records by type
  clients: Shows active and total Pi-hole clients
  dnsmasq: Shows various Pi-hole FTLDNS dnsmasq statistics
  domains: Shows the number of domains being blocked by Pi-hole
  frequency: Shows Pi-hole's query frequency
  gravity: Shows various Pi-hole gravity database statistics
  overview: Shows an overview of Pi-hole's DNS traffic
  percent: Shows Pi-hole's blocked query percentage
  privacy: Shows Pi-hole's privacy level
  queries: Shows Pi-hole's queries
  queries_by_status: Shows Pi-hole's queries by status
  queries_by_type: Shows Pi-hole's queries by record type
  replies: Shows Pi-hole's replies
  replies_by_type: Shows Pi-hole's replies by record type
  status: Shows Pi-hole's blocking status
  unique: Shows the number of unique domains queried

=head1 USAGE

Use the 'admin' command to automatically install pihole_munin_ and enable all plugins at once.

E.g.

  ./pihole_munin_ admin enable

Alternatively, you can install manually and link this plugin to /etc/munin/plugins/ as the desired plugin(s) and restart munin-node.

E.g.

  sudo mv pihole_munin_ /usr/share/munin/plugins/pihole_munin_
  sudo chmod +x /usr/share/munin/plugins/pihole_munin_

then,

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_cache

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_cache_by_type

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_clients

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_dnsmasq

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_domains

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_frequency

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_gravity

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_overview

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_percent

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_privacy

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_queries

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_queries_by_status

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_queries_by_type

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_replies

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_replies_by_type

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_status

  sudo ln -s /usr/share/munin/plugins/pihole_munin_ \
  /etc/munin/plugins/pihole_munin_unique

and then,

  sudo systemctl restart munin-node.service

=head1 CONFIGURATION

Example configuration for /etc/munin/plugin-conf.d/pihole_munin_

  [pihole_munin_*]
      ### AUTHENTICATION ###

      #### APPLICATION PASSWORD ####

      # A Pi-hole application password may be used to authenticate with the
      # Pi-hole API, this password differs from the web interface password.
      # Example:
      #   env.app_password APP_PASSWORD_HERE

      #### PI-HOLE PASSWORD ####

      # The Pi-hole password may also, but probably shouldn't, be used.
      # Example:
      #   env.pihole_password PIHOLE_PASSWORD_HERE

      #### CLI PASSWORD ####

      # The path at which Pi-hole's CLI password may be found.
      # If found and readable, this password will be used to authenticate with
      # the Pi-hole API if no other password is provided.
      env.cli_password /etc/pihole/cli_pw

      ### API ###

      # These variables are used to construct the base of the API URL.
      env.proto http
      env.host 127.0.0.1
      env.port 80
      env.api /api

      ### ALERTS ###

      # The following variables are used to set the alert thresholds for
      # various plugins.

      # To attempt to remove ambiguity, all <key> field names are the same
      # as the labels used in the graphs, with underscores (_) instead
      # of spaces ( ). These <key> field names are case-sensitive, so
      # ensure that you use the correct case when setting the alert
      # thresholds.

      # To remove any doubt, you can click on the graph in the Munin
      # interface to see the field names used in the graph, and the
      # corresponding internal name.

      # This should always match the label used in the graph, but just
      # in case it doesn't for some reason and you want to set an alert
      # threshold or any other modification, use the internal name.

      # The format for the variables is:
      #   env.<plugin>_<key>_<alert_type>

      # The plugin is the name of the plugin, e.g. cache, clients, etc.

      # The key is the name of the metric, e.g. evicted, active, etc.

      # The alert_type is either crit or warn, for critical and warning alerts
      # respectively.
    
      # The format for values is either a single value which represents the
      # maximum value before an alert is triggered, or a range of values 
      # separated by a colon, where an alert will be triggered if the value
      # is outside of the specified range.

      # Only individual default values are provided here, the rest are left
      # to the user to configure if desired.

      # clients
      env.clients_active_crit 100
      env.clients_active_warn 1:50
      env.clients_total_crit 0:200
      env.clients_total_warn 100

      # domains
      env.domains_domains_being_blocked_crit 1:10000000
      env.domains_domains_being_blocked_warn 0:5000000

      # percent
      env.percent_percent_blocked_crit 90
      env.percent_percent_blocked_warn 1:75

      # privacy
      env.privacy_privacy_level_crit 1:3
      env.privacy_privacy_level_warn 3:3

      # status
      env.status_blocking_status_crit 0:1
      env.status_blocking_status_warn 1:1

      # unique
      env.unique_unique_domains_crit 1:10000
      env.unique_unique_domains_warn 0:5000

      ### GRAPHS ###

      # The following variables are used to set the graphing options.

      #### GRAPH ####

      # The graph value determines wheter graphs are drawn or not.
      env.graph yes

      # The graph value may be overridden on a per-plugin basis by setting the
      # graph_<plugin> variable to the desired value (yes/no).

      #### GRAPH_ARGS ####

      # The graph_args value determines the arguments passed to Munin's
      # graphing engine.
      env.graph_args --lower-limit 0

      # The default graph arguments are:
      #   cache: --lower-limit 0
      #   cache_by_type: --lower-limit 0
      #   clients: --lower-limit 0
      #   dnsmasq: --lower-limit 0
      #   domains: --lower-limit 0
      #   frequency: --lower-limit 0
      #   gravity: --lower-limit 0
      #   overview: --lower-limit 0
      #   percent: --upper-limit 100 --lower-limit 0
      #    
      #   privacy: --upper-limit 3 --lower-limit 0
      #   queries: --lower-limit 0
      #   queries_by_status: --lower-limit 0
      #   queries_by_type: --lower-limit 0
      #   replies: --lower-limit 0
      #   replies_by_type: --lower-limit 0
      #   status: --lower-limit -1 --upper-limit 1
      #   unique: --lower-limit 0

      # The default graph arguments may be overridden by setting the
      # graph_args_<plugin> variable to the desired arguments.

      #### GRAPH_CATEGORY ####

      # The graph_category value determines the category in which the
      # pihole_munin_* graphs appear in Munin's interface when drawn.
      env.graph_category dns

      # The default graph category may be overridden on a per-plugin basis
      # by setting the graph_category_<plugin> variable to the desired
      # category.

      #### GRAPH_HEIGHT ####

      # The graph_height value determines the height of the graph in Munin's
      # interface.
      env.graph_height 200

      # The graph height may be overridden on a per-plugin basis by setting the
      # graph_height_<plugin> variable to the desired height.

      #### GRAPH_INFO ####

      # The graph_info_* values determine the information displayed in the
      # graph's tooltip in Munin's interface.

      # The default graph information is:
      #   cache: This graph shows Pi-hole's cache, visit \
      #     https://docs.pi-hole.net/ftldns/dns-cache/ for more information
      #   cache_by_type: This graph shows Pi-hole's cached records by type
      #   clients: This graph shows Pi-hole's active and total clients
      #   dnsmasq: This graph shows various Pi-hole dnsmasq statistics
      #   domains: This graph shows Pi-hole's domains being blocked
      #   frequency: This graph shows Pi-hole's query frequency
      #   gravity: This graph shows Pi-hole's gravity database statistics
      #   overview: This graph shows an overview of Pi-hole's DNS traffic
      #   percent: This graph shows Pi-hole's percent blocked query percentage
      #   privacy: This graph shows Pi-hole's privacy level, visit \
      #     https://docs.pi-hole.net/ftldns/privacylevels/ for more information
      #   queries: This graph shows Pi-hole's queries
      #   queries_by_status: This graph shows Pi-hole's queries by status
      #   queries_by_type: This graph shows Pi-hole's queries by record type
      #   replies: This graph shows Pi-hole's replies
      #   replies_by_type: This graph shows Pi-hole's replies by record type
      #   status: This graph shows Pi-hole's blocking status
      #   unique: This graph shows the number of unique domains queried

      # The default graph information may be overidden by setting the
      # graph_info_<plugin> variable to the desired information.

      #### GRAPH_SCALE ####

      # The graph_scale value determines whether the graph is scaled to fit the
      # data in Munin's interface.
      env.graph_scale no

      # The graph scaling may be overridden on a per-plugin basis by setting
      # the graph_scale_<plugin> variable to the desired value (yes/no).

      #### GRAPH_TITLE ####

      # The graph_title_* values determine the title of the graph in Munin's
      # interface.

      # The default graph titles are:
      #   cache: Pi-hole cache
      #   cache_by_type: Pi-hole cache by type
      #   clients: Pi-hole clients
      #   dnsmasq: Pi-hole dnsmasq
      #   domains: Pi-hole domains being blocked
      #   frequency: Pi-hole query frequency
      #   gravity: Pi-hole gravity database
      #   overview: Pi-hole overview
      #   percent: Pi-hole percent blocked
      #   privacy: Pi-hole privacy level
      #   queries: Pi-hole queries
      #   queries_by_status: Pi-hole queries by status
      #   queries_by_type: Pi-hole queries by type
      #   replies: Pi-hole replies
      #   replies_by_type: Pi-hole replies by type
      #   status: Pi-hole status
      #   unique: Pi-hole unique domains

      # The default graph titles may be overridden by setting the
      # graph_title_<plugin> variable to the desired title.

      #### GRAPH_TOTAL ####

      # The graph_total_* variables determines whether a total line is drawn in
      # the graph's legend in Munin's interface.

      # Attribute: graph_total
      # Value: string
      # Type: optional
      # Description: If set, summarizes all the data sources' values and
      #   reports the results in an extra row in the legend beneath the graph.
      #   The value you set here is used as label for that line.
      #   Note that, since Munin version 2.1, using the special undef keyword
      #   disables it (to override in munin.conf).

      # The format for the variables is:
      #   env.graph_total_<plugin>

      # Plugins: cache_by_type, queries, queries_by_status, queries_by_type
      # replies and replies_by_type

      # The format for the values is a string containing the label to be
      # displayed in the graph's legend in Munin's interface.
      # E.g. "total", "sum", "all", etc.

      #### GRAPH_VLABEL ####

      # The graph_vlabel_* values determine the vertical label of the graph
      # in Munin's interface.

      # The default graph vertical labels are:
      #   cache: cached records
      #   cache_by_type: cached records
      #   clients: clients
      #   dnsmasq: count
      #   domains: domains being blocked
      #   frequency: queries per second
      #   gravity: count
      #   overview: queries in (-) / replies out (+)
      #   percent: percent blocked
      #   privacy: show all / 1 / 2 / anonymous
      #   queries: queries
      #   queries_by_status: queries
      #   queries_by_type: queries
      #   replies: replies
      #   replies_by_type: replies
      #   status: unknown / disabled / enabled
      #   unique: unique domains

      # The default graph vertical labels may be overridden by setting the
      # graph_vlabel_<plugin> variable to the desired label.

      #### GRAPH_WIDTH ####

      # The graph_width value determines the width of the graph in Munin's
      # interface.
      env.graph_width 400

      # The graph width may be overridden on a per-plugin basis by setting the
      # graph_width_<plugin> variable to the desired width.

      #### GRAPH_ZERO ####

      # The graph_zero value determines whether or not graphs with multiple
      # fields should graph key value pairs with a value of zero.
      env.graph_zero yes

      # Attribute: graph_zero
      # Value: yes|no
      # Type: optional
      # Description: If set to yes, graphs with multiple fields will graph
      #   key value pairs with a value of zero. This is useful for graphs
      #   with multiple fields where some fields may not have data for a
      #   given time period, as it ensures that the graph will still show
      #   the zero value for those fields, rather than leaving a gap in the
      #   graph. If set to no, those fields will not be graphed at all.

      # Graph zeroing may be overridden on a per-plugin basis by setting
      # the graph_zero_<plugin> variable to the desired value (yes/no).

      # The format for the variables is:
      #   env.graph_zero_<plugin>

      # Plugins: cache, cache_by_type, dnsmasq, gravity, overview,
      # queries, queries_by_status, queries_by_type, replies and
      # replies_by_type

      # The format for the values is either yes or no.

      ### FIELDS ###

      # The following variables determine how graphed fields are displayed in
      # Munin's interface.

      #### FIELDNAME.COLOUR ####

      # Attribute: {fieldname}.colour
      # Value: Hexadecimal colour code
      # Type: optional
      # Description: Custom specification of colour for drawing curve.
      #   Available since 1.2.5 and 1.3.3.
      # Default: Selected by order sequence from Munin standard colour set

      # The format for the variables is:
      #   env.<plugin>_<key>_colour

      # The plugin is the name of the plugin, e.g. cache, clients, etc.

      # The key is the name of the metric, e.g. evicted, active, etc.

      # The format for the values is three or six hexadecimal digits
      # with or without a leading hash (#) character.
      # E.g. #FF0000, 00FF00, 0000FF, #F00, F0F, 0F0, 0F00FF, etc.

      #### FIELDNAME.DRAW ####

      # Attribute: {fieldname}.draw
      # Value: AREA, LINE, LINE[n], STACK, AREASTACK, LINESTACK, LINESTACK[n]
      # Type: optional
      # Description: Determines how the data points are displayed in the graph.
      #   The LINE takes an optional width suffix, commonly LINE1, LINE2, etc…

      # The *STACK values are specific to munin and makes the first a LINE,
      # LINE[n] or AREA datasource, and the rest as STACK.
      # Default: LINE1 since Munin version 2.0.

      # The format for the variables is:
      #   env.<plugin>_<key>_draw

      # The format for the values is the draw style to be used.
      # E.g. LINE1, LINE2, AREA, STACK, etc.

      #### FIELDNAME.GRAPH ####

      # Attribute: {fieldname}.graph
      # Value: yes|no
      # Type: optional
      # Description: Determines if the data source should be visible in
      #   the generated graph.
      # Default: yes

      # The format for the variables is:
      #   env.<plugin>_<key>_graph

      # The format for the values is either yes or no.

      #### FIELDNAME.INFO ####

      # Attribute: {fieldname}.info
      # Value: html text
      # Type: optional
      # Description: Explanation on the data source in this field. The Info is
      #   displayed in the field description table on the detail web page of
      #   the graph.

      # The format for the variables is:
      #   env.<plugin>_<key>_info

      # The format for the values is a string containing the information to be
      # displayed in the graph's tooltip in Munin's interface.

      #### FIELDNAME.LABEL ####

      # Attribute: {fieldname}.label
      # Value: anything except # and \
      # Type: required
      # Description: The label used in the legend for the graph on the HTML
      #   page.

      # The format for the variables is:
      #   env.<plugin>_<key>_label

      # The format for the values is a string containing the label to be
      # displayed in the graph's legend in Munin's interface.
      # The label can contain any special characters except hash (#) or
      # or forward slash (\).

      #### FIELDNAME.MAX ####

      # Attribute: {fieldname}.max
      # Value: numerical of same data type as the field it belongs to.
      # Type: optional
      # Description: Sets a maximum value. If the fetched value is above "max",
      #   it will be discarded.

      # The format for the variables is:
      #   env.<plugin>_<key>_max

      # The format for the values is a numerical value.

      #### FIELDNAME.MIN ####

      # Attribute: {fieldname}.min
      # Value: numerical of same data type as the field it belongs to.
      # Type: optional
      # Description: Sets a minimum value. If the fetched value is below "min",
      #   it will be discarded.

      # The format for the variables is:
      #   env.<plugin>_<key>_min

      # The format for the values is a numerical value.

      #### FIELDNAME.TYPE ####

      # Attribute: {fieldname}.type
      # Value: GAUGE|COUNTER|DERIVE|ABSOLUTE
      # Type: optional
      # Description: Sets the RRD Data Source Type for this field.
      #   The values must be written in capitals. The type used may
      #   introduce restrictions for {fieldname.value}.
      # Default: GAUGE

      # The type of the field determines how the data is interpreted
      # by Munin's graphing engine. The type may be one of the following:
      #   GAUGE: A value that can go up and down, e.g. temperature, disk
      #   usage, etc.
      #   COUNTER: A value that only goes up, e.g. number of requests, bytes
      #   sent, etc.
      #   DERIVE: A value that can go up and down, but is derived from a
      #   counter, e.g. network traffic, etc.
      #   ABSOLUTE: A value that is an absolute number, e.g. number of users.

      # The format for the variables is:
      #   env.<plugin>_<key>_type

      # The format for the values is the type of graph to be used.
      # E.g. GAUGE, DERIVE, COUNTER, ABSOLUTE, etc.

      ### MISCELLANEOUS ###

      #### USER AND GROUP ####

      # The user these plugins should run as.
      # The pihole user has access to the CLI password by default.
      user pihole

      # The group these plugins should run as.
      # The pihole group has access to the CLI password by default.
      group pihole

      #### STATEFULNESS ####

      # API responses are cached to reduce the number of requests made to the
      # Pi-hole API. This variable determines the time (in seconds) before
      # cached responses are considered stale.
      env.state_ttl 240

      # The *_state_ttl variables can be used to override the default state_ttl
      # value on a per-plugin basis.

      # The default state ttl may be overridden by setting the
      # <plugin>_state_ttl variable to the desired value.

      # The session_ttl variable determines the time (in seconds) before cached
      # session IDs are considered stale.

      # This variable is only used if SESSION_CACHE is set to 1.
      env.session_ttl 300

The plugin can be configured manually, or via the command line using the admin command.

E.g.

  ./pihole_munin_ admin add <var> [<val>]
  ./pihole_munin_ admin remove <var>
  ./pihole_munin_ admin list

Variables SHOULD be entered without the env. prefix, and values SHOULD be without encapsulating quotation.

E.g.

  ./pihole_munin_ admin add graph_category dns
  ./pihole_munin_ admin add clients_active_warn 1:50
  ./pihole_munin_ admin add clients_total_warn 100

Sensitive variables such as the Application or Pi-hole Passwords get a special carve outs in the admin command.

Firstly, if entered without a value, both the 'app_password' and 'pihole_password' variables trigger a prompt to enter (and confirm) the password interactively.

E.g.

  ./pihole_munin_ admin add app_password
  ./pihole_munin_ admin add pihole_password

Secondly, if entered with the value 'nopassword', 'none' or 'null', the 'pihole_password' is set to an empty string (internally).

E.g.

  ./pihole_munin_ admin add pihole_password nopassword
  ./pihole_munin_ admin add pihole_password none
  ./pihole_munin_ admin add pihole_password null

=head1 AUTHOR

saint-lascivious (Hayden Pearce), 2025

=head1 LICENSE

GNU GPLv3
=cut

pihole_munin_plugin_id="$(printf "%s" "${0}" | sed -e 's/^.*pihole_munin_//')"

if [ -z "${pihole_munin_plugin_id}" ]; then
    pihole_munin_plugin_id="percent"
fi

password_to_use=""
password_set="0"

host="${host:-"127.0.0.1"}"
is_localhost="0"

cli_password="${cli_password:-/etc/pihole/cli_pw}"

if [ -t 1 ] && [ -n "${TERM}" ] && [ "${TERM}" != "dumb" ]; then
    TEXT_RED='\033[38;5;196m'
    TEXT_ORANGE='\033[38;5;208m'
    TEXT_YELLOW='\033[38;5;226m'
    TEXT_GREEN_HEADER='\033[38;5;46m'
    TEXT_GREEN='\033[38;5;2m'
    TEXT_LIGHTBLUE='\033[38;5;39m'
    TEXT_BLUE='\033[38;5;21m'
    #TEXT_INDIGO='\033[38;5;54m'
    TEXT_VIOLET='\033[38;5;93m'
    TEXT_MAGENTA='\033[38;5;201m'
    #TEXT_PINK='\033[38;5;213m'
    #TEXT_WHITE='\033[38;5;15m'
    TEXT_RESET='\033[0m'
else
    TEXT_RED=''
    TEXT_ORANGE=''
    TEXT_YELLOW=''
    TEXT_GREEN_HEADER=''
    TEXT_GREEN=''
    TEXT_LIGHTBLUE=''
    TEXT_BLUE=''
    #TEXT_INDIGO=''
    TEXT_VIOLET=''
    TEXT_MAGENTA=''
    #TEXT_PINK=''
    #TEXT_WHITE=''
    TEXT_RESET=''
fi

if [ -n "${proto+x}" ]; then
    proto_normalised=$(printf '%s' "${proto}" | tr '[:upper:]' '[:lower:]')
    case "${proto_normalised}" in
        "http"|"https")
            proto="${proto_normalised}"
        ;;
        *)
            printf "%s\n\n%s\n" \
                "  [❌] 'proto' is set to an invalid value." \
                "  [ℹ️] Please set the 'proto' variable to either 'http' or 'https'." >&2
            exit 1
        ;;
    esac
else
    proto="http"
fi

if [ -n "${app_password+x}" ]; then
    password_to_use="${app_password}"
    password_set="1"
elif [ -n "${pihole_password+set}" ]; then
    case "${pihole_password}" in
        "nopassword"|"none"|"null")
            password_to_use=""
            password_set="1"
        ;;
        "")
            printf "%s\n\n%s\n%s\n%s\n" \
                "  [❌] 'pihole_password' is set but empty." \
                "  [ℹ️] Please set the 'pihole_password' variable to a valid password, or set" \
                "       it to 'nopassword', 'none' or 'null' if your Pi-hole password is" \
                "       intentionally blank." >&2
            exit 1
        ;;
        *)
            password_to_use="${pihole_password}"
            password_set="1"
        ;;
    esac
else
    host_normalised=$(printf '%s' "$host" | tr '[:upper:]' '[:lower:]')
    case "${host_normalised}" in
        "127.0.0.1"|"localhost"|"localhost.localdomain"|"::1"|"ip6-localhost"|"ip6-loopback")
            is_localhost="1"
        ;;
    esac
    if [ -r "${cli_password}" ]; then
        if [ -s "${cli_password}" ]; then
            password_to_use=$(cat "${cli_password}")
            password_set="1"
        fi
    fi
fi

pihole_munin_term_cleanup() {
    stty sane
    printf '\n'
}

pihole_munin_abort_handler() {
    pihole_munin_term_cleanup
    printf "%b\n" "  [❌] ${TEXT_RED}Aborted (SIGINT).${TEXT_RESET}" >&2
    exit 130
}

if [ "${__FUCK_YOU_SHELLCHECK:-}" = "1" ]; then
    pihole_munin_term_cleanup
    pihole_munin_abort_handler
fi

trap pihole_munin_abort_handler INT TERM

pihole_munin_print() {
    key_val="${1}"
    colour_val="${2}"
    crit_val="${3}"
    draw_val="${4}"
    graph_val="${5}"
    info_val="${6}"
    label_val="${7}"
    max_val="${8}"
    min_val="${9}"
    type_val="${10}"
    warn_val="${11}"
    if ! printf %s "${key_val}" | grep -Eq '^[a-zA-Z_][a-zA-Z0-9_]*$'; then
        printf "%s\n" "  [❌] Invalid or missing key." >&2
        exit 1
    fi
    if [ -z "${label_val}" ] || printf %s "${label_val}" | grep -q '[#\\]'; then
        printf "%s\n" "  [❌] Invalid or missing label." >&2
        exit 1
    fi
    if [ -n "${colour_val}" ] && [ -n "$(printf '%s' "${colour_val}" | tr -d '[:space:]')" ]; then
        colour_val="${colour_val#\#}"
        if printf %s "${colour_val}" | grep -Eq '^[0-9A-Fa-f]{3}$'; then
            r=$(printf %s "${colour_val}" | cut -c1)
            g=$(printf %s "${colour_val}" | cut -c2)
            b=$(printf %s "${colour_val}" | cut -c3)
            colour_val="${r}${r}${g}${g}${b}${b}"
        fi
        if printf %s "${colour_val}" | grep -Eq '^[0-9A-Fa-f]{6}$'; then
            printf "%s.colour %s\n" "${key_val}" "${colour_val}"
        fi
    fi
    if [ -n "${crit_val}" ] && [ -n "$(printf '%s' "${crit_val}" | tr -d '[:space:]')" ]; then
        if printf %s "${crit_val}" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)?(:(-?[0-9]+(\.[0-9]*)?)?)?$|^(-?[0-9]+(\.[0-9]*)?):$'; then
            printf "%s.critical %s\n" "${key_val}" "${crit_val}"
        fi
    fi
    if [ -n "${draw_val}" ] && [ -n "$(printf '%s' "${draw_val}" | tr -d '[:space:]')" ]; then
        if printf %s "${draw_val}" | grep -Eq '^LINE[0-9]*$|^AREA$|^STACK$|^AREASTACK$|^LINESTACK[0-9]*$'; then
            printf "%s.draw %s\n" "${key_val}" "${draw_val}"
        fi
    fi
    if [ -n "${graph_val}" ] && [ -n "$(printf '%s' "${graph_val}" | tr -d '[:space:]')" ]; then
        case "${graph_val}" in
            "yes"|"no")
                printf "%s.graph %s\n" "${key_val}" "${graph_val}"
            ;;
        esac
    fi
    if [ -n "${info_val}" ] && [ -n "$(printf '%s' "${info_val}" | tr -d '[:space:]')" ]; then
        printf "%s.info %s\n" "${key_val}" "${info_val}"
    fi
    printf "%s.label %s\n" "${key_val}" "${label_val}"
    if [ -n "${max_val}" ] && [ -n "$(printf '%s' "${max_val}" | tr -d '[:space:]')" ]; then
        if printf %s "${max_val}" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)$'; then
            printf "%s.max %s\n" "${key_val}" "${max_val}"
        fi
    fi
    if [ -n "${min_val}" ] && [ -n "$(printf '%s' "${min_val}" | tr -d '[:space:]')" ]; then
        if printf %s "${min_val}" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)$'; then
            printf "%s.min %s\n" "${key_val}" "${min_val}"
        fi
    fi
    if [ -n "${type_val}" ] && [ -n "$(printf '%s' "${type_val}" | tr -d '[:space:]')" ]; then
        case "${type_val}" in
            "GAUGE"|"COUNTER"|"DERIVE"|"ABSOLUTE")
                printf "%s.type %s\n" "${key_val}" "${type_val}"
            ;;
        esac
    fi
    if [ -n "${warn_val}" ] && [ -n "$(printf '%s' "${warn_val}" | tr -d '[:space:]')" ]; then
        if printf %s "${warn_val}" | grep -Eq '^(-?[0-9]+(\.[0-9]*)?)?(:(-?[0-9]+(\.[0-9]*)?)?)?$|^(-?[0-9]+(\.[0-9]*)?):$'; then
            printf "%s.warning %s\n" "${key_val}" "${warn_val}"
        fi
    fi
}

proto="${proto:-http}"
port="${port:-80}"
api="${api:-/api}"

api_target="${proto}://${host}:${port}${api}"
auth_url="${auth_url:-/auth}"

auth_required="1"
already_authed="0"

pihole_munin_auth_check() {
    check_response=$(curl --connect-timeout 5 -k -s -w "%{response_code}" "${api_target}${auth_url}")
    check_json=$(printf "%s" "${check_response}" | head -c -3)
    check_code=$(printf "%s" "${check_response}" | tail -c 3)
    case "${check_code}" in
        "200")
            if printf "%s" "${check_json}" | jq -e '.session.valid == true' >/dev/null 2>&1; then
                auth_required="0"
                already_authed="1"
            fi
        ;;
        "401")
            :
        ;;
        *)
            printf "%s\n" "  [❌] Unepected response from the API, response code was '${check_code}'." >&2
            exit 1
        ;;
    esac
}

session_cache="${SESSION_CACHE:-0}"
epoch_offset=$(date +%s)

pihole_munin_auth() {
    session_file="${MUNIN_PLUGSTATE:-/tmp}/pihole_session.state"
    if [ "${session_cache}" -eq "1" ] && [ -r "${session_file}" ]; then
        session_time=$(head -n 1 "${session_file}")
        if [ $((epoch_offset - session_time)) -lt "${session_ttl:-300}" ]; then
            sid=$(tail -n 1 "${session_file}")
            return 0
        fi
    fi
    if [ "${password_set}" -ne "1" ]; then
        printf "%s\n" "  [❌] No App Password, Pi-hole Password or CLI Password." >&2
        exit 1
    fi
    auth_response=$(curl --connect-timeout 5 -k -s -S -o - -w "%{response_code}" "${api_target}${auth_url}" -d "{\"password\":\"${password_to_use}\"}")
    auth_response_json=$(printf "%s" "${auth_response}" | head -c -3)
    auth_response_code=$(printf "%s" "${auth_response}" | tail -c 3)
    if [ "${auth_response_code}" -ne "200" ]; then
        printf "%s\n" "  [❌] Could not get Session ID, response code was '${auth_response_code}'." >&2
        exit 1
    fi
    sid=$(printf "%s" "${auth_response_json}" | jq -r '.session.sid')
    if [ -n "${sid}" ] && [ "${session_cache}" -eq "1" ]; then
        { printf "%s\n%s\n" "${epoch_offset}" "${sid}"; } > "${session_file}"
        chmod 600 "${session_file}"
    fi
}

pihole_munin_logout() {
    [ -z "${sid}" ] && return 0
    [ "${session_cache}" -eq "1" ] && return 0
    logout_code=$(curl --connect-timeout 5 -k -s -S -o - -w "%{response_code}" -X DELETE "${api_target}${auth_url}" \
        -H "Accept: application/json" \
        -H "sid: ${sid}")
    case "${logout_code}" in
        "200"|"204")
            :
        ;;
        *)
            printf "%s\n" "  [❌] Logout failed, response code was '${logout_code}'.\n" >&2
            exit 1
        ;;
    esac
}

pihole_munin_safe_eval() {
    outvar="${1}"
    prefix="${2}"
    field_key="${3}"
    suffix="${4}"
    default="${5}"
    : "${default:=}"
    case "${field_key}" in
        ''|*[!a-zA-Z0-9_]*)
            eval "${outvar}=\"\${default}\""
            return
        ;;
    esac
    varname="${prefix}${field_key}${suffix}"
    cachevar="_cache_${varname}"
    eval "if [ \"\${${cachevar}+x}\" = x ]; then ${outvar}=\"\${${cachevar}}\"; return; fi"
    eval "__pihole_munin_tmp_val__=\"\${${varname}:-\${default}}\""
    eval "${cachevar}=\"\${__pihole_munin_tmp_val__}\""
    eval "${outvar}=\"\${__pihole_munin_tmp_val__}\""
}

pihole_munin_validate_json() {
    jq empty >/dev/null 2>&1
}

pihole_munin_api_url() {
    url="${api_target}${1}"
    if [ "${auth_required}" -eq "1" ] && [ -n "${sid}" ]; then
        sep="?"
        case "${url}" in
            *"\?"*)
                sep="&"
            ;;
        esac
        url="${url}${sep}sid=${sid}"
    fi
    printf "%s" "${url}"
}

pihole_munin_state_handler() {
    pihole_munin_statefile="${MUNIN_PLUGSTATE:-/tmp}/$(printf "%s" "${1}" | sed -E 's/[^a-zA-Z0-9]/_/g').state"
    if [ -f "${pihole_munin_statefile}" ]; then
        state_time=$(head -n 1 "${pihole_munin_statefile}")
        state_ttl="${state_ttl:-240}"
        pihole_munin_safe_eval state_ttl "" "${pihole_munin_plugin_id}_state_ttl" "" "${state_ttl}"
        if [ $((epoch_offset - state_time)) -lt "${state_ttl}" ]; then
            cached_response=$(tail -n +2 "${pihole_munin_statefile}")
            if printf "%s" "${cached_response}" | pihole_munin_validate_json; then
                printf "%s\n" "${cached_response}"
                return
            else
                rm -f "${pihole_munin_statefile}"
            fi
        fi
    fi
    did_auth="0"
    pihole_munin_auth_check
    if [ "${auth_required}" -eq "1" ] && [ "${already_authed}" -eq "0" ]; then
        pihole_munin_auth
        did_auth="1"
    fi
    response=$(curl --connect-timeout 5 -G -k -s "$(pihole_munin_api_url "${1}")") || return 1
    if ! printf "%s" "${response}" | pihole_munin_validate_json; then
        return 1
    fi
    {
        printf "%s\n" \
            "${epoch_offset}" \
            "${response}"
    } | tee "${pihole_munin_statefile}" | tail -n +2
    if [ "${auth_required}" -eq "1" ] && [ "${did_auth}" -eq "1" ] && [ "${session_cache}" -ne "1" ]; then
        pihole_munin_logout
    fi
}

graph="${graph:-"yes"}"
graph_args="${graph_args:-"--lower-limit 0"}"
graph_category="${graph_category:-"dns"}"
graph_draw="${graph_draw:-"LINE1"}"
graph_height="${graph_height:-"200"}"
graph_scale="${graph_scale:-"yes"}"
graph_type="${graph_type:-"GAUGE"}"
graph_width="${graph_width:-"400"}"

pihole_munin_graph_zero() {
    _graph_zero_key="${1}"
    _graph_zero_result=""
    pihole_munin_safe_eval _graph_zero_result "" "graph_zero" "_${_graph_zero_key}" ""
    if [ -n "${_graph_zero_result}" ]; then
        [ "${_graph_zero_result}" = "yes" ] && return 0 || return 1
    fi
    [ "${graph_zero:-"yes"}" = "yes" ]
}

pihole_munin_config_cache() {
    cache_colour=""
    cache_crit=""
    cache_draw=""
    cache_graph=""
    cache_info=""
    cache_label=""
    cache_max=""
    cache_min=""
    cache_type=""
    cache_warn=""
    printf "%s\n" \
        "graph ${graph_cache:-${graph}}" \
        "graph_args ${graph_args_cache:-${graph_args}}" \
        "graph_category ${graph_category_cache:-${graph_category}}" \
        "graph_height ${graph_height_cache:-${graph_height}}" \
        "graph_info ${graph_info_cache:-"This graph shows Pi-hole's cache, visit https://docs.pi-hole.net/ftldns/dns-cache/ for more information"}" \
        "graph_scale ${graph_scale_cache:-${graph_scale}}" \
        "graph_title ${graph_title_cache:-"Pi-hole cache"}" \
        "graph_vlabel ${graph_vlabel_cache:-"cached records"}" \
        "graph_width ${graph_width_cache:-${graph_width}}"
    cache_response=$(pihole_munin_state_handler "${info_metrics_url}") || exit 1
    for cache_key in "evicted" "expired" "immortal" "inserted"; do
        cache_value=$(printf '%s' "${cache_response}" | jq -r --arg k "${cache_key}" '.metrics.dns.cache[$k] // 0')
        if pihole_munin_graph_zero "cache" || [ "${cache_value}" -ne "0" ]; then
            pihole_munin_safe_eval cache_colour "cache_" "${cache_key}" "_colour" ""
            pihole_munin_safe_eval cache_crit "cache_" "${cache_key}" "_crit" ""
            pihole_munin_safe_eval cache_draw "cache_" "${cache_key}" "_draw" "${graph_draw}"
            pihole_munin_safe_eval cache_graph "cache_" "${cache_key}" "_graph" "yes"
            pihole_munin_safe_eval cache_info "cache_" "${cache_key}" "_info" "Pi-hole cache ${cache_key}"
            pihole_munin_safe_eval cache_label "cache_" "${cache_key}" "_label" "${cache_key}"
            pihole_munin_safe_eval cache_max "cache_" "${cache_key}" "_max" ""
            pihole_munin_safe_eval cache_min "cache_" "${cache_key}" "_min" "0"
            pihole_munin_safe_eval cache_type "cache_" "${cache_key}" "_type" "${graph_type}"
            pihole_munin_safe_eval cache_warn "cache_" "${cache_key}" "_warn" ""
            pihole_munin_print \
                "${cache_key}" \
                "${cache_colour}" \
                "${cache_crit}" \
                "${cache_draw}" \
                "${cache_graph}" \
                "${cache_info}" \
                "${cache_label}" \
                "${cache_max}" \
                "${cache_min}" \
                "${cache_type}" \
                "${cache_warn}"
        fi
    done
}

pihole_munin_config_cache_by_type() {
    cache_by_type_colour=""
    cache_by_type_crit=""
    cache_by_type_draw=""
    cache_by_type_graph=""
    cache_by_type_info=""
    cache_by_type_label=""
    cache_by_type_max=""
    cache_by_type_min=""
    cache_by_type_type=""
    cache_by_type_warn=""
    [ "${graph_total_cache_by_type:-total}" != "undef" ] && graph_total_line="graph_total ${graph_total_cache_by_type:-total}"
    printf "%s\n" \
        "graph ${graph_cache_by_type:-${graph}}" \
        "graph_args ${graph_args_cache_by_type:-${graph_args}}" \
        "graph_category ${graph_category_cache_by_type:-${graph_category}}" \
        "graph_height ${graph_height_cache_by_type:-${graph_height}}" \
        "graph_info ${graph_info_cache_by_type:-"This graph shows Pi-hole's cached records by type"}" \
        "graph_scale ${graph_scale_cache_by_type:-${graph_scale}}" \
        "graph_title ${graph_title_cache_by_type:-"Pi-hole cache by type"}" \
        ${graph_total_line:+"${graph_total_line}"} \
        "graph_vlabel ${graph_vlabel_cache_by_type:-"cached records"}" \
        "graph_width ${graph_width_cache_by_type:-${graph_width}}"
    cache_by_type_response=$(pihole_munin_state_handler "${info_metrics_url}") || exit 1
    printf "%s" "${cache_by_type_response}" | jq -c '.metrics.dns.cache.content[]' \
    | while read -r cache_by_type_entry; do
        cache_by_type_name=$(printf '%s' "${cache_by_type_entry}" | jq -r '.name')
        cache_by_type_valid=$(printf '%s' "${cache_by_type_entry}" | jq -r '.count.valid')
        cache_by_type_stale=$(printf '%s' "${cache_by_type_entry}" | jq -r '.count.stale')
        for cache_by_type_entry in "valid" "stale"; do
            case "${cache_by_type_entry}" in
                "valid")
                    cache_by_type_key="${cache_by_type_name}"
                    cache_by_type_default_label="${cache_by_type_name}"
                    cache_by_type_value="${cache_by_type_valid}"
                ;;
                "stale")
                    cache_by_type_key="${cache_by_type_name}_STALE"
                    cache_by_type_default_label="${cache_by_type_name} (stale)"
                    cache_by_type_value="${cache_by_type_stale}"
                ;;
            esac
            if pihole_munin_graph_zero "cache_by_type" || [ "${cache_by_type_value}" -ne "0" ]; then
                pihole_munin_safe_eval cache_by_type_colour "cache_by_type_" "${cache_by_type_key}" "_colour" ""
                pihole_munin_safe_eval cache_by_type_crit "cache_by_type_" "${cache_by_type_key}" "_crit" ""
                pihole_munin_safe_eval cache_by_type_draw "cache_by_type_" "${cache_by_type_key}" "_draw" "${graph_draw}"
                pihole_munin_safe_eval cache_by_type_graph "cache_by_type_" "${cache_by_type_key}" "_graph" "yes"
                pihole_munin_safe_eval cache_by_type_info "cache_by_type_" "${cache_by_type_key}" "_info" "Pi-hole cache type ${cache_by_type_default_label}"
                pihole_munin_safe_eval cache_by_type_label "cache_by_type_" "${cache_by_type_key}" "_label" "${cache_by_type_default_label}"
                pihole_munin_safe_eval cache_by_type_max "cache_by_type_" "${cache_by_type_key}" "_max" ""
                pihole_munin_safe_eval cache_by_type_min "cache_by_type_" "${cache_by_type_key}" "_min" "0"
                pihole_munin_safe_eval cache_by_type_type "cache_by_type_" "${cache_by_type_key}" "_type" "${graph_type}"
                pihole_munin_safe_eval cache_by_type_warn "cache_by_type_" "${cache_by_type_key}" "_warn" ""
                pihole_munin_print \
                    "${cache_by_type_key}" \
                    "${cache_by_type_colour}" \
                    "${cache_by_type_crit}" \
                    "${cache_by_type_draw}" \
                    "${cache_by_type_graph}" \
                    "${cache_by_type_info}" \
                    "${cache_by_type_label}" \
                    "${cache_by_type_max}" \
                    "${cache_by_type_min}" \
                    "${cache_by_type_type}" \
                    "${cache_by_type_warn}"
            fi
        done
    done
}

pihole_munin_config_clients() {
    printf "%s\n" \
        "graph ${graph_clients:-${graph}}" \
        "graph_args ${graph_args_clients:-${graph_args}}" \
        "graph_category ${graph_category_clients:-${graph_category}}" \
        "graph_height ${graph_height_clients:-${graph_height}}" \
        "graph_info ${graph_info_clients:-"This graph shows Pi-hole's active and total clients"}" \
        "graph_scale ${graph_scale_clients:-${graph_scale}}" \
        "graph_title ${graph_title_clients:-"Pi-hole clients"}" \
        "graph_vlabel ${graph_vlabel_clients:-"clients"}" \
        "graph_width ${graph_width_clients:-${graph_width}}"
    clients_response=$(pihole_munin_state_handler "${stats_summary_url}" ) || exit 1
    printf "%s" "${clients_response}" | jq -r '.clients | to_entries[] | "\(.key) \(.value)"' \
    | while read -r clients_key clients_value; do
        if pihole_munin_graph_zero "clients" || [ "${clients_value}" -ne "0" ]; then
            case "${clients_key}" in
                "active")
                    pihole_munin_print \
                        "${clients_key}" \
                        "${clients_active_colour:-}" \
                        "${clients_active_crit:-"1:50"}" \
                        "${clients_active_draw:-${graph_draw}}" \
                        "${clients_active_graph:-"yes"}" \
                        "${clients_active_info:-"Pi-hole active clients"}" \
                        "${clients_active_label:-"${clients_key}"}" \
                        "${clients_active_max:-""}" \
                        "${clients_active_min:-"0"}" \
                        "${clients_active_type:-${graph_type}}" \
                        "${clients_active_warn:-"100"}"
                ;;
                "total")
                    pihole_munin_print \
                        "${clients_key}" \
                        "${clients_total_colour:-}" \
                        "${clients_total_crit:-"200"}" \
                        "${clients_total_draw:-${graph_draw}}" \
                        "${clients_total_graph:-"yes"}" \
                        "${clients_total_info:-"Pi-hole total clients"}" \
                        "${clients_total_label:-"${clients_key}"}" \
                        "${clients_total_max:-""}" \
                        "${clients_total_min:-"0"}" \
                        "${clients_total_type:-${graph_type}}" \
                        "${clients_total_warn:-"1:100"}"
                ;;
            esac
        fi
    done
}

pihole_munin_config_dnsmasq() {
    dnsmasq_colour=""
    dnsmasq_crit=""
    dnsmasq_draw=""
    dnsmasq_graph=""
    dnsmasq_info=""
    dnsmasq_label=""
    dnsmasq_max=""
    dnsmasq_min=""
    dnsmasq_type=""
    dnsmasq_warn=""
    printf "%s\n" \
        "graph ${graph_dnsmasq:-${graph}}" \
        "graph_args ${graph_args_dnsmasq:-${graph_args}}" \
        "graph_category ${graph_category_dnsmasq:-${graph_category}}" \
        "graph_height ${graph_height_dnsmasq:-${graph_height}}" \
        "graph_info ${graph_info_dnsmasq:-"This graph shows various Pi-hole dnsmasq statistics"}" \
        "graph_scale ${graph_scale_dnsmasq:-${graph_scale}}" \
        "graph_title ${graph_title_dnsmasq:-"Pi-hole dnsmasq"}" \
        "graph_vlabel ${graph_vlabel_dnsmasq:-"count"}" \
        "graph_width ${graph_width_dnsmasq:-${graph_width}}"
    dnsmasq_response=$(pihole_munin_state_handler "${info_ftl_url}") || exit 1
    printf "%s" "${dnsmasq_response}" | jq -r '.ftl.dnsmasq | to_entries[] | "\(.key) \(.value)"' \
    | while read -r dnsmasq_key dnsmasq_value; do
        default_label=$(printf "%s" "${dnsmasq_key}" | sed 's/_/ /g')
        if pihole_munin_graph_zero "dnsmasq" || [ "${dnsmasq_value}" -ne "0" ]; then
            pihole_munin_safe_eval dnsmasq_colour "dnsmasq_" "${dnsmasq_key}" "_colour" ""
            pihole_munin_safe_eval dnsmasq_crit "dnsmasq_" "${dnsmasq_key}" "_crit" ""
            pihole_munin_safe_eval dnsmasq_draw "dnsmasq_" "${dnsmasq_key}" "_draw" "${graph_draw}"
            pihole_munin_safe_eval dnsmasq_graph "dnsmasq_" "${dnsmasq_key}" "_graph" "yes"
            pihole_munin_safe_eval dnsmasq_info "dnsmasq_" "${dnsmasq_key}" "_info" "Pi-hole dnsmasq ${default_label}"
            pihole_munin_safe_eval dnsmasq_label "dnsmasq_" "${dnsmasq_key}" "_label" "${default_label}"
            pihole_munin_safe_eval dnsmasq_max "dnsmasq_" "${dnsmasq_key}" "_max" ""
            pihole_munin_safe_eval dnsmasq_min "dnsmasq_" "${dnsmasq_key}" "_min" "0"
            pihole_munin_safe_eval dnsmasq_type "dnsmasq_" "${dnsmasq_key}" "_type" "${graph_type}"
            pihole_munin_safe_eval dnsmasq_warn "dnsmasq_" "${dnsmasq_key}" "_warn" ""
            pihole_munin_print \
                "${dnsmasq_key}" \
                "${dnsmasq_colour}" \
                "${dnsmasq_crit}" \
                "${dnsmasq_draw}" \
                "${dnsmasq_graph}" \
                "${dnsmasq_info}" \
                "${dnsmasq_label}" \
                "${dnsmasq_max}" \
                "${dnsmasq_min}" \
                "${dnsmasq_type}" \
                "${dnsmasq_warn}"
        fi
    done
}

pihole_munin_config_domains() {
    domains_domains_being_blocked_colour=""
    domains_domains_being_blocked_crit=""
    domains_domains_being_blocked_draw=""
    domains_domains_being_blocked_graph=""
    domains_domains_being_blocked_info=""
    domains_domains_being_blocked_label=""
    domains_domains_being_blocked_max=""
    domains_domains_being_blocked_min=""
    domains_domains_being_blocked_type=""
    domains_domains_being_blocked_warn=""
    printf "%s\n" \
        "graph ${graph_domains:-${graph}}" \
        "graph_args ${graph_args_domains:-${graph_args}}" \
        "graph_category ${graph_category_domains:-${graph_category}}" \
        "graph_height ${graph_height_domains:-${graph_height}}" \
        "graph_info ${graph_info_domains:-"This graph shows Pi-hole's domains being blocked"}" \
        "graph_scale ${graph_scale_domains:-${graph_scale}}" \
        "graph_title ${graph_title_domains:-"Pi-hole domains being blocked"}" \
        "graph_vlabel ${graph_vlabel_domains:-"domains being blocked"}" \
        "graph_width ${graph_width_domains:-${graph_width}}"
    pihole_munin_print \
        "domains_being_blocked" \
        "${domains_domains_being_blocked_colour:-}" \
        "${domains_domains_being_blocked_crit:-"1:10000000"}" \
        "${domains_domains_being_blocked_draw:-${graph_draw}}" \
        "${domains_domains_being_blocked_graph:-"yes"}" \
        "${domains_domains_being_blocked_info:-"Pi-hole domains being blocked"}" \
        "${domains_domains_being_blocked_label:-"domains being blocked"}" \
        "${domains_domains_being_blocked_max:-""}" \
        "${domains_domains_being_blocked_min:-"0"}" \
        "${domains_domains_being_blocked_type:-${graph_type}}" \
        "${domains_domains_being_blocked_warn:-"0:5000000"}"
}

pihole_munin_config_frequency() {
    printf "%s\n" \
        "graph ${graph_frequency:-${graph}}" \
        "graph_args ${graph_args_frequency:-${graph_args}}" \
        "graph_category ${graph_category_frequency:-${graph_category}}" \
        "graph_height ${graph_height_frequency:-${graph_height}}" \
        "graph_info ${graph_info_frequency:-"This graph shows Pi-hole's query frequency"}" \
        "graph_scale ${graph_scale_frequency:-${graph_scale}}" \
        "graph_title ${graph_title_frequency:-"Pi-hole query frequency"}" \
        "graph_vlabel ${graph_vlabel_frequency:-"queries per second"}" \
        "graph_width ${graph_width_frequency:-${graph_width}}"
    pihole_munin_print \
        "frequency" \
        "${frequency_frequency_colour:-}" \
        "${frequency_frequency_crit:-"100"}" \
        "${frequency_frequency_draw:-${graph_draw}}" \
        "${frequency_frequency_graph:-"yes"}" \
        "${frequency_frequency_info:-"Pi-hole query frequency (queries per second)"}" \
        "${frequency_frequency_label:-"frequency"}" \
        "${frequency_frequency_max:-}" \
        "${frequency_frequency_min:-"0"}" \
        "${frequency_frequency_type:-${graph_type}}" \
        "${frequency_frequency_warn:-"50"}"
}

pihole_munin_config_gravity() {
    gravity_colour=""
    gravity_crit=""
    gravity_draw=""
    gravity_graph=""
    gravity_info=""
    gravity_label=""
    gravity_max=""
    gravity_min=""
    gravity_type=""
    gravity_warn=""
    printf "%s\n" \
        "graph ${graph_gravity:-${graph}}" \
        "graph_args ${graph_args_gravity:-${graph_args}}" \
        "graph_category ${graph_category_gravity:-${graph_category}}" \
        "graph_height ${graph_height_gravity:-${graph_height}}" \
        "graph_info ${graph_info_gravity:-"This graph shows Pi-hole's gravity database statistics"}" \
        "graph_scale ${graph_scale_gravity:-${graph_scale}}" \
        "graph_title ${graph_title_gravity:-"Pi-hole gravity database"}" \
        "graph_vlabel ${graph_vlabel_gravity:-"count"}" \
        "graph_width ${graph_width_gravity:-${graph_width}}"
    gravity_response=$(pihole_munin_state_handler "${info_ftl_url}") || exit 1
    for gravity_key in \
        "domains_allowed" \
        "domains_denied" \
        "groups" \
        "lists" \
        "regex_allowed" \
        "regex_denied"; do
        default_label=$(printf '%s\n' "${gravity_key}" | sed 's/_/ /g')
        case "${gravity_key}" in
            "domains_"*)
                gravity_jq_key=".ftl.database.domains.${gravity_key#domains_}"
            ;;
            "regex_"*)
                gravity_jq_key=".ftl.database.regex.${gravity_key#regex_}"
            ;;
            *)
                gravity_jq_key=".ftl.database.${gravity_key}"
            ;;
        esac
        gravity_value=$(printf '%s' "${gravity_response}" | jq -r "${gravity_jq_key} // 0")
        if pihole_munin_graph_zero "gravity" || [ "${gravity_value}" -ne "0" ]; then
            pihole_munin_safe_eval gravity_colour "gravity_" "${gravity_key}" "_colour" ""
            pihole_munin_safe_eval gravity_crit "gravity_" "${gravity_key}" "_crit" ""
            pihole_munin_safe_eval gravity_draw "gravity_" "${gravity_key}" "_draw" "${graph_draw}"
            pihole_munin_safe_eval gravity_graph "gravity_" "${gravity_key}" "_graph" "yes"
            pihole_munin_safe_eval gravity_info "gravity_" "${gravity_key}" "_info" "Pi-hole gravity ${default_label}"
            pihole_munin_safe_eval gravity_label "gravity_" "${gravity_key}" "_label" "${default_label}"
            pihole_munin_safe_eval gravity_max "gravity_" "${gravity_key}" "_max" ""
            pihole_munin_safe_eval gravity_min "gravity_" "${gravity_key}" "_min" "0"
            pihole_munin_safe_eval gravity_type "gravity_" "${gravity_key}" "_type" "${graph_type}"
            pihole_munin_safe_eval gravity_warn "gravity_" "${gravity_key}" "_warn" ""
            pihole_munin_print \
                "${gravity_key}" \
                "${gravity_colour}" \
                "${gravity_crit}" \
                "${gravity_draw}" \
                "${gravity_graph}" \
                "${gravity_info}" \
                "${gravity_label}" \
                "${gravity_max}" \
                "${gravity_min}" \
                "${gravity_type}" \
                "${gravity_warn}"
        fi
    done
}

pihole_munin_config_overview() {
    overview_colour=""
    overview_crit=""
    overview_draw=""
    overview_graph=""
    overview_info=""
    overview_label=""
    overview_max=""
    overview_min=""
    overview_type=""
    overview_warn=""
    printf "%s\n" \
        "graph ${graph_overview:-${graph}}" \
        "graph_args ${graph_args_overview:-${graph_args}}" \
        "graph_category ${graph_category_overview:-${graph_category}}" \
        "graph_height ${graph_height_overview:-${graph_height}}" \
        "graph_info ${graph_info_overview:-"This graph shows an overview of Pi-hole's DNS traffic"}" \
        "graph_scale ${graph_scale_overview:-${graph_scale}}" \
        "graph_title ${graph_title_overview:-"Pi-hole overview"}" \
        "graph_vlabel ${graph_vlabel_overview:-"queries in (-) / replies out (+)"}" \
        "graph_width ${graph_width_overview:-${graph_width}}"
    overview_queries_by_type_response=$(pihole_munin_state_handler "${stats_query_types_url}" ) || exit 1
    overview_replies_by_type_response=$(pihole_munin_state_handler "${stats_summary_url}" ) || exit 1
    overview_all_types=$(
        { printf '%s\n' "${overview_queries_by_type_response}" | jq -r '.types | keys_unsorted[]'; \
            printf '%s\n' "${overview_replies_by_type_response}" | jq -r '.queries.replies | keys_unsorted[]'; \
        } | sort -u
    )
    for overview_record_type in ${overview_all_types}; do
        overview_query_val=$(printf '%s\n' "${overview_queries_by_type_response}" | jq -r --arg k "${overview_record_type}" '.types[$k] // 0')
        overview_reply_val=$(printf '%s\n' "${overview_replies_by_type_response}" | jq -r --arg k "${overview_record_type}" '.queries.replies[$k] // 0')
        if pihole_munin_graph_zero "overview" || [ "${overview_query_val}" -ne "0" ] || [ "${overview_reply_val}" -ne "0" ]; then
            pihole_munin_safe_eval overview_colour "overview_" "${overview_record_type}" "_colour" ""
            pihole_munin_safe_eval overview_crit "overview_" "${overview_record_type}" "_crit" ""
            pihole_munin_safe_eval overview_draw "overview_" "${overview_record_type}" "_draw" "${graph_draw}"
            pihole_munin_safe_eval overview_graph "overview_" "${overview_record_type}" "_graph" "yes"
            pihole_munin_safe_eval overview_info "overview_" "${overview_record_type}" "_info" "DNS Resource Record type ${overview_record_type}"
            pihole_munin_safe_eval overview_label "overview_" "${overview_record_type}" "_label" "${overview_record_type}"
            pihole_munin_safe_eval overview_max "overview_" "${overview_record_type}" "_max" ""
            pihole_munin_safe_eval overview_min "overview_" "${overview_record_type}" "_min" "0"
            pihole_munin_safe_eval overview_type "overview_" "${overview_record_type}" "_type" "${graph_type}"
            pihole_munin_safe_eval overview_warn "overview_" "${overview_record_type}" "_warn" ""
            pihole_munin_print \
                "query_${overview_record_type}" \
                "${overview_colour}" \
                "${overview_crit}" \
                "${overview_draw}" \
                "no" \
                "${overview_info}" \
                "${overview_label}" \
                "${overview_max}" \
                "${overview_min}" \
                "${overview_type}" \
                "${overview_warn}"
            pihole_munin_print \
                "${overview_record_type}" \
                "${overview_colour}" \
                "${overview_crit}" \
                "${overview_draw}" \
                "${overview_graph}" \
                "${overview_info}" \
                "${overview_label}" \
                "${overview_max}" \
                "${overview_min}" \
                "${overview_type}" \
                "${overview_warn}"
            printf "%s.negative %s\n" "${overview_record_type}" "query_${overview_record_type}"
        fi
    done
}

pihole_munin_config_percent() {
    printf "%s\n" \
        "graph ${graph_percent:-${graph}}" \
        "graph_args ${graph_args_percent:-"--upper-limit 100 --lower-limit 0"}" \
        "graph_category ${graph_category_percent:-${graph_category}}" \
        "graph_height ${graph_height_percent:-${graph_height}}" \
        "graph_info ${graph_info_percent:-"This graph shows Pi-hole's percent blocked query percentage"}" \
        "graph_scale ${graph_scale_percent:-${graph_scale}}" \
        "graph_title ${graph_title_percent:-"Pi-hole percent blocked"}" \
        "graph_vlabel ${graph_vlabel_percent:-"percent blocked"}" \
        "graph_width ${graph_width_percent:-${graph_width}}"
    pihole_munin_print \
        "percent_blocked" \
        "${percent_percent_blocked_colour:-}" \
        "${percent_percent_blocked_crit:-"90"}" \
        "${percent_percent_blocked_draw:-${graph_draw}}" \
        "${percent_percent_blocked_graph:-"yes"}" \
        "${percent_percent_blocked_info:-"Pi-hole percent blocked"}" \
        "${percent_percent_blocked_label:-"percent blocked"}" \
        "${percent_percent_blocked_max:-"100"}" \
        "${percent_percent_blocked_min:-"0"}" \
        "${percent_percent_blocked_type:-${graph_type}}" \
        "${percent_percent_blocked_warn:-"1:75"}"
}

pihole_munin_config_privacy() {
    printf "%s\n" \
        "graph ${graph_privacy:-${graph}}" \
        "graph_args ${graph_args_privacy:-"--upper-limit 3 --lower-limit 0"}" \
        "graph_category ${graph_category_privacy:-${graph_category}}" \
        "graph_height ${graph_height_privacy:-${graph_height}}" \
        "graph_info ${graph_info_privacy:-"This graph shows Pi-hole's privacy level, visit https://docs.pi-hole.net/ftldns/privacylevels/ for more information"}" \
        "graph_scale ${graph_scale_privacy:-${graph_scale}}" \
        "graph_title ${graph_title_privacy:-"Pi-hole privacy level"}" \
        "graph_vlabel ${graph_vlabel_privacy:-"show all / 1 / 2 / anonymous"}" \
        "graph_width ${graph_width_privacy:-${graph_width}}"
    pihole_munin_print \
        "privacy_level" \
        "${privacy_privacy_level_colour:-}" \
        "${privacy_privacy_level_crit:-"1:3"}" \
        "${privacy_privacy_level_draw:-${graph_draw}}" \
        "${privacy_privacy_level_graph:-"yes"}" \
        "${privacy_privacy_level_info:-"Pi-hole privacy level"}" \
        "${privacy_privacy_level_label:-"privacy level"}" \
        "${privacy_privacy_level_max:-"3"}" \
        "${privacy_privacy_level_min:-"0"}" \
        "${privacy_privacy_level_type:-${graph_type}}" \
        "${privacy_privacy_level_warn:-"3:3"}"
}

pihole_munin_config_queries() {
    queries_colour=""
    queries_crit=""
    queries_draw=""
    queries_graph=""
    queries_info=""
    queries_label=""
    queries_max=""
    queries_min=""
    queries_type=""
    queries_warn=""
    [ "${graph_total_queries:-total}" != "undef" ] && graph_total_line="graph_total ${graph_total_queries:-total}"
    printf "%s\n" \
        "graph ${graph_queries:-${graph}}" \
        "graph_args ${graph_args_queries:-${graph_args}}" \
        "graph_category ${graph_category_queries:-${graph_category}}" \
        "graph_height ${graph_height_queries:-${graph_height}}" \
        "graph_info ${graph_info_queries:-"This graph shows Pi-hole's queries"}" \
        "graph_scale ${graph_scale_queries:-${graph_scale}}" \
        "graph_title ${graph_title_queries:-"Pi-hole queries"}" \
        ${graph_total_line:+"${graph_total_line}"} \
        "graph_vlabel ${graph_vlabel_queries:-"queries"}" \
        "graph_width ${graph_width_queries:-${graph_width}}"
    queries_response=$(pihole_munin_state_handler "${stats_summary_url}") || exit 1
    for queries_key_label in \
        "blocked|queries blocked" \
        "cached|queries cached" \
        "forwarded|queries forwarded"; do
        queries_key=${queries_key_label%%|*}
        queries_default_info="Pi-hole ${queries_key_label#*|}"
        queries_default_label=$(printf "%s" "${queries_key}" | sed 's/_/ /g')
        queries_value=$(printf '%s' "${queries_response}" | jq -r --arg k "${queries_key}" '.queries[$k] // 0')
        if pihole_munin_graph_zero "queries" || [ "${queries_value}" -ne "0" ]; then
            pihole_munin_safe_eval queries_colour "queries_" "${queries_key}" "_colour" ""
            pihole_munin_safe_eval queries_crit "queries_" "${queries_key}" "_crit" ""
            pihole_munin_safe_eval queries_draw "queries_" "${queries_key}" "_draw" "${graph_draw}"
            pihole_munin_safe_eval queries_graph "queries_" "${queries_key}" "_graph" "yes"
            pihole_munin_safe_eval queries_info "queries_" "${queries_key}" "_info" "${queries_default_info}"
            pihole_munin_safe_eval queries_label "queries_" "${queries_key}" "_label" "${queries_default_label}"
            pihole_munin_safe_eval queries_max "queries_" "${queries_key}" "_max" ""
            pihole_munin_safe_eval queries_min "queries_" "${queries_key}" "_min" "0"
            pihole_munin_safe_eval queries_type "queries_" "${queries_key}" "_type" "${graph_type}"
            pihole_munin_safe_eval queries_warn "queries_" "${queries_key}" "_warn" ""
            pihole_munin_print \
                "${queries_key}" \
                "${queries_colour}" \
                "${queries_crit}" \
                "${queries_draw}" \
                "${queries_graph}" \
                "${queries_info}" \
                "${queries_label}" \
                "${queries_max}" \
                "${queries_min}" \
                "${queries_type}" \
                "${queries_warn}"
        fi
    done
}

pihole_munin_config_queries_by_status() {
    queries_by_status_colour=""
    queries_by_status_crit=""
    queries_by_status_draw=""
    queries_by_status_graph=""
    queries_by_status_info=""
    queries_by_status_label=""
    queries_by_status_max=""
    queries_by_status_min=""
    queries_by_status_type=""
    queries_by_status_warn=""
    [ "${graph_total_queries_by_status:-total}" != "undef" ] && graph_total_line="graph_total ${graph_total_queries_by_status:-total}"
    printf "%s\n" \
        "graph ${graph_queries_by_status:-${graph}}" \
        "graph_args ${graph_args_queries_by_status:-${graph_args}}" \
        "graph_category ${graph_category_queries_by_status:-${graph_category}}" \
        "graph_height ${graph_height_queries_by_status:-${graph_height}}" \
        "graph_info ${graph_info_queries_by_status:-"This graph shows Pi-hole's queries by status"}" \
        "graph_scale ${graph_scale_queries_by_status:-${graph_scale}}" \
        "graph_title ${graph_title_queries_by_status:-"Pi-hole queries by status"}" \
        ${graph_total_line:+"${graph_total_line}"} \
        "graph_vlabel ${graph_vlabel_queries_by_status:-"queries"}" \
        "graph_width ${graph_width_queries_by_status:-${graph_width}}"
    queries_by_status_response=$(pihole_munin_state_handler "${stats_summary_url}" ) || exit 1
    printf "%s" "${queries_by_status_response}" | jq -r '.queries.status | to_entries[] | "\(.key) \(.value)"' \
    | while read -r queries_by_status_key queries_by_status_value; do
        if pihole_munin_graph_zero "queries_by_status" || [ "${queries_by_status_value}" -ne "0" ]; then
            pihole_munin_safe_eval queries_by_status_colour "queries_by_status_" "${queries_by_status_key}" "_colour" ""
            pihole_munin_safe_eval queries_by_status_crit "queries_by_status_" "${queries_by_status_key}" "_crit" ""
            pihole_munin_safe_eval queries_by_status_draw "queries_by_status_" "${queries_by_status_key}" "_draw" "${graph_draw}"
            pihole_munin_safe_eval queries_by_status_graph "queries_by_status_" "${queries_by_status_key}" "_graph" "yes"
            pihole_munin_safe_eval queries_by_status_info "queries_by_status_" "${queries_by_status_key}" "_info" "Pi-hole query status ${queries_by_status_key}"
            pihole_munin_safe_eval queries_by_status_label "queries_by_status_" "${queries_by_status_key}" "_label" "${queries_by_status_key}"
            pihole_munin_safe_eval queries_by_status_max "queries_by_status_" "${queries_by_status_key}" "_max" ""
            pihole_munin_safe_eval queries_by_status_min "queries_by_status_" "${queries_by_status_key}" "_min" "0"
            pihole_munin_safe_eval queries_by_status_type "queries_by_status_" "${queries_by_status_key}" "_type" "${graph_type}"
            pihole_munin_safe_eval queries_by_status_warn "queries_by_status_" "${queries_by_status_key}" "_warn" ""
            pihole_munin_print \
                "${queries_by_status_key}" \
                "${queries_by_status_colour}" \
                "${queries_by_status_crit}" \
                "${queries_by_status_draw}" \
                "${queries_by_status_graph}" \
                "${queries_by_status_info}" \
                "${queries_by_status_label}" \
                "${queries_by_status_max}" \
                "${queries_by_status_min}" \
                "${queries_by_status_type}" \
                "${queries_by_status_warn}"
        fi
    done
}

pihole_munin_config_queries_by_type() {
    queries_by_type_colour=""
    queries_by_type_crit=""
    queries_by_type_draw=""
    queries_by_type_graph=""
    queries_by_type_info=""
    queries_by_type_label=""
    queries_by_type_max=""
    queries_by_type_min=""
    queries_by_type_type=""
    queries_by_type_warn=""
    [ "${graph_total_queries_by_type:-total}" != "undef" ] && graph_total_line="graph_total ${graph_total_queries_by_type:-total}"
    printf "%s\n" \
        "graph ${graph_queries_by_type:-${graph}}" \
        "graph_args ${graph_args_queries_by_type:-${graph_args}}" \
        "graph_category ${graph_category_queries_by_type:-${graph_category}}" \
        "graph_height ${graph_height_queries_by_type:-${graph_height}}" \
        "graph_info ${graph_info_queries_by_type:-"This graph shows Pi-hole's queries by record type"}" \
        "graph_scale ${graph_scale_queries_by_type:-${graph_scale}}" \
        "graph_title ${graph_title_queries_by_type:-"Pi-hole queries by type"}" \
        ${graph_total_line:+"${graph_total_line}"} \
        "graph_vlabel ${graph_vlabel_queries_by_type:-"queries"}" \
        "graph_width ${graph_width_queries_by_type:-${graph_width}}"
    queries_by_type_response=$(pihole_munin_state_handler "${stats_query_types_url}" ) || exit 1
    printf "%s" "${queries_by_type_response}" | jq -r '.types | to_entries[] | "\(.key) \(.value)"' \
    | while read -r queries_by_type_key queries_by_type_value; do
        if pihole_munin_graph_zero "queries_by_type" || [ "${queries_by_type_value}" -ne "0" ]; then
            pihole_munin_safe_eval queries_by_type_colour "queries_by_type_" "${queries_by_type_key}" "_colour" ""
            pihole_munin_safe_eval queries_by_type_crit "queries_by_type_" "${queries_by_type_key}" "_crit" ""
            pihole_munin_safe_eval queries_by_type_draw "queries_by_type_" "${queries_by_type_key}" "_draw" "${graph_draw}"
            pihole_munin_safe_eval queries_by_type_graph "queries_by_type_" "${queries_by_type_key}" "_graph" "yes"
            pihole_munin_safe_eval queries_by_type_info "queries_by_type_" "${queries_by_type_key}" "_info" "Pi-hole query type ${queries_by_type_key}"
            pihole_munin_safe_eval queries_by_type_label "queries_by_type_" "${queries_by_type_key}" "_label" "${queries_by_type_key}"
            pihole_munin_safe_eval queries_by_type_max "queries_by_type_" "${queries_by_type_key}" "_max" ""
            pihole_munin_safe_eval queries_by_type_min "queries_by_type_" "${queries_by_type_key}" "_min" "0"
            pihole_munin_safe_eval queries_by_type_type "queries_by_type_" "${queries_by_type_key}" "_type" "${graph_type}"
            pihole_munin_safe_eval queries_by_type_warn "queries_by_type_" "${queries_by_type_key}" "_warn" ""
            pihole_munin_print \
                "${queries_by_type_key}" \
                "${queries_by_type_colour}" \
                "${queries_by_type_crit}" \
                "${queries_by_type_draw}" \
                "${queries_by_type_graph}" \
                "${queries_by_type_info}" \
                "${queries_by_type_label}" \
                "${queries_by_type_max}" \
                "${queries_by_type_min}" \
                "${queries_by_type_type}" \
                "${queries_by_type_warn}"
        fi
    done
}

pihole_munin_config_replies() {
    replies_colour=""
    replies_crit=""
    replies_draw=""
    replies_graph=""
    replies_info=""
    replies_label=""
    replies_max=""
    replies_min=""
    replies_type=""
    replies_warn=""
    [ "${graph_total_replies:-total}" != "undef" ] && graph_total_line="graph_total ${graph_total_replies:-total}"
    printf "%s\n" \
        "graph ${graph_replies:-${graph}}" \
        "graph_args ${graph_args_replies:-${graph_args}}" \
        "graph_category ${graph_category_replies:-${graph_category}}" \
        "graph_height ${graph_height_replies:-${graph_height}}" \
        "graph_info ${graph_info_replies:-"This graph shows Pi-hole's replies"}" \
        "graph_scale ${graph_scale_replies:-${graph_scale}}" \
        "graph_title ${graph_title_replies:-"Pi-hole replies"}" \
        ${graph_total_line:+"${graph_total_line}"} \
        "graph_vlabel ${graph_vlabel_replies:-"replies"}" \
        "graph_width ${graph_width_replies:-${graph_width}}"
    replies_response=$(pihole_munin_state_handler "${info_metrics_url}" ) || exit 1
    for replies_key in "auth" "forwarded" "local" "optimized" "unanswered"; do
        replies_value=$(printf '%s' "${replies_response}" | jq -r --arg k "${replies_key}" '.metrics.dns.replies[$k] // 0')
        if pihole_munin_graph_zero "replies" || [ "${replies_value}" -ne "0" ]; then
            pihole_munin_safe_eval replies_colour "replies_" "${replies_key}" "_colour" ""
            pihole_munin_safe_eval replies_crit "replies_" "${replies_key}" "_crit" ""
            pihole_munin_safe_eval replies_draw "replies_" "${replies_key}" "_draw" "${graph_draw}"
            pihole_munin_safe_eval replies_graph "replies_" "${replies_key}" "_graph" "yes"
            pihole_munin_safe_eval replies_info "replies_" "${replies_key}" "_info" "Pi-hole reply ${replies_key}"
            pihole_munin_safe_eval replies_label "replies_" "${replies_key}" "_label" "${replies_key}"
            pihole_munin_safe_eval replies_max "replies_" "${replies_key}" "_max" ""
            pihole_munin_safe_eval replies_min "replies_" "${replies_key}" "_min" "0"
            pihole_munin_safe_eval replies_type "replies_" "${replies_key}" "_type" "${graph_type}"
            pihole_munin_safe_eval replies_warn "replies_" "${replies_key}" "_warn" ""
            pihole_munin_print \
                "${replies_key}" \
                "${replies_colour}" \
                "${replies_crit}" \
                "${replies_draw}" \
                "${replies_graph}" \
                "${replies_info}" \
                "${replies_label}" \
                "${replies_max}" \
                "${replies_min}" \
                "${replies_type}" \
                "${replies_warn}"
        fi
    done
}

pihole_munin_config_replies_by_type() {
    replies_by_type_colour=""
    replies_by_type_crit=""
    replies_by_type_draw=""
    replies_by_type_graph=""
    replies_by_type_info=""
    replies_by_type_label=""
    replies_by_type_max=""
    replies_by_type_min=""
    replies_by_type_type=""
    replies_by_type_warn=""
    [ "${graph_total_replies_by_type:-total}" != "undef" ] && graph_total_line="graph_total ${graph_total_replies_by_type:-total}"
    printf "%s\n" \
        "graph ${graph_replies_by_type:-${graph}}" \
        "graph_args ${graph_args_replies_by_type:-${graph_args}}" \
        "graph_category ${graph_category_replies_by_type:-${graph_category}}" \
        "graph_height ${graph_height_replies_by_type:-${graph_height}}" \
        "graph_info ${graph_info_replies_by_type:-"This graph shows Pi-hole's replies by record type"}" \
        "graph_scale ${graph_scale_replies_by_type:-${graph_scale}}" \
        "graph_title ${graph_title_replies_by_type:-"Pi-hole replies by type"}" \
        ${graph_total_line:+"${graph_total_line}"} \
        "graph_vlabel ${graph_vlabel_replies_by_type:-"replies"}" \
        "graph_width ${graph_width_replies_by_type:-${graph_width}}"
    replies_by_type_response=$(pihole_munin_state_handler "${stats_summary_url}") || exit 1
    printf "%s" "${replies_by_type_response}" | jq -r '.queries.replies | to_entries[] | "\(.key) \(.value)"' \
    | while read -r replies_by_type_key replies_by_type_value; do
        if pihole_munin_graph_zero "replies_by_type" || [ "${replies_by_type_value}" -ne "0" ]; then
            pihole_munin_safe_eval replies_by_type_colour "replies_by_type_" "${replies_by_type_key}" "_colour" ""
            pihole_munin_safe_eval replies_by_type_crit "replies_by_type_" "${replies_by_type_key}" "_crit" ""
            pihole_munin_safe_eval replies_by_type_draw "replies_by_type_" "${replies_by_type_key}" "_draw" "${graph_draw}"
            pihole_munin_safe_eval replies_by_type_graph "replies_by_type_" "${replies_by_type_key}" "_graph" "yes"
            pihole_munin_safe_eval replies_by_type_info "replies_by_type_" "${replies_by_type_key}" "_info" "Pi-hole reply type ${replies_by_type_key}"
            pihole_munin_safe_eval replies_by_type_label "replies_by_type_" "${replies_by_type_key}" "_label" "${replies_by_type_key}"
            pihole_munin_safe_eval replies_by_type_max "replies_by_type_" "${replies_by_type_key}" "_max" ""
            pihole_munin_safe_eval replies_by_type_min "replies_by_type_" "${replies_by_type_key}" "_min" "0"
            pihole_munin_safe_eval replies_by_type_type "replies_by_type_" "${replies_by_type_key}" "_type" "${graph_type}"
            pihole_munin_safe_eval replies_by_type_warn "replies_by_type_" "${replies_by_type_key}" "_warn" ""
            pihole_munin_print \
                "${replies_by_type_key}" \
                "${replies_by_type_colour}" \
                "${replies_by_type_crit}" \
                "${replies_by_type_draw}" \
                "${replies_by_type_graph}" \
                "${replies_by_type_info}" \
                "${replies_by_type_label}" \
                "${replies_by_type_max}" \
                "${replies_by_type_min}" \
                "${replies_by_type_type}" \
                "${replies_by_type_warn}"
        fi
    done
}

pihole_munin_config_status() {
    printf "%s\n" \
        "graph ${graph_status:-${graph}}" \
        "graph_args ${graph_args_status:-"--lower-limit -1 --upper-limit 1"}" \
        "graph_height ${graph_height_status:-${graph_height}}" \
        "graph_info ${graph_info_status:-"This graph shows Pi-hole's blocking status"}" \
        "graph_category ${graph_category_status:-${graph_category}}" \
        "graph_scale ${graph_scale_status:-${graph_scale}}" \
        "graph_title ${graph_title_status:-"Pi-hole status"}" \
        "graph_vlabel ${graph_vlabel_status:-"unknown / disabled / enabled"}" \
        "graph_width ${graph_width_status:-${graph_width}}"
    pihole_munin_print \
        "blocking_status" \
        "${status_blocking_status_colour:-}" \
        "${status_blocking_status_crit:-"0:1"}" \
        "${status_blocking_status_draw:-${graph_draw}}" \
        "${status_blocking_status_graph:-"yes"}" \
        "${status_blocking_status_info:-"Pi-hole blocking status"}" \
        "${status_blocking_status_label:-"blocking status"}" \
        "${status_blocking_status_max:-"1"}" \
        "${status_blocking_status_min:-"-1"}" \
        "${status_blocking_status_type:-${graph_type}}" \
        "${status_blocking_status_warn:-"1:1"}"
}

pihole_munin_config_unique() {
    printf "%s\n" \
        "graph ${graph_unique:-${graph}}" \
        "graph_args ${graph_args_unique:-${graph_args}}" \
        "graph_category ${graph_category_unique:-${graph_category}}" \
        "graph_height ${graph_height_unique:-${graph_height}}" \
        "graph_info ${graph_info_unique:-"This graph shows the number of unique domains queried by Pi-hole"}" \
        "graph_scale ${graph_scale_unique:-${graph_scale}}" \
        "graph_title ${graph_title_unique:-"Pi-hole unique domains"}" \
        "graph_vlabel ${graph_vlabel_unique:-"unique domains"}" \
        "graph_width ${graph_width_unique:-${graph_width}}"
    pihole_munin_print \
        "unique_domains" \
        "${unique_unique_domains_colour:-}" \
        "${unique_unique_domains_crit:-"1:10000"}" \
        "${unique_unique_domains_draw:-${graph_draw}}" \
        "${unique_unique_domains_graph:-"yes"}" \
        "${unique_unique_domains_info:-"Pi-hole unique domains"}" \
        "${unique_unique_domains_label:-"unique domains"}" \
        "${unique_unique_domains_max:-}" \
        "${unique_unique_domains_min:-"0"}" \
        "${unique_unique_domains_type:-${graph_type}}" \
        "${unique_unique_domains_warn:-"0:5000"}"
}

pihole_munin_check_dependencies() {
    plugin_dependencies="curl jq mktemp"
    for plugin_dependency in ${plugin_dependencies}; do
        if ! command -v "${plugin_dependency}" >/dev/null 2>&1; then
            printf "%s\n" "  [❌] '${plugin_dependency}' is not installed or not in PATH." >&2
            return 1
        fi
    done
}

pihole_munin_config_handler() {
    pihole_munin_check_dependencies || exit 1
    case "${pihole_munin_plugin_id}" in
        "cache")
            pihole_munin_config_cache
        ;;
        "cache_by_type")
            pihole_munin_config_cache_by_type
        ;;
        "clients")
            pihole_munin_config_clients
        ;;
        "dnsmasq")
            pihole_munin_config_dnsmasq
        ;;
        "domains")
            pihole_munin_config_domains
        ;;
        "frequency")
            pihole_munin_config_frequency
        ;;
        "gravity")
            pihole_munin_config_gravity
        ;;
        "overview")
            pihole_munin_config_overview
        ;;
        "percent")
            pihole_munin_config_percent
        ;;
        "privacy")
            pihole_munin_config_privacy
        ;;
        "queries")
            pihole_munin_config_queries
        ;;
        "queries_by_status")
            pihole_munin_config_queries_by_status
        ;;
        "queries_by_type")
            pihole_munin_config_queries_by_type
        ;;
        "replies")
            pihole_munin_config_replies
        ;;
        "replies_by_type")
            pihole_munin_config_replies_by_type
        ;;
        "status")
            pihole_munin_config_status
        ;;
        "unique")
            pihole_munin_config_unique
        ;;
    esac
}

dns_blocking_url="${dns_blocking_url:-/dns/blocking}"
info_ftl_url="${info_ftl_url:-/info/ftl}"
info_metrics_url="${info_metrics_url:-/info/metrics}"
stats_query_types_url="${stats_query_types_url:-/stats/query_types}"
stats_summary_url="${stats_summary_url:-/stats/summary}"

pihole_munin_fetch_cache() {
    cache_response=$(pihole_munin_state_handler "${info_metrics_url}" ) || exit 1
    for cache_key in "evicted" "expired" "immortal" "inserted"; do
        cache_value=$(printf '%s' "${cache_response}" | jq -r --arg k "${cache_key}" '.metrics.dns.cache[$k] // 0')
        if pihole_munin_graph_zero "cache" || [ "${cache_value}" -ne "0" ]; then
            printf "%s.value %s\n" "${cache_key}" "${cache_value}"
        fi
    done
}

pihole_munin_fetch_cache_by_type() {
    cache_by_type_response=$(pihole_munin_state_handler "${info_metrics_url}" ) || exit 1
    printf "%s" "${cache_by_type_response}" | jq -c '.metrics.dns.cache.content[]' \
    | while read -r cache_by_type_entry; do
        cache_by_type_name=$(printf '%s' "${cache_by_type_entry}" | jq -r '.name')
        cache_by_type_valid=$(printf '%s' "${cache_by_type_entry}" | jq -r '.count.valid')
        cache_by_type_stale=$(printf '%s' "${cache_by_type_entry}" | jq -r '.count.stale')
        for cache_by_type_entry in "valid" "stale"; do
            case "${cache_by_type_entry}" in
                "valid")
                    cache_by_type_key="${cache_by_type_name}"
                    cache_by_type_value="${cache_by_type_valid}"
                ;;
                "stale")
                    cache_by_type_key="${cache_by_type_name}_STALE"
                    cache_by_type_value="${cache_by_type_stale}"
                ;;
            esac
            if pihole_munin_graph_zero "cache_by_type" || [ "${cache_by_type_value}" -ne "0" ]; then
                printf "%s.value %s\n" "${cache_by_type_key}" "${cache_by_type_value}"
            fi
        done
    done
}

pihole_munin_fetch_clients() {
    clients_response=$(pihole_munin_state_handler "${stats_summary_url}" ) || exit 1
    printf "%s" "${clients_response}" | jq -r '.clients | to_entries[] | "\(.key) \(.value)"' \
    | while read -r clients_key clients_value; do
        if pihole_munin_graph_zero "clients" || [ "${clients_value}" -ne "0" ]; then
            printf "%s.value %s\n" "${clients_key}" "${clients_value}"
        fi
    done
}

pihole_munin_fetch_dnsmasq() {
    dnsmasq_response=$(pihole_munin_state_handler "${info_ftl_url}" ) || exit 1
    printf "%s" "${dnsmasq_response}" | jq -r '.ftl.dnsmasq | to_entries[] | "\(.key) \(.value)"' \
    | while read -r dnsmasq_key dnsmasq_value; do
        if pihole_munin_graph_zero "dnsmasq" || [ "${dnsmasq_value}" -ne "0" ]; then
            printf "%s.value %s\n" "${dnsmasq_key}" "${dnsmasq_value}"
        fi
    done
}

pihole_munin_fetch_domains() {
    domains_response=$(pihole_munin_state_handler "${stats_summary_url}" ) || exit 1
    printf "%s" "${domains_response}" | jq -r '.gravity | "\("domains_being_blocked.value") \(.domains_being_blocked)"'
}

pihole_munin_fetch_frequency() {
    frequency_response=$(pihole_munin_state_handler "${stats_summary_url}") || exit 1
    printf "%s" "${frequency_response}" | jq -r '.queries | "frequency.value \(.frequency | tonumber | . * 100 | round | . / 100)"'
}

pihole_munin_fetch_gravity() {
    gravity_response=$(pihole_munin_state_handler "${info_ftl_url}") || exit 1
    for gravity_key in "groups" "lists" "domains_allowed" "domains_denied" "regex_allowed" "regex_denied"; do
        case "${gravity_key}" in
            "domains_"*)
                gravity_jq_key=".ftl.database.domains.${gravity_key#domains_}"
            ;;
            "regex_"*)
                gravity_jq_key=".ftl.database.regex.${gravity_key#regex_}"
            ;;
            *)
                gravity_jq_key=".ftl.database.${gravity_key}"
            ;;
        esac
        gravity_value=$(printf '%s' "${gravity_response}" | jq -r "${gravity_jq_key} // 0")
        if pihole_munin_graph_zero "gravity" || [ "${gravity_value}" -ne "0" ]; then
            printf "%s.value %s\n" "${gravity_key}" "${gravity_value}"
        fi
    done
}

pihole_munin_fetch_overview() {
    overview_queries_by_type_response=$(pihole_munin_state_handler "${stats_query_types_url}" ) || exit 1
    overview_replies_by_type_response=$(pihole_munin_state_handler "${stats_summary_url}" ) || exit 1
    overview_all_types=$(
        { printf '%s\n' "${overview_queries_by_type_response}" | jq -r '.types | keys_unsorted[]'; \
            printf '%s\n' "${overview_replies_by_type_response}" | jq -r '.queries.replies | keys_unsorted[]'; \
        } | sort -u
    )
    for overview_record_type in ${overview_all_types}; do
        overview_query_val=$(printf '%s\n' "${overview_queries_by_type_response}" | jq -r --arg k "${overview_record_type}" '.types[$k] // 0')
        overview_reply_val=$(printf '%s\n' "${overview_replies_by_type_response}" | jq -r --arg k "${overview_record_type}" '.queries.replies[$k] // 0')
        if pihole_munin_graph_zero "overview" || [ "${overview_query_val}" -ne "0" ] || [ "${overview_reply_val}" -ne "0" ]; then
            printf "query_%s.value %s\n" "${overview_record_type}" "${overview_query_val}"
            printf "%s.value %s\n" "${overview_record_type}" "${overview_reply_val}"
        fi
    done
}

pihole_munin_fetch_percent() {
    percent_response=$(pihole_munin_state_handler "${stats_summary_url}" ) || exit 1
    printf "%s" "${percent_response}" | jq -r '.queries | "percent_blocked.value \(.percent_blocked | tonumber | . * 100 | round / 100)"'
}

pihole_munin_fetch_privacy() {
    ftl_response=$(pihole_munin_state_handler "${info_ftl_url}" ) || exit 1
    printf "%s" "${ftl_response}" | jq -r '"privacy_level.value \(.ftl.privacy_level)"'
}

pihole_munin_fetch_queries() {
    queries_response=$(pihole_munin_state_handler "${stats_summary_url}") || exit 1
    for queries_key in "blocked" "cached" "forwarded"; do
        queries_value=$(printf '%s' "${queries_response}" | jq -r --arg k "${queries_key}" '.queries[$k] // 0')
        if pihole_munin_graph_zero "queries" || [ "${queries_value}" -ne "0" ]; then
            printf "%s.value %s\n" "${queries_key}" "${queries_value}"
        fi
    done
}

pihole_munin_fetch_queries_by_status() {
    queries_by_status_response=$(pihole_munin_state_handler "${stats_summary_url}" ) || exit 1
    printf "%s" "${queries_by_status_response}" | jq -r '.queries.status | to_entries[] | "\(.key) \(.value)"' \
    | while read -r queries_by_status_key queries_by_status_value; do
        if pihole_munin_graph_zero "queries_by_status" || [ "${queries_by_status_value}" -ne "0" ]; then
            printf "%s.value %s\n" "${queries_by_status_key}" "${queries_by_status_value}"
        fi
    done
}

pihole_munin_fetch_queries_by_type() {
    queries_by_type_response=$(pihole_munin_state_handler "${stats_query_types_url}" ) || exit 1
    printf "%s" "${queries_by_type_response}" | jq -r '.types | to_entries[] | "\(.key) \(.value)"' \
    | while read -r queries_by_type_key queries_by_type_value; do
        if pihole_munin_graph_zero "queries_by_type" || [ "${queries_by_type_value}" -ne "0" ]; then
            printf "%s.value %s\n" "${queries_by_type_key}" "${queries_by_type_value}"
        fi
    done
}

pihole_munin_fetch_replies() {
    replies_response=$(pihole_munin_state_handler "${info_metrics_url}") || exit 1
    for replies_key in "auth" "forwarded" "local" "optimized" "unanswered"; do
        replies_value=$(printf '%s\n' "${replies_response}" \
            | jq -r --arg k "${replies_key}" '.metrics.dns.replies[$k] // 0')
        if pihole_munin_graph_zero "replies" || [ "${replies_value}" -ne "0" ]; then
            printf "%s.value %s\n" "${replies_key}" "${replies_value}"
        fi
    done
}

pihole_munin_fetch_replies_by_type() {
    replies_by_type_response=$(pihole_munin_state_handler "${stats_summary_url}" ) || exit 1
    printf "%s" "${replies_by_type_response}" | jq -r '.queries.replies | to_entries[] | "\(.key) \(.value)"' \
    | while read -r replies_by_type_key replies_by_type_value; do
        if pihole_munin_graph_zero "replies_by_type" || [ "${replies_by_type_value}" -ne "0" ]; then
            printf "%s.value %s\n" "${replies_by_type_key}" "${replies_by_type_value}"
        fi
    done
}

pihole_munin_fetch_status() {
    status_response=$(pihole_munin_state_handler "${dns_blocking_url}" ) || exit 1
    printf "%s" "${status_response}" | jq -r '.blocking' \
    | while read -r status_key; do
        case "${status_key}" in
            "enabled")
                status_value="1"
            ;;
            "disabled")
                status_value="0"
            ;;
            *)
                status_value="-1"
            ;;
        esac
        printf "blocking_status.value %s\n" "${status_value}"
    done
}

pihole_munin_fetch_unique() {
    unique_response=$(pihole_munin_state_handler "${stats_summary_url}") || exit 1
    printf "%s" "${unique_response}" | jq -r '.queries | "unique_domains.value \(.unique_domains)"'
}

pihole_munin_fetch_handler() {
    case "${pihole_munin_plugin_id}" in
        "cache")
            pihole_munin_fetch_cache
        ;;
        "cache_by_type")
            pihole_munin_fetch_cache_by_type
        ;;
        "clients")
            pihole_munin_fetch_clients
        ;;
        "dnsmasq")
            pihole_munin_fetch_dnsmasq
        ;;
        "domains")
            pihole_munin_fetch_domains
        ;;
        "frequency")
            pihole_munin_fetch_frequency
        ;;
        "gravity")
            pihole_munin_fetch_gravity
        ;;
        "overview")
            pihole_munin_fetch_overview
        ;;
        "percent")
            pihole_munin_fetch_percent
        ;;
        "privacy")
            pihole_munin_fetch_privacy
        ;;
        "queries")
            pihole_munin_fetch_queries
        ;;
        "queries_by_status")
            pihole_munin_fetch_queries_by_status
        ;;
        "queries_by_type")
            pihole_munin_fetch_queries_by_type
        ;;
        "replies")
            pihole_munin_fetch_replies
        ;;
        "replies_by_type")
            pihole_munin_fetch_replies_by_type
        ;;
        "status")
            pihole_munin_fetch_status
        ;;
        "unique")
            pihole_munin_fetch_unique
        ;;
    esac
}

pihole_munin_autoconf() {
    if ! pihole_munin_check_dependencies >/dev/null 2>&1; then
        printf "no (missing dependencies)\n"
        exit 0
    fi
    if { [ "${is_localhost}" -eq "1" ]; } && ! command -v pihole >/dev/null 2>&1; then
        printf "no (not a Pi-hole host)\n"
        exit 0
    fi
    if [ "${password_set}" -eq "0" ]; then
        printf "no (no password set)\n"
        exit 0
    fi
    printf "yes\n"
}

plugins="${PLUGINS:-cache cache_by_type clients dnsmasq domains frequency gravity overview percent privacy queries queries_by_status queries_by_type replies replies_by_type status unique}"

pihole_munin_suggest() {
    for plugin in ${plugins}; do
        printf "%s\n" "${plugin}"
    done
}

pihole_munin_root() {
    [ "$(id -u)" -eq "0" ] && return 0
    exec sudo "${0}" "$@" || { printf "%s\n" "  [❌] Failed to acquire root privileges." >&2; exit 1; }
}

plugins_available="${PLUGINS_AVAILABLE:-/usr/share/munin/plugins}"
plugins_enabled="${PLUGINS_ENABLED:-/etc/munin/plugins}"
plugins_config="${PLUGINS_CONFIG:-/etc/munin/plugin-conf.d}"
pihole_munin_path="${plugins_available}/pihole_munin_"

pihole_munin_header() {
    timestamp=$(date --rfc-3339=seconds)
    printf "%b\n%b\n%b\n%b\n%b\n%b\n\n%b\n\n%b\n\n" \
        "${TEXT_RED}          _  _             _                                     _${TEXT_RESET}" \
        "${TEXT_ORANGE}   _ __  (_)| |__    ___  | |  ___      _ __ ___   _   _  _ __  (_) _ __${TEXT_RESET}" \
        "${TEXT_YELLOW}  | '_ \\ | || '_ \\  / _ \\ | | / _ \\    | '_ \` _ \\ | | | || '_ \\ | || '_ \\\\${TEXT_RESET}" \
        "${TEXT_GREEN_HEADER}  | |_) || || | | || (_) || ||  __/ __ | | | | | || |_| || | | || || | | | __${TEXT_RESET}" \
        "${TEXT_LIGHTBLUE}  | .__/ |_||_| |_| \\___/ |_| \\___||__||_| |_| |_| \\__,_||_| |_||_||_| |_||__|${TEXT_RESET}" \
        "${TEXT_BLUE}  |_|${TEXT_RESET}" \
        "${TEXT_VIOLET}  [📦] ${pihole_munin_version}${TEXT_RESET}" \
        "${TEXT_MAGENTA}  [⏱️] ${timestamp}${TEXT_RESET}"
}

pihole_munin_install() {
    pihole_munin_root "$@"
    pihole_munin_header
    dry_run="0"
    plugins_to_clean="0"
    for option in "$@"; do
        case "${option}" in
            "-D"|"dry"|"--dry-run")
                dry_run="1"
            ;;
        esac
    done
    printf "  %s Checking required directories...\n" \
        "$( [ "${dry_run}" -eq "0" ] && printf "[🗂️]" || printf "[🗂️] (DRY RUN)")"
    required_dirs="${plugins_available} ${plugins_enabled} ${plugins_config}"
    for required_dir in ${required_dirs}; do
        [ -d "${required_dir}" ] || {
            printf "%s\n" "  [❌] Missing directory '${required_dir}'." >&2
            exit 1
        }
        printf "%b\n" "       ${TEXT_LIGHTBLUE}${required_dir}${TEXT_RESET}"
    done
    printf "\n  %s Success.\n\n" \
        "$( [ "${dry_run}" -eq "0" ] && printf "[✅]" || printf "[✅] (DRY RUN)" )"
    printf "  %s Installing pihole_munin_...\n" \
        "$( [ "${dry_run}" -eq "0" ] && printf "[🟢]" || printf "[🟢] (DRY RUN)")"
    if [ "${dry_run}" -eq "0" ]; then
        cp -f "${0}" "${pihole_munin_path}" || {
            printf "%s\n" "  [❌] Failed to copy plugin." >&2
            exit 1
        }
        chmod 755 "${pihole_munin_path}" || {
            printf "%s\n" "  [❌] Failed to set permissions." >&2
            exit 1
        }
    fi
    printf "%b\n\n  %s Success.\n" \
        "       ${TEXT_GREEN}${pihole_munin_path}${TEXT_RESET}" \
        "$( [ "${dry_run}" -eq "0" ] && printf "[✅]" || printf "[✅] (DRY RUN)" )"
    for plugin_to_clean in "${plugins_enabled}"/pihole_munin_*; do
        [ ! -e "${plugin_to_clean}" ] && continue
        [ "${plugin_to_clean}" = "${plugins_enabled}/pihole_munin_" ] && continue
        plugins_to_clean="1"
        break
    done
    if [ "$plugins_to_clean" -eq 1 ]; then
        printf "\n  %s Cleaning plugin directory...\n" \
            "$( [ "${dry_run}" -eq "0" ] && printf "[🧼]" || printf "[🧼] (DRY RUN)" )"
        for plugin_to_clean in "${plugins_enabled}"/pihole_munin_*; do
            [ ! -e "${plugin_to_clean}" ] && continue
            [ "${plugin_to_clean}" = "${plugins_enabled}/pihole_munin_" ] && continue
            printf "%b\n" "       ${TEXT_LIGHTBLUE}${plugin_to_clean}${TEXT_RESET}"
            if [ "$dry_run" -eq "0" ]; then
                rm -f "${plugin_to_clean}" || {
                    printf "%s\n" "  [❌] Failed to remove plugin '${plugin_to_clean}'\n" >&2
                    exit 1
                }
            fi
        done
        printf "\n  %s Success.\n" \
            "$( [ "${dry_run}" -eq "0" ] && printf "[✅]" || printf "[✅] (DRY RUN)" )"
    fi
    printf "\n  %s Enabling pihole_munin_ plugins...\n" \
        "$( [ "${dry_run}" -eq "0" ] && printf "[🟢]" || printf "[🟢] (DRY RUN)" )"
    for plugin in ${plugins}; do
        if [ "${dry_run}" -eq "0" ]; then
            ln -sf "${pihole_munin_path}" "${plugins_enabled}/pihole_munin_${plugin}" || {
                printf "%s\n" "  [❌] Failed to create symlink '${plugins_enabled}/pihole_munin_${plugin}'." >&2
                exit 1
            }
        fi
        printf "%b\n" "       ${TEXT_LIGHTBLUE}${plugins_enabled}/pihole_munin_${plugin}${TEXT_RESET}"
    done
    if [ "${dry_run}" -eq "0" ]; then
        printf "\n%s\n\n%s\n\n%s\n%b\n" \
            "  [✅] Success." \
            "  [ℹ️] Please restart the Munin node." \
            "  Example:" \
            "    ${TEXT_GREEN}user@localhost${TEXT_RESET}:${TEXT_LIGHTBLUE}~${TEXT_RESET}$ sudo systemctl restart munin-node.service"
    else
        printf "\n%s\n" "  [✅] (DRY RUN) Success."
    fi
}

pihole_munin_uninstall() {
    pihole_munin_root "$@"
    pihole_munin_header
    dry_run="0"
    for option in "$@"; do
        case "${option}" in
            "-D"|"dry"|"--dry-run")
                dry_run="1"
            ;;
        esac
    done
    printf "  %s Disabling pihole_munin_ plugins...\n" \
        "$( [ "${dry_run}" -eq "0" ] && printf "[🔴]" || printf "[🔴] (DRY RUN)" )"
    [ -d "${plugins_enabled}" ] || {
        printf "%s\n" "  [❌] Missing directory '${plugins_enabled}'." >&2
        exit 1
    }
    for plugin in ${plugins}; do
        if [ -L "${plugins_enabled}/pihole_munin_${plugin}" ]; then
            if [ "${dry_run}" -eq "0" ]; then
                rm -f "${plugins_enabled}/pihole_munin_${plugin}" || {
                    printf "%s\n" "  [❌] Failed to remove symlink '${plugins_enabled}/pihole_munin_${plugin}'." >&2
                    exit 1
                }
            fi
            printf "%b\n" "       ${TEXT_LIGHTBLUE}${plugins_enabled}/pihole_munin_${plugin}${TEXT_RESET}"
        fi
    done
    printf "\n  %s Success.\n" \
        "$( [ "${dry_run}" -eq "0" ] && printf "[✅]" || printf "[✅] (DRY RUN)" )"
    [ -d "${plugins_available}" ] || {
        printf "%s\n" "  [❌] Missing directory '${plugins_available}'." >&2
        exit 1
    }
    [ -f "${pihole_munin_path}" ] || {
        printf "%s\n" "  [❌] Plugin file '${pihole_munin_path}' does not exist." >&2
        exit 1
    }
    if [ "${dry_run}" -eq "0" ]; then
        printf "%s\n" "  [🔴] Uninstalling pihole_munin_..."
        rm -f "${pihole_munin_path}" || {
            printf "%s\n" "  [❌] Failed to remove '${pihole_munin_path}'." >&2
            exit 1
        }
    else
        printf "%s\n" "  [🔴] (DRY RUN) Uninstalling pihole_munin_..."
    fi
    printf "%b\n\n  %s Success.\n" \
        "       ${TEXT_GREEN}${pihole_munin_path}${TEXT_RESET}" \
        "$( [ "${dry_run}" -eq "0" ] && printf "[✅]" || printf "[✅] (DRY RUN)" )"
}

pihole_munin_safe_write() {
    "$@" || { printf "%s\n" "  [❌] Failed to write to temporary file." >&2; return 1; }
}

pihole_munin_safe_move() {
    "$@" || { printf "%s\n" "  [❌] Failed to move temporary file." >&2; return 1; }
}

pihole_munin_mask_input() {
    input=""
    IFS='
'
    stty -echo -icanon
    while :; do
        input_char=$(dd bs=1 count=1 2>/dev/null | od -An -tx1 | tr -d ' \n')
        case "${input_char}" in
            "0a")
                break
            ;;
            "7f"|"08")
                if [ -n "${input}" ]; then
                    input=${input%?}
                    printf '\b \b'
                fi
            ;;
            ??)
                case "${input_char}" in
                    [0-9a-fA-F][0-9a-fA-F])
                        char=$(printf "\\x%s" "${input_char}")
                        input="${input}${char}"
                        printf '*'
                    ;;
                    *)
                        continue
                    ;;
                esac
            ;;
            *)
                continue
            ;;
        esac
    done
    pihole_munin_term_cleanup
    printf '%s\n' "${input}"
}

pihole_munin_safe_prompt() {
    printf "\nEnter value: "
    first_entry=$(pihole_munin_mask_input)
    printf "Confirm value: "
    second_entry=$(pihole_munin_mask_input)
    if [ "$first_entry" != "$second_entry" ]; then
        printf "%s\n" "  [❌] Entered values do not match." >&2
        return 1
    fi
}

pihole_munin_configure() {
    pihole_munin_root "$@"
    config_file="${plugins_config}/pihole_munin_"
    [ -n "${PIHOLE_MUNIN_CONF}" ] && config_file="${PIHOLE_MUNIN_CONF}"
    if [ ! -f "${config_file}" ]; then
        pihole_munin_safe_write printf "[pihole_munin_*]\n" > "${config_file}"
    fi
    configure_command="${1}"
    shift
    case "${configure_command}" in
        "list")
            [ -f "${config_file}" ] || { printf "%s\n" "  [❌] Configuration file not found." >&2; exit 1; }
            matches=$(grep -E '^( *env\.| *user\s| *group\s)' "${config_file}")
            [ -z "${matches}" ] && { printf "%s\n" "  [ℹ️] No config variables found in '${config_file}'."; return 0; }
            printf  "  %s\n" "[🔍] Listing variables in '${config_file}'..."
            printf "%s\n" "${matches}" | while IFS= read -r config_line; do
                if printf '%s' "${config_line}" | grep -qE 'env\.(.*_password|password) '; then
                    list_var=$(printf '%s' "${config_line}" | awk '{print $1}')
                    list_val=$(printf '%s' "${config_line}" | cut -d' ' -f2-)
                    list_len=$(printf '%s' "${list_val}" | wc -c)
                    [ "${list_len}" -gt 0 ] && list_len=$((list_len - 1))
                    list_masked=$(printf '%*s' "${list_len}" '' | tr ' ' '*')
                    printf "%s%s\n" "       ${list_var}" " ${list_masked}"
                else
                    printf "%s\n" "       ${config_line}"
                fi
            done
        ;;
        "add")
            [ -z "${1}" ] && {
                printf "%s\n" "  [❌] No variable specified for addition." >&2
                exit 1
            }
            add_var="${1}"
            case "${add_var}" in
                "env."*)
                    add_var="${add_var#env.}"
                ;;
            esac
            shift
            add_val="$*"
            trimmed_value=$(printf '%s' "${add_val}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            printf "%s\n" "  [➕] Adding variable to '${config_file}'..."
            case "${add_var}" in
                "pihole_password")
                    case "${trimmed_value}" in
                        "nopassword"|"none"|"null")
                            :
                        ;;
                        *)
                            printf "\n  %s\n\n       %s\n" \
                                "[⚠️] Sensitive variable '${add_var}' passed on the command line." \
                                "This may be visible in shell history or process lists." >&2
                        ;;
                    esac
                    if [ -z "${trimmed_value}" ]; then
                        printf "\n  %s\n\n  %s\n\n" \
                            "[⚠️] Sensitive variable '${add_var}' detected." \
                            "[ℹ️] You will be prompted to enter the value securely." >&2
                        if ! pihole_munin_safe_prompt; then
                            exit 1
                        fi
                        trimmed_value="${add_val}"
                    fi
                ;;
                "app_password")
                    printf "\n  %s\n\n       %s\n" \
                        "[⚠️] Sensitive variable '${add_var}' passed on the command line." \
                        "This may be visible in shell history or process lists." >&2
                    if [ -z "${trimmed_value}" ]; then
                        printf "\n  %s\n\n  %s\n\n" \
                            "[⚠️] Sensitive variable '${add_var}' detected." \
                            "[ℹ️] You will be prompted to enter the value securely." >&2
                        if ! pihole_munin_safe_prompt; then
                            exit 1
                        fi
                        trimmed_value="${add_val}"
                    fi
                ;;
            esac
            [ -z "${trimmed_value}" ] && {
                printf "%s\n" "  [❌] Value for '${add_var}' is empty or whitespace only." >&2
                exit 1
            }
            case "${add_var}" in
                "user"|"group")
                    add_entry="    ${add_var} ${add_val}"
                    pihole_munin_safe_write sed "/^ *${add_var}\s/d" "${config_file}" > "${config_file}.tmp"
                ;;
                *)
                    add_entry="    env.${add_var} ${add_val}"
                    pihole_munin_safe_write sed "/^ *env\.${add_var}\s/d" "${config_file}" > "${config_file}.tmp"
                ;;
            esac
            pihole_munin_safe_write printf "%s\n" "${add_entry}" >> "${config_file}.tmp"
            pihole_munin_safe_move "${config_file}.tmp" "${config_file}"
            printf "\n%s\n" "  [✅] Success."
        ;;
        "remove")
            [ -z "${1}" ] && { printf "[❌] No variable specified for removal.\n" >&2; exit 1; }
            printf "%s\n" "  [➖] Removing variable from '${config_file}'..."
            remove_var="${1}"
            case "${remove_var}" in
                "user")
                    pattern='^ *user[[:space:]]'
                ;;
                "group")
                    pattern='^ *group[[:space:]]'
                ;;
                *)
                    escaped_var=$(printf '%s' "${remove_var}" | sed 's/[][\\.^$*]/\\&/g')
                    pattern="^ *env\.${escaped_var}[[:space:]]"
                ;;
            esac
            if grep -Eq "${pattern}" "${config_file}"; then
                pihole_munin_safe_write sed "/${pattern}/d" "${config_file}" > "${config_file}.tmp"
                pihole_munin_safe_move "${config_file}.tmp" "${config_file}"
                printf "\n%s\n" "  [✅] Success."
            else
                printf "\n%s\n\n" "  [⚠️] Variable '${remove_var}' not found in '${config_file}'."
            fi
        ;;
        *)
            printf "\n%s\n\n" "  [⚠️] Unknown command '${configure_command}'." >&2
        ;;
    esac
}

pihole_munin_check() {
    IFS=. read -r a b c <<EOF
${1:-0.0.0}
EOF
    IFS=. read -r x y z <<EOF
${2:-0.0.0}
EOF
    [ "${a:-0}" -gt "${x:-0}" ] && return 0
    [ "${a:-0}" -lt "${x:-0}" ] && return 1
    [ "${b:-0}" -gt "${y:-0}" ] && return 0
    [ "${b:-0}" -lt "${y:-0}" ] && return 1
    [ "${c:-0}" -gt "${z:-0}" ]
}

pihole_munin_version() {
    skip_check="0"
    for option in "$@"; do
        case "${option}" in
            "-S"|"skip"|"--skip-version-check")
                skip_check="1"
            ;;
            *)
                printf "\n%s\n\n" "  [⚠️] Unknown option '${option}'."
                pihole_munin_help version
            ;;
        esac
    done
    printf "%s\n" "  [📦] Version: ${pihole_munin_version}"
    if [ "${skip_check}" -eq "0" ] && command -v dig >/dev/null 2>&1; then
        remote_version=$(dig +short TXT pihole-munin.sainternet.xyz | sed -e 's/[^.0-9]//g')
        printf "\n%s\n" "  [🔄] Checking for updates..."
        if [ -n "${remote_version}" ]; then
            printf "%s\n" "       ${remote_version}"
            if pihole_munin_check "${remote_version}" "${pihole_munin_version}"; then
                printf "\n       %s\n\n  %s\n       %s\n" \
                "A newer version is available: ${remote_version}" \
                "[ℹ️] Run '${0} admin update' to update the plugin, or run" \
                "'${0} help admin update' for more information."
            else
                printf "\n  %s\n\n  %s\n" "[✅] Success." \
                    "[ℹ️] You are using the latest version."
            fi
        else
            printf "%s\n" "  [❌] Unable to check for updates." >&2
            exit 1
        fi
    fi
}

pihole_munin_update() {
    pihole_munin_root "$@"
    pihole_munin_header
    repo_url="github.com/saint-lascivious/pihole_munin_"
    raw_url="https://${repo_url}/raw/master/pihole_munin_"
    for option in "$@"; do
        case "${option}" in
            "-D"|"dry"|"--dry-run")
                dry_run="1"
            ;;
        esac
    done
    [ -f "${pihole_munin_path}" ] || {
        printf "%s\n" "  [❌] Update target '${pihole_munin_path}' not found." >&2
        exit 1
    }
    tmp_file="$(mktemp /tmp/pihole_munin_update.XXXXXX)" || {
        printf "%s\n" "  [❌] Failed to create temporary file." >&2
        exit 1
    }
    printf "  %s Fetching pihole_munin_ from %s...\n" \
        "$( [ "${dry_run}" -eq "0" ] && printf "[⬇️]" || printf "[⬇️] (DRY RUN)" )" \
        "${repo_url}"
    if curl -fsSL "${raw_url}" -o "${tmp_file}"; then
        printf "%s\n" "       ${tmp_file}"
        [ -s "${tmp_file}" ] || {
            printf "%s\n" "  [❌] Downloaded is empty." >&2
            rm -f "${tmp_file}"
            exit 1
        }
        grep -q '^#!/usr/bin/env sh' "${tmp_file}" || {
            printf "%s\n" "  [❌] Downloaded file is not a valid script." >&2
            rm -f "${tmp_file}"
            exit 1
        }
        printf "  %s Success.\n" \
            "$( [ "${dry_run}" -eq "0" ] && printf "[✅]" || printf "[✅] (DRY RUN)" )"
        remote_version=$(grep -E '^version=' "${tmp_file}" | cut -d= -f2)
        local_version=$(grep -E '^version=' "${pihole_munin_path}" | cut -d= -f2)
        version_regex='^[0-9]+(\.[0-9]+){1,2}$'
        if [ -z "${local_version}" ]; then
            local_version_display="unknown"
        elif printf '%s' "${local_version}" | grep -Eq "${version_regex}"; then
            local_version_display="${local_version}"
        else
            local_version_display="invalid"
        fi
        if [ -z "${remote_version}" ]; then
            remote_version_display="unknown"
        elif printf '%s' "${remote_version}" | grep -Eq "${version_regex}"; then
            remote_version_display="${remote_version}"
        else
            remote_version_display="invalid"
        fi
        printf "\n  %s Checking versions...\n       %s\n       %s\n" \
            "$( [ "${dry_run}" -eq "0" ] && printf "[🔄]" || printf "[🔄] (DRY RUN)" )" \
            "local version: ${local_version_display}" \
            "remote version: ${remote_version_display}"
        if [ "${local_version_display}" = "invalid" ] || [ "${remote_version_display}" = "invalid" ]; then
            printf "\n%s\n\n" "  [⚠️] One or both version strings are invalid."
        fi
        if [ "${local_version_display}" = "unknown" ] || [ "${remote_version_display}" = "unknown" ]; then
            printf "\n%s\n\n" "  [⚠️] One or both version strings are unknown."
        fi
        if [ "${local_version_display}" = "invalid" ] || [ "${remote_version_display}" = "invalid" ] \
           || [ "${local_version_display}" = "unknown" ] || [ "${remote_version_display}" = "unknown" ]; then
            if [ -t 0 ]; then
                printf "\n%s" "       Continue anyway? [y/N] "
                read -r answer
                case "${answer}" in
                    [yY]|[yY][eE][sS])
                        printf "\n%s\n\n" "  [🚀] Proceeding with update..."
                    ;;
                    *)
                        printf "%b\n" "  [❌] ${TEXT_RED}Aborted by user (interactive).${TEXT_RESET}" >&2
                        rm -f "${tmp_file}"
                        exit 1
                    ;;
                esac
            else
                printf "%b\n" "  [❌] ${TEXT_RED}Aborted (non-interactive).${TEXT_RESET}" >&2
                rm -f "${tmp_file}"
                exit 1
            fi
        else
            if ! pihole_munin_check "${remote_version}" "${local_version}"; then
                printf "\n%s\n" "  [ℹ️] You are using the latest version of pihole_munin_."
                rm -f "${tmp_file}"
                exit 0
            else
                printf "\n%s\n" "  [ℹ️] A newer version is available."
            fi
        fi
        printf "\n  %s\n" "%s Backing up '${pihole_munin_path}'..." \
            "$( [ "${dry_run}" -eq "0" ] && printf "[🗄️]" || printf "[🗄️] (DRY RUN)" )"
        if [ "${dry_run}" -eq "0" ]; then
            cp -f "${pihole_munin_path}" "${pihole_munin_path}.bak" || {
                printf "%s\n" "  [❌] Failed to back up existing script." >&2
                rm -f "${tmp_file}"
                exit 1
            }
            printf "%s\n\n%s\n\n%s\n\n%s\n%b\n" \
                "       ${pihole_munin_path}.bak" \
                "  [✅] Success." \
                "  [ℹ️] You can restore this backup at any time." \
                "  Example:" \
                "    ${TEXT_GREEN}user@localhost${TEXT_RESET}:${TEXT_LIGHTBLUE}~${TEXT_RESET}$ sudo cp -f ${pihole_munin_path}.bak ${pihole_munin_path}"
        else
            printf "%s\n\n%s\n" \
                "       ${pihole_munin_path}.bak" \
                "  [✅] (DRY RUN) Success."
        fi
        printf "\n  %s Installing update...\n" \
            "$( [ "${dry_run}" -eq "0" ] && printf "[🟢]" || printf "[🟢] (DRY RUN)")"
        chmod 755 "${tmp_file}" || {
            printf "%s\n" "  [❌] Failed to set permissions on update." >&2
            rm -f "${tmp_file}"
            exit 1
        }
        if [ "${dry_run}" -eq "0" ]; then
            mv "${tmp_file}" "${pihole_munin_path}" || {
                printf "%s\n" "  [❌] Failed to install updated plugin." >&2
                rm -f "${tmp_file}"
                exit 1
            }
            printf "\n%s\n\n%s\n\n%s\n%b\n" \
                "  [✅] Success." \
                "  [ℹ️] Please restart the Munin node." \
                "  Example:" \
                "    ${TEXT_GREEN}user@localhost${TEXT_RESET}:${TEXT_LIGHTBLUE}~${TEXT_RESET}$ sudo systemctl restart munin-node.service"
        else
            printf "\n%s\n" "  [✅] (DRY RUN) Success."
        fi
    else
        printf "%s\n" "  [❌] Failed to fetch pihole_munin_." >&2
        rm -f "${tmp_file}"
        exit 1
    fi
}

pihole_munin_test() {
    if ! command -v munin-run >/dev/null 2>&1; then
        printf "%s\n" "  [❌] munin-run command not found." >&2
        exit 1
    fi
    pihole_munin_root "$@"
    pihole_munin_header
    dry_run="0"
    verbose="0"
    trace="0"
    for option in "$@"; do
        case "${option}" in
            "-D"|"dry"|"--dry-run")
                dry_run="1"
            ;;
            "-T"|"trace"|"--trace")
                trace="1"
                verbose="1"
            ;;
            "-V"|"verbose"|"--verbose")
                verbose="1"
            ;;
        esac
    done
    printf "\n  %s Testing pihole_munin_ plugins...\n" \
        "$( [ "${dry_run}" -eq "0" ] && printf "[🧪]" || printf "[🧪] (DRY RUN)")"
    if [ "${dry_run}" -eq "0" ]; then
        for plugin in ${plugins}; do
            if [ "${verbose}" -eq "1" ]; then
                munin_run_cmd="munin-run pihole_munin_${plugin}"
                [ "${trace}" -eq "1" ] && munin_run_cmd="$munin_run_cmd --debug"
                if ! eval "$munin_run_cmd config"; then
                    printf "%s\n" "  [❌] 'config' failed for plugin '${plugin}'."
                    exit 1
                fi
                if ! eval "$munin_run_cmd fetch"; then
                    printf "%s\n" "  [❌] 'fetch' failed for plugin '${plugin}'."
                    exit 1
                fi
            else
                if ! munin-run pihole_munin_"${plugin}" config >/dev/null 2>&1; then
                    printf "%s\n" "  [❌] 'config' failed for plugin '${plugin}'."
                    exit 1
                fi
                if ! munin-run pihole_munin_"${plugin}" fetch >/dev/null 2>&1; then
                    printf "%s\n" "  [❌] 'fetch' failed for plugin '${plugin}'."
                    exit 1
                fi
            fi
            printf "%s\n" "       ${plugin}"
        done
    else
        for plugin in ${plugins}; do
            [ -L "${pihole_munin_path}${plugin}" ] || {
                printf "%s\n" "  [❌] Plugin '${plugin}' not found in '${plugins_available}'." >&2
                exit 1
            }
            printf "%s\n" "       ${plugin}"
        done
    fi
    printf "\n  %s Success.\n" \
        "$( [ "${dry_run}" -eq "0" ] && printf "[✅]" || printf "[✅] (DRY RUN)" )"
}

pihole_munin_help() {
    case "${1}" in
        "-a"|"admin"|"--admin")
            case "${2}" in
                "-A"|"add"|"--add")
                    printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n\n%s\n%s\n%s\n" \
                        "  [❓] ${0} ${1} ${2} <var> [<val>]" \
                        "       Add or update a plugin configuration variable." \
                        "       Variables SHOULD be entered without the env. prefix, and values SHOULD be" \
                        "       without encapsulating quotation." \
                        "  [ℹ️] You will be prompted to enter the value securely if it is sensitive" \
                        "       (e.g. app_password or pihole_password)." \
                        "  Examples:" \
                        "    ${0} ${1} ${2} host 192.168.1.10" \
                        "    ${0} ${1} ${2} user pihole"
                ;;
                "-i"|"install"|"--install")
                    printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n\n%s\n%s\n" \
                        "  [❓] ${0} ${1} ${2} [<option>]" \
                        "       Install pihole_munin_ and enable all plugins." \
                        "  [ℹ️] This command will install pihole_munin_ and enable all pihole_munin_" \
                        "       plugins." \
                        "  Options:" \
                        "      -D, dry, --dry-run       Show what would be done, without making any changes." \
                        "  Example:" \
                        "    ${0} ${1} ${2} --dry-run"
                ;;
                "-l"|"list"|"--list")
                    printf "%s\n\n%s\n\n%s\n" \
                        "  [❓] ${0} ${1} ${2}" \
                        "       List all configured plugin variables." \
                        "  [ℹ️] Sensitive variables (e.g. passwords) will be masked."
                ;;
                "-p"|"password"|"--password")
                    printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n%s\n" \
                        "  [❓] ${0} ${1} ${2} [<password>]" \
                        "       Set the Pi-hole password." \
                        "  [ℹ️] This command will add or update the pihole_password variable in the" \
                        "       plugin configuration file." \
                        "  Examples:" \
                        "    ${0} ${1} ${2} mysecretpassword" \
                        "    ${0} ${1} ${2} nopassword"
                ;;
                "-r"|"remove"|"--remove")
                    printf "%s\n\n%s\n\n%s\n%s\n%s\n" \
                        "  [❓] ${0} ${1} ${2} <var>" \
                        "       Remove a variable from the plugin configuration." \
                        "  Examples:" \
                        "    ${0} ${1} ${2} host" \
                        "    ${0} ${1} ${2} user"
                ;;
                "-u"|"uninstall"|"--uninstall")
                    printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n\n%s\n%s\n" \
                        "  [❓] ${0} ${1} ${2} [<option>]" \
                        "       Disable all plugins and uninstall pihole_munin_." \
                        "  [ℹ️] This command will remove all pihole_munin_ plugins from the Munin node" \
                        "       and uninstall the plugin itself." \
                        "  Options:" \
                        "    -D, dry, --dry-run       Show what would be done, without making any changes." \
                        "  Example:" \
                        "    ${0} ${1} ${2} --dry-run"
                ;;
                "-U"|"update"|"--update")
                    printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n\n%s\n%s\n" \
                        "  [❓] ${0} ${1} ${2} [<option>]" \
                        "       Update pihole_munin_ to the latest version." \
                        "  [ℹ️] This command will download the latest version from the GitHub repository" \
                        "       and replace the current script." \
                        "  Options:" \
                        "    -D, dry, --dry-run       Show what would be done, without making any changes." \
                        "  Example:" \
                        "    ${0} ${1} ${2} --dry-run"
                ;;
                "" )
                    printf "%s\n\n%s\n\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n%s\n" \
                        "  [❓] ${0} ${1} <subcommand>" \
                        "       Manage plugin configuration and installation." \
                        "  Subcommands:" \
                        "    -A, add                      Add or update a plugin configuration variable." \
                        "    -i, install, --install       Install pihole_munin_ and enable all plugins." \
                        "    -l, list                     List all configured plugin variables." \
                        "    -p, password                 Set the Pi-hole password." \
                        "    -r, remove                   Remove a variable from the plugin config." \
                        "    -u, uninstall, --uninstall   Disable all plugins and uninstall pihole_munin_." \
                        "    -U, update                   Update pihole_munin_ to the latest version." \
                        "  [ℹ️] Run '${0} help admin <subcommand>' for more information on a subcommand."
                ;;
                * )
                    printf "%s\n\n%s\n" \
                        "  [⚠️] Unknown ${1} subcommand '${2}'" \
                        "  [ℹ️] Run '${0} help admin' for a list of available subcommands."
                ;;
            esac
        ;;
        "autoconf")
            printf "%s\n\n%s\n%s\n%s\n\n%s\n%s\n\n%s\n\n%s\n%s\n%s\n" \
                "  [❓] ${0} ${1}" \
                "       A plugin with a capabilities=autoconf magic marker will first be invoked" \
                "       with autoconf as the sole argument. When invoked thus the plugin should" \
                "       do one of these two:" \
                "       1. Print 'yes' to signal that the plugin thinks it can be useful on this" \
                "          host" \
                "       2. Print 'no' to signal that the plugin does not think so." \
                "       The plugin should always exit 0, even if the response is 'no'." \
                "       If the answer was 'yes' and it's not a wildcard plugin, the plugin will" \
                "       be linked into the plugins catalog of munin-node."
        ;;
        "config")
            printf "%s\n\n%s\n\n%s\n\n%s\n" \
                "  [❓] ${0} ${1}" \
                "       The config output describes the plugin and the graph it creates." \
                "       The full set of attributes you can use is found in the config reference." \
                "       https://guide.munin-monitoring.org/en/master/reference/plugin.html" \
        ;;
        "fetch")
            printf "%s\n\n%s\n%s\n%s\n\n%s\n\n%s\n" \
                "  [❓] ${0} ${1}" \
                "       When the node receives a fetch command for a plugin, the plugin is" \
                "       invoked without any arguments on the command line and is expected to" \
                "       emit one or more 'field.value' attribute values." \
                "       One for each thing the plugin observes as defined by the config output." \
                "       Plotting of graphs may be disabled by the config output."
        ;;
        "-h"|"help"|"--help")
            printf "%s\n\n%s\n\n%s\n%s\n" \
                "  [❓] ${0} ${1} <command> [<subcommand>]" \
                "       Displays general or detailed help for commands and subcommands." \
                "  Example:" \
                "    ${0} ${1} admin add"
        ;;
        "setpassword")
            printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n%s\n" \
                "  [❓] ${0} ${1} [<password>]" \
                "       Shortcut to set the Pi-hole password." \
                "  [ℹ️] This command will add or update the pihole_password variable in the" \
                "       plugin configuration file." \
                "  Examples:" \
                "    ${0} ${1} mysecretpassword" \
                "    ${0} ${1} nopassword"
        ;;
        "suggest")
            printf "%s\n\n%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n\n%s\n" \
                "  [❓] ${0} ${1}" \
                "       Munin creates one graph per plugin." \
                "       To create many graphs from one plugin, you can write a wildcard plugin." \
                "       These plugins take one or more bits of configuration from the file name" \
                "       it is run as." \
                "       The plugin is stored as one file in the directory for available plugins," \
                "       but is linked as multiple files in the directory for enabled plugins." \
                "       This creates one graph per link name, using just one plugin as source."
        ;;
        "-t"|"test"|"--test-plugins")
            printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n%s\n%s\n\n%s\n%s\n\n%s\n%s\n%s\n%s\n" \
                "  [❓] ${0} ${1}" \
                "       Test all pihole_munin_ plugins." \
                "       This will run the config and fetch commands for each plugin, and report" \
                "       any errors encountered during the process." \
                "  Options:" \
                "    -D, dry, --dry-run      Show what would be done, without making any changes." \
                "    -T, trace, --trace      Show detailed plugin output during the test." \
                "    -V, verbose, --verbose  Show plugin output during the test." \
                "  Note:" \
                "    Use of '--trace' implies '--verbose' and passes '--debug' to 'munin-run'." \
                "  Examples:" \
                "    ${0} ${1} --dry-run" \
                "    ${0} ${1} --trace" \
                "    ${0} ${1} --verbose"
        ;;
        "-v"|"version"|"--version")
            printf "%s\n\n%s\n\n%s\n%s\n\n%s\n%s\n\n%s\n%s\n%s\n" \
                "  [❓] ${0} ${1} [<option>]" \
                "       Display the plugin version string." \
                "  [ℹ️] If not skipped, a check for a newer version will be performed using a" \
                "       remote DNS TXT record located at the pihole-munin.sainternet.xyz domain." \
                "  Options:" \
                "    -S, skip, --skip-version-check   Skip remote plugin version check." \
                "  Examples:" \
                "    ${0} ${1}" \
                "    ${0} ${1} --skip-version-check"
        ;;
        "")
            printf "%s\n\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n%s\n" \
                "  [❓] ${0} <command>" \
                "  Commands:" \
                "    -a, admin, --admin           Manage plugin configuration and installation." \
                "    autoconf                     Check if the plugin can be useful on this host." \
                "    config                       Generate the plugin configuration." \
                "    fetch                        Fetch and format the data for Munin to process." \
                "    -h, help, --help             Show detailed help information." \
                "    setpassword                  Shortcut to set the Pi-hole password." \
                "    suggest                      List available plugins." \
                "    -t, test, --test-plugins     Test all pihole_munin_ plugins." \
                "    -v, version, --version       Display the plugin version string." \
                "  [ℹ️] Run '${0} help <command>' for more information on a command."
        ;;
        * )
            printf "\n%s\n\n" "  [⚠️] Unknown help topic '$*'."
            pihole_munin_help
        ;;
    esac
}

for argument in "$@"; do
    case "${argument}" in
        "-h"|"help"|"--help")
            help_flag="${argument}"
            break
        ;;
    esac
done

if [ -n "${help_flag}" ] && [ "${1}" != "${help_flag}" ]; then
    new_arguments=""
    first="1"
    for argument; do
        if [ "${first}" -eq "1" ] && [ "${argument}" = "${help_flag}" ]; then
            first="0"
            continue
        fi
        new_arguments="${new_arguments:+${new_arguments} }$(printf '%s\n' "${argument}" | sed "s/'/'\\\\''/g; s/^/'/; s/\$/'/")"
    done
    eval "set -- '${help_flag}' ${new_arguments}"
fi

case "${1}" in
    "-a"|"admin"|"--admin")
        case "${2}" in
            "-A"|"add"|"--add")
                pihole_munin_configure "${2}" "$@"
            ;;
            "-i"|"install"|"--install")
                pihole_munin_install "$@"
            ;;
            "-l"|"list"|"--list")
                pihole_munin_configure "list"
            ;;
            "-p"|"password"|"--password")
                pihole_munin_configure "add" "pihole_password" "${3:-}"
            ;;
            "-r"|"remove"|"--remove")
                pihole_munin_configure "${2}" "${3}"
            ;;
            "-u"|"uninstall"|"--uninstall")
                pihole_munin_uninstall "$@"
            ;;
            "-U"|"update"|"--update")
                pihole_munin_update "$@"
            ;;
            "")
                pihole_munin_help "${1}"
            ;;
            *)
                pihole_munin_help "${1}" "${2}"
            ;;
        esac
    ;;
    "autoconf")
        pihole_munin_autoconf
    ;;
    "config")
        pihole_munin_config_handler
        if [ "${MUNIN_CAP_DIRTYCONFIG}" = "1" ]; then
            pihole_munin_fetch_handler
        fi
    ;;
    "fetch")
        pihole_munin_fetch_handler
    ;;
    "-h"|"help"|"--help")
        case "${2}" in
            "")
                pihole_munin_help
            ;;
            "-a"|"admin"|"--admin")
                pihole_munin_help "${2}" "${3:-}"
            ;;
            "autoconf"|"config"|"fetch"|"setpassword"|"suggest"|"-t"|"test"|"--test-plugins"|"-v"|"version"|"--version")
                pihole_munin_help "${2}"
            ;;
            *)
                printf "[⚠️] Unknown help topic '%s'\n\n" "${2}"
                pihole_munin_help
            ;;
        esac
    ;;
    "suggest")
        pihole_munin_suggest
    ;;
    "setpassword")
        pihole_munin_configure "add" "pihole_password" "${2:-}"
    ;;
    "-t"|"test"|"--test-plugins")
        pihole_munin_test "$@"
    ;;
    "-v"|"version"|"--version")
        shift
        pihole_munin_version "$@"
    ;;
    "")
        pihole_munin_fetch_handler
    ;;
    *)
        pihole_munin_help
    ;;
esac

exit 0
